/*! jQuery v3.1.1 | (c) jQuery Foundation | jquery.org/license */
!function(a,b){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){"use strict";var c=[],d=a.document,e=Object.getPrototypeOf,f=c.slice,g=c.concat,h=c.push,i=c.indexOf,j={},k=j.toString,l=j.hasOwnProperty,m=l.toString,n=m.call(Object),o={};function p(a,b){b=b||d;var c=b.createElement("script");c.text=a,b.head.appendChild(c).parentNode.removeChild(c)}var q="3.1.1",r=function(a,b){return new r.fn.init(a,b)},s=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,t=/^-ms-/,u=/-([a-z])/g,v=function(a,b){return b.toUpperCase()};r.fn=r.prototype={jquery:q,constructor:r,length:0,toArray:function(){return f.call(this)},get:function(a){return null==a?f.call(this):a<0?this[a+this.length]:this[a]},pushStack:function(a){var b=r.merge(this.constructor(),a);return b.prevObject=this,b},each:function(a){return r.each(this,a)},map:function(a){return this.pushStack(r.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(f.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(a<0?b:0);return this.pushStack(c>=0&&c<b?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:h,sort:c.sort,splice:c.splice},r.extend=r.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||r.isFunction(g)||(g={}),h===i&&(g=this,h--);h<i;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(r.isPlainObject(d)||(e=r.isArray(d)))?(e?(e=!1,f=c&&r.isArray(c)?c:[]):f=c&&r.isPlainObject(c)?c:{},g[b]=r.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},r.extend({expando:"jQuery"+(q+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===r.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=r.type(a);return("number"===b||"string"===b)&&!isNaN(a-parseFloat(a))},isPlainObject:function(a){var b,c;return!(!a||"[object Object]"!==k.call(a))&&(!(b=e(a))||(c=l.call(b,"constructor")&&b.constructor,"function"==typeof c&&m.call(c)===n))},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?j[k.call(a)]||"object":typeof a},globalEval:function(a){p(a)},camelCase:function(a){return a.replace(t,"ms-").replace(u,v)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(w(a)){for(c=a.length;d<c;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(s,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(w(Object(a))?r.merge(c,"string"==typeof a?[a]:a):h.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:i.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;d<c;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;f<g;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,f=0,h=[];if(w(a))for(d=a.length;f<d;f++)e=b(a[f],f,c),null!=e&&h.push(e);else for(f in a)e=b(a[f],f,c),null!=e&&h.push(e);return g.apply([],h)},guid:1,proxy:function(a,b){var c,d,e;if("string"==typeof b&&(c=a[b],b=a,a=c),r.isFunction(a))return d=f.call(arguments,2),e=function(){return a.apply(b||this,d.concat(f.call(arguments)))},e.guid=a.guid=a.guid||r.guid++,e},now:Date.now,support:o}),"function"==typeof Symbol&&(r.fn[Symbol.iterator]=c[Symbol.iterator]),r.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){j["[object "+b+"]"]=b.toLowerCase()});function w(a){var b=!!a&&"length"in a&&a.length,c=r.type(a);return"function"!==c&&!r.isWindow(a)&&("array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a)}var x=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C={}.hasOwnProperty,D=[],E=D.pop,F=D.push,G=D.push,H=D.slice,I=function(a,b){for(var c=0,d=a.length;c<d;c++)if(a[c]===b)return c;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",K="[\\x20\\t\\r\\n\\f]",L="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",M="\\["+K+"*("+L+")(?:"+K+"*([*^$|!~]?=)"+K+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+L+"))|)"+K+"*\\]",N=":("+L+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",O=new RegExp(K+"+","g"),P=new RegExp("^"+K+"+|((?:^|[^\\\\])(?:\\\\.)*)"+K+"+$","g"),Q=new RegExp("^"+K+"*,"+K+"*"),R=new RegExp("^"+K+"*([>+~]|"+K+")"+K+"*"),S=new RegExp("="+K+"*([^\\]'\"]*?)"+K+"*\\]","g"),T=new RegExp(N),U=new RegExp("^"+L+"$"),V={ID:new RegExp("^#("+L+")"),CLASS:new RegExp("^\\.("+L+")"),TAG:new RegExp("^("+L+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+N),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+K+"*(even|odd|(([+-]|)(\\d*)n|)"+K+"*(?:([+-]|)"+K+"*(\\d+)|))"+K+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+K+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+K+"*((?:-\\d)?\\d*)"+K+"*\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$=/[+~]/,_=new RegExp("\\\\([\\da-f]{1,6}"+K+"?|("+K+")|.)","ig"),aa=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:d<0?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ba=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ca=function(a,b){return b?"\0"===a?"\ufffd":a.slice(0,-1)+"\\"+a.charCodeAt(a.length-1).toString(16)+" ":"\\"+a},da=function(){m()},ea=ta(function(a){return a.disabled===!0&&("form"in a||"label"in a)},{dir:"parentNode",next:"legend"});try{G.apply(D=H.call(v.childNodes),v.childNodes),D[v.childNodes.length].nodeType}catch(fa){G={apply:D.length?function(a,b){F.apply(a,H.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s=b&&b.ownerDocument,w=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==w&&9!==w&&11!==w)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==w&&(l=Z.exec(a)))if(f=l[1]){if(9===w){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(s&&(j=s.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(l[2])return G.apply(d,b.getElementsByTagName(a)),d;if((f=l[3])&&c.getElementsByClassName&&b.getElementsByClassName)return G.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==w)s=b,r=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(ba,ca):b.setAttribute("id",k=u),o=g(a),h=o.length;while(h--)o[h]="#"+k+" "+sa(o[h]);r=o.join(","),s=$.test(a)&&qa(b.parentNode)||b}if(r)try{return G.apply(d,s.querySelectorAll(r)),d}catch(x){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(P,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("fieldset");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&a.sourceIndex-b.sourceIndex;if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return function(b){return"form"in b?b.parentNode&&b.disabled===!1?"label"in b?"label"in b.parentNode?b.parentNode.disabled===a:b.disabled===a:b.isDisabled===a||b.isDisabled!==!a&&ea(b)===a:b.disabled===a:"label"in b&&b.disabled===a}}function pa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function qa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return!!b&&"HTML"!==b.nodeName},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),v!==n&&(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Y.test(n.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){return a.getAttribute("id")===b}},d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}}):(d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}},d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c,d,e,f=b.getElementById(a);if(f){if(c=f.getAttributeNode("id"),c&&c.value===a)return[f];e=b.getElementsByName(a),d=0;while(f=e[d++])if(c=f.getAttributeNode("id"),c&&c.value===a)return[f]}return[]}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){if("undefined"!=typeof b.getElementsByClassName&&p)return b.getElementsByClassName(a)},r=[],q=[],(c.qsa=Y.test(n.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+K+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+K+"*(?:value|"+J+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){a.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+K+"*[*^$|!~]?="),2!==a.querySelectorAll(":enabled").length&&q.push(":enabled",":disabled"),o.appendChild(a).disabled=!0,2!==a.querySelectorAll(":disabled").length&&q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Y.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"*"),s.call(a,"[s!='']:x"),r.push("!=",N)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Y.test(o.compareDocumentPosition),t=b||Y.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?I(k,a)-I(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?I(k,a)-I(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?la(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(S,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&C.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.escape=function(a){return(a+"").replace(ba,ca)},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(_,aa),a[3]=(a[3]||a[4]||a[5]||"").replace(_,aa),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return V.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&T.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(_,aa).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+K+")"+a+"("+K+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:!b||(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(O," ")+" ").indexOf(c)>-1:"|="===b&&(e===c||e.slice(0,c.length+1)===c+"-"))}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=I(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(P,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(_,aa),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return U.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(_,aa).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:oa(!1),disabled:oa(!0),checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return X.test(a.nodeName)},input:function(a){return W.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:pa(function(){return[0]}),last:pa(function(a,b){return[b-1]}),eq:pa(function(a,b,c){return[c<0?c+b:c]}),even:pa(function(a,b){for(var c=0;c<b;c+=2)a.push(c);return a}),odd:pa(function(a,b){for(var c=1;c<b;c+=2)a.push(c);return a}),lt:pa(function(a,b,c){for(var d=c<0?c+b:c;--d>=0;)a.push(d);return a}),gt:pa(function(a,b,c){for(var d=c<0?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function ra(){}ra.prototype=d.filters=d.pseudos,d.setFilters=new ra,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=Q.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=R.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(P," ")}),h=h.slice(c.length));for(g in d.filter)!(e=V[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function sa(a){for(var b=0,c=a.length,d="";b<c;b++)d+=a[b].value;return d}function ta(a,b,c){var d=b.dir,e=b.next,f=e||d,g=c&&"parentNode"===f,h=x++;return b.first?function(b,c,e){while(b=b[d])if(1===b.nodeType||g)return a(b,c,e);return!1}:function(b,c,i){var j,k,l,m=[w,h];if(i){while(b=b[d])if((1===b.nodeType||g)&&a(b,c,i))return!0}else while(b=b[d])if(1===b.nodeType||g)if(l=b[u]||(b[u]={}),k=l[b.uniqueID]||(l[b.uniqueID]={}),e&&e===b.nodeName.toLowerCase())b=b[d]||b;else{if((j=k[f])&&j[0]===w&&j[1]===h)return m[2]=j[2];if(k[f]=m,m[2]=a(b,c,i))return!0}return!1}}function ua(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function va(a,b,c){for(var d=0,e=b.length;d<e;d++)ga(a,b[d],c);return c}function wa(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;h<i;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function xa(a,b,c,d,e,f){return d&&!d[u]&&(d=xa(d)),e&&!e[u]&&(e=xa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||va(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:wa(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=wa(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?I(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=wa(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):G.apply(g,r)})}function ya(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ta(function(a){return a===b},h,!0),l=ta(function(a){return I(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];i<f;i++)if(c=d.relative[a[i].type])m=[ta(ua(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;e<f;e++)if(d.relative[a[e].type])break;return xa(i>1&&ua(m),i>1&&sa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(P,"$1"),c,i<e&&ya(a.slice(i,e)),e<f&&ya(a=a.slice(e)),e<f&&sa(a))}m.push(c)}return ua(m)}function za(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=E.call(i));u=wa(u)}G.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&ga.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=ya(b[c]),f[u]?d.push(f):e.push(f);f=A(a,za(e,d)),f.selector=a}return f},i=ga.select=function(a,b,c,e){var f,i,j,k,l,m="function"==typeof a&&a,n=!e&&g(a=m.selector||a);if(c=c||[],1===n.length){if(i=n[0]=n[0].slice(0),i.length>2&&"ID"===(j=i[0]).type&&9===b.nodeType&&p&&d.relative[i[1].type]){if(b=(d.find.ID(j.matches[0].replace(_,aa),b)||[])[0],!b)return c;m&&(b=b.parentNode),a=a.slice(i.shift().value.length)}f=V.needsContext.test(a)?0:i.length;while(f--){if(j=i[f],d.relative[k=j.type])break;if((l=d.find[k])&&(e=l(j.matches[0].replace(_,aa),$.test(i[0].type)&&qa(b.parentNode)||b))){if(i.splice(f,1),a=e.length&&sa(i),!a)return G.apply(c,e),c;break}}}return(m||h(a,n))(e,b,!p,c,!b||$.test(a)&&qa(b.parentNode)||b),c},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("fieldset"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){if(!c)return a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){if(!c&&"input"===a.nodeName.toLowerCase())return a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(J,function(a,b,c){var d;if(!c)return a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);r.find=x,r.expr=x.selectors,r.expr[":"]=r.expr.pseudos,r.uniqueSort=r.unique=x.uniqueSort,r.text=x.getText,r.isXMLDoc=x.isXML,r.contains=x.contains,r.escapeSelector=x.escape;var y=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&r(a).is(c))break;d.push(a)}return d},z=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},A=r.expr.match.needsContext,B=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,C=/^.[^:#\[\.,]*$/;function D(a,b,c){return r.isFunction(b)?r.grep(a,function(a,d){return!!b.call(a,d,a)!==c}):b.nodeType?r.grep(a,function(a){return a===b!==c}):"string"!=typeof b?r.grep(a,function(a){return i.call(b,a)>-1!==c}):C.test(b)?r.filter(b,a,c):(b=r.filter(b,a),r.grep(a,function(a){return i.call(b,a)>-1!==c&&1===a.nodeType}))}r.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?r.find.matchesSelector(d,a)?[d]:[]:r.find.matches(a,r.grep(b,function(a){return 1===a.nodeType}))},r.fn.extend({find:function(a){var b,c,d=this.length,e=this;if("string"!=typeof a)return this.pushStack(r(a).filter(function(){for(b=0;b<d;b++)if(r.contains(e[b],this))return!0}));for(c=this.pushStack([]),b=0;b<d;b++)r.find(a,e[b],c);return d>1?r.uniqueSort(c):c},filter:function(a){return this.pushStack(D(this,a||[],!1))},not:function(a){return this.pushStack(D(this,a||[],!0))},is:function(a){return!!D(this,"string"==typeof a&&A.test(a)?r(a):a||[],!1).length}});var E,F=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,G=r.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||E,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:F.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof r?b[0]:b,r.merge(this,r.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),B.test(e[1])&&r.isPlainObject(b))for(e in b)r.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&(this[0]=f,this.length=1),this}return a.nodeType?(this[0]=a,this.length=1,this):r.isFunction(a)?void 0!==c.ready?c.ready(a):a(r):r.makeArray(a,this)};G.prototype=r.fn,E=r(d);var H=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};r.fn.extend({has:function(a){var b=r(a,this),c=b.length;return this.filter(function(){for(var a=0;a<c;a++)if(r.contains(this,b[a]))return!0})},closest:function(a,b){var c,d=0,e=this.length,f=[],g="string"!=typeof a&&r(a);if(!A.test(a))for(;d<e;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&r.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?r.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?i.call(r(a),this[0]):i.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(r.uniqueSort(r.merge(this.get(),r(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function J(a,b){while((a=a[b])&&1!==a.nodeType);return a}r.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return y(a,"parentNode")},parentsUntil:function(a,b,c){return y(a,"parentNode",c)},next:function(a){return J(a,"nextSibling")},prev:function(a){return J(a,"previousSibling")},nextAll:function(a){return y(a,"nextSibling")},prevAll:function(a){return y(a,"previousSibling")},nextUntil:function(a,b,c){return y(a,"nextSibling",c)},prevUntil:function(a,b,c){return y(a,"previousSibling",c)},siblings:function(a){return z((a.parentNode||{}).firstChild,a)},children:function(a){return z(a.firstChild)},contents:function(a){return a.contentDocument||r.merge([],a.childNodes)}},function(a,b){r.fn[a]=function(c,d){var e=r.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=r.filter(d,e)),this.length>1&&(I[a]||r.uniqueSort(e),H.test(a)&&e.reverse()),this.pushStack(e)}});var K=/[^\x20\t\r\n\f]+/g;function L(a){var b={};return r.each(a.match(K)||[],function(a,c){b[c]=!0}),b}r.Callbacks=function(a){a="string"==typeof a?L(a):r.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){r.each(b,function(b,c){r.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==r.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return r.each(arguments,function(a,b){var c;while((c=r.inArray(b,f,c))>-1)f.splice(c,1),c<=h&&h--}),this},has:function(a){return a?r.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||b||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j};function M(a){return a}function N(a){throw a}function O(a,b,c){var d;try{a&&r.isFunction(d=a.promise)?d.call(a).done(b).fail(c):a&&r.isFunction(d=a.then)?d.call(a,b,c):b.call(void 0,a)}catch(a){c.call(void 0,a)}}r.extend({Deferred:function(b){var c=[["notify","progress",r.Callbacks("memory"),r.Callbacks("memory"),2],["resolve","done",r.Callbacks("once memory"),r.Callbacks("once memory"),0,"resolved"],["reject","fail",r.Callbacks("once memory"),r.Callbacks("once memory"),1,"rejected"]],d="pending",e={state:function(){return d},always:function(){return f.done(arguments).fail(arguments),this},"catch":function(a){return e.then(null,a)},pipe:function(){var a=arguments;return r.Deferred(function(b){r.each(c,function(c,d){var e=r.isFunction(a[d[4]])&&a[d[4]];f[d[1]](function(){var a=e&&e.apply(this,arguments);a&&r.isFunction(a.promise)?a.promise().progress(b.notify).done(b.resolve).fail(b.reject):b[d[0]+"With"](this,e?[a]:arguments)})}),a=null}).promise()},then:function(b,d,e){var f=0;function g(b,c,d,e){return function(){var h=this,i=arguments,j=function(){var a,j;if(!(b<f)){if(a=d.apply(h,i),a===c.promise())throw new TypeError("Thenable self-resolution");j=a&&("object"==typeof a||"function"==typeof a)&&a.then,r.isFunction(j)?e?j.call(a,g(f,c,M,e),g(f,c,N,e)):(f++,j.call(a,g(f,c,M,e),g(f,c,N,e),g(f,c,M,c.notifyWith))):(d!==M&&(h=void 0,i=[a]),(e||c.resolveWith)(h,i))}},k=e?j:function(){try{j()}catch(a){r.Deferred.exceptionHook&&r.Deferred.exceptionHook(a,k.stackTrace),b+1>=f&&(d!==N&&(h=void 0,i=[a]),c.rejectWith(h,i))}};b?k():(r.Deferred.getStackHook&&(k.stackTrace=r.Deferred.getStackHook()),a.setTimeout(k))}}return r.Deferred(function(a){c[0][3].add(g(0,a,r.isFunction(e)?e:M,a.notifyWith)),c[1][3].add(g(0,a,r.isFunction(b)?b:M)),c[2][3].add(g(0,a,r.isFunction(d)?d:N))}).promise()},promise:function(a){return null!=a?r.extend(a,e):e}},f={};return r.each(c,function(a,b){var g=b[2],h=b[5];e[b[1]]=g.add,h&&g.add(function(){d=h},c[3-a][2].disable,c[0][2].lock),g.add(b[3].fire),f[b[0]]=function(){return f[b[0]+"With"](this===f?void 0:this,arguments),this},f[b[0]+"With"]=g.fireWith}),e.promise(f),b&&b.call(f,f),f},when:function(a){var b=arguments.length,c=b,d=Array(c),e=f.call(arguments),g=r.Deferred(),h=function(a){return function(c){d[a]=this,e[a]=arguments.length>1?f.call(arguments):c,--b||g.resolveWith(d,e)}};if(b<=1&&(O(a,g.done(h(c)).resolve,g.reject),"pending"===g.state()||r.isFunction(e[c]&&e[c].then)))return g.then();while(c--)O(e[c],h(c),g.reject);return g.promise()}});var P=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;r.Deferred.exceptionHook=function(b,c){a.console&&a.console.warn&&b&&P.test(b.name)&&a.console.warn("jQuery.Deferred exception: "+b.message,b.stack,c)},r.readyException=function(b){a.setTimeout(function(){throw b})};var Q=r.Deferred();r.fn.ready=function(a){return Q.then(a)["catch"](function(a){r.readyException(a)}),this},r.extend({isReady:!1,readyWait:1,holdReady:function(a){a?r.readyWait++:r.ready(!0)},ready:function(a){(a===!0?--r.readyWait:r.isReady)||(r.isReady=!0,a!==!0&&--r.readyWait>0||Q.resolveWith(d,[r]))}}),r.ready.then=Q.then;function R(){d.removeEventListener("DOMContentLoaded",R),
a.removeEventListener("load",R),r.ready()}"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(r.ready):(d.addEventListener("DOMContentLoaded",R),a.addEventListener("load",R));var S=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===r.type(c)){e=!0;for(h in c)S(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,r.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(r(a),c)})),b))for(;h<i;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},T=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function U(){this.expando=r.expando+U.uid++}U.uid=1,U.prototype={cache:function(a){var b=a[this.expando];return b||(b={},T(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[r.camelCase(b)]=c;else for(d in b)e[r.camelCase(d)]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][r.camelCase(b)]},access:function(a,b,c){return void 0===b||b&&"string"==typeof b&&void 0===c?this.get(a,b):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d=a[this.expando];if(void 0!==d){if(void 0!==b){r.isArray(b)?b=b.map(r.camelCase):(b=r.camelCase(b),b=b in d?[b]:b.match(K)||[]),c=b.length;while(c--)delete d[b[c]]}(void 0===b||r.isEmptyObject(d))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!r.isEmptyObject(b)}};var V=new U,W=new U,X=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Y=/[A-Z]/g;function Z(a){return"true"===a||"false"!==a&&("null"===a?null:a===+a+""?+a:X.test(a)?JSON.parse(a):a)}function $(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(Y,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c=Z(c)}catch(e){}W.set(a,b,c)}else c=void 0;return c}r.extend({hasData:function(a){return W.hasData(a)||V.hasData(a)},data:function(a,b,c){return W.access(a,b,c)},removeData:function(a,b){W.remove(a,b)},_data:function(a,b,c){return V.access(a,b,c)},_removeData:function(a,b){V.remove(a,b)}}),r.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=W.get(f),1===f.nodeType&&!V.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=r.camelCase(d.slice(5)),$(f,d,e[d])));V.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){W.set(this,a)}):S(this,function(b){var c;if(f&&void 0===b){if(c=W.get(f,a),void 0!==c)return c;if(c=$(f,a),void 0!==c)return c}else this.each(function(){W.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){W.remove(this,a)})}}),r.extend({queue:function(a,b,c){var d;if(a)return b=(b||"fx")+"queue",d=V.get(a,b),c&&(!d||r.isArray(c)?d=V.access(a,b,r.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||"fx";var c=r.queue(a,b),d=c.length,e=c.shift(),f=r._queueHooks(a,b),g=function(){r.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return V.get(a,c)||V.access(a,c,{empty:r.Callbacks("once memory").add(function(){V.remove(a,[b+"queue",c])})})}}),r.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?r.queue(this[0],a):void 0===b?this:this.each(function(){var c=r.queue(this,a,b);r._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&r.dequeue(this,a)})},dequeue:function(a){return this.each(function(){r.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=r.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=V.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var _=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,aa=new RegExp("^(?:([+-])=|)("+_+")([a-z%]*)$","i"),ba=["Top","Right","Bottom","Left"],ca=function(a,b){return a=b||a,"none"===a.style.display||""===a.style.display&&r.contains(a.ownerDocument,a)&&"none"===r.css(a,"display")},da=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};function ea(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return r.css(a,b,"")},i=h(),j=c&&c[3]||(r.cssNumber[b]?"":"px"),k=(r.cssNumber[b]||"px"!==j&&+i)&&aa.exec(r.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,r.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var fa={};function ga(a){var b,c=a.ownerDocument,d=a.nodeName,e=fa[d];return e?e:(b=c.body.appendChild(c.createElement(d)),e=r.css(b,"display"),b.parentNode.removeChild(b),"none"===e&&(e="block"),fa[d]=e,e)}function ha(a,b){for(var c,d,e=[],f=0,g=a.length;f<g;f++)d=a[f],d.style&&(c=d.style.display,b?("none"===c&&(e[f]=V.get(d,"display")||null,e[f]||(d.style.display="")),""===d.style.display&&ca(d)&&(e[f]=ga(d))):"none"!==c&&(e[f]="none",V.set(d,"display",c)));for(f=0;f<g;f++)null!=e[f]&&(a[f].style.display=e[f]);return a}r.fn.extend({show:function(){return ha(this,!0)},hide:function(){return ha(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){ca(this)?r(this).show():r(this).hide()})}});var ia=/^(?:checkbox|radio)$/i,ja=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ka=/^$|\/(?:java|ecma)script/i,la={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};la.optgroup=la.option,la.tbody=la.tfoot=la.colgroup=la.caption=la.thead,la.th=la.td;function ma(a,b){var c;return c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[],void 0===b||b&&r.nodeName(a,b)?r.merge([a],c):c}function na(a,b){for(var c=0,d=a.length;c<d;c++)V.set(a[c],"globalEval",!b||V.get(b[c],"globalEval"))}var oa=/<|&#?\w+;/;function pa(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],n=0,o=a.length;n<o;n++)if(f=a[n],f||0===f)if("object"===r.type(f))r.merge(m,f.nodeType?[f]:f);else if(oa.test(f)){g=g||l.appendChild(b.createElement("div")),h=(ja.exec(f)||["",""])[1].toLowerCase(),i=la[h]||la._default,g.innerHTML=i[1]+r.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;r.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",n=0;while(f=m[n++])if(d&&r.inArray(f,d)>-1)e&&e.push(f);else if(j=r.contains(f.ownerDocument,f),g=ma(l.appendChild(f),"script"),j&&na(g),c){k=0;while(f=g[k++])ka.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),o.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",o.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var qa=d.documentElement,ra=/^key/,sa=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ta=/^([^.]*)(?:\.(.+)|)/;function ua(){return!0}function va(){return!1}function wa(){try{return d.activeElement}catch(a){}}function xa(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)xa(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=va;else if(!e)return a;return 1===f&&(g=e,e=function(a){return r().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=r.guid++)),a.each(function(){r.event.add(this,b,e,d,c)})}r.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q=V.get(a);if(q){c.handler&&(f=c,c=f.handler,e=f.selector),e&&r.find.matchesSelector(qa,e),c.guid||(c.guid=r.guid++),(i=q.events)||(i=q.events={}),(g=q.handle)||(g=q.handle=function(b){return"undefined"!=typeof r&&r.event.triggered!==b.type?r.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(K)||[""],j=b.length;while(j--)h=ta.exec(b[j])||[],n=p=h[1],o=(h[2]||"").split(".").sort(),n&&(l=r.event.special[n]||{},n=(e?l.delegateType:l.bindType)||n,l=r.event.special[n]||{},k=r.extend({type:n,origType:p,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&r.expr.match.needsContext.test(e),namespace:o.join(".")},f),(m=i[n])||(m=i[n]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,o,g)!==!1||a.addEventListener&&a.addEventListener(n,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),r.event.global[n]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q=V.hasData(a)&&V.get(a);if(q&&(i=q.events)){b=(b||"").match(K)||[""],j=b.length;while(j--)if(h=ta.exec(b[j])||[],n=p=h[1],o=(h[2]||"").split(".").sort(),n){l=r.event.special[n]||{},n=(d?l.delegateType:l.bindType)||n,m=i[n]||[],h=h[2]&&new RegExp("(^|\\.)"+o.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&p!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,o,q.handle)!==!1||r.removeEvent(a,n,q.handle),delete i[n])}else for(n in i)r.event.remove(a,n+b[j],c,d,!0);r.isEmptyObject(i)&&V.remove(a,"handle events")}},dispatch:function(a){var b=r.event.fix(a),c,d,e,f,g,h,i=new Array(arguments.length),j=(V.get(this,"events")||{})[b.type]||[],k=r.event.special[b.type]||{};for(i[0]=b,c=1;c<arguments.length;c++)i[c]=arguments[c];if(b.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,b)!==!1){h=r.event.handlers.call(this,b,j),c=0;while((f=h[c++])&&!b.isPropagationStopped()){b.currentTarget=f.elem,d=0;while((g=f.handlers[d++])&&!b.isImmediatePropagationStopped())b.rnamespace&&!b.rnamespace.test(g.namespace)||(b.handleObj=g,b.data=g.data,e=((r.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(b.result=e)===!1&&(b.preventDefault(),b.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,b),b.result}},handlers:function(a,b){var c,d,e,f,g,h=[],i=b.delegateCount,j=a.target;if(i&&j.nodeType&&!("click"===a.type&&a.button>=1))for(;j!==this;j=j.parentNode||this)if(1===j.nodeType&&("click"!==a.type||j.disabled!==!0)){for(f=[],g={},c=0;c<i;c++)d=b[c],e=d.selector+" ",void 0===g[e]&&(g[e]=d.needsContext?r(e,this).index(j)>-1:r.find(e,this,null,[j]).length),g[e]&&f.push(d);f.length&&h.push({elem:j,handlers:f})}return j=this,i<b.length&&h.push({elem:j,handlers:b.slice(i)}),h},addProp:function(a,b){Object.defineProperty(r.Event.prototype,a,{enumerable:!0,configurable:!0,get:r.isFunction(b)?function(){if(this.originalEvent)return b(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[a]},set:function(b){Object.defineProperty(this,a,{enumerable:!0,configurable:!0,writable:!0,value:b})}})},fix:function(a){return a[r.expando]?a:new r.Event(a)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==wa()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===wa()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&r.nodeName(this,"input"))return this.click(),!1},_default:function(a){return r.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},r.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},r.Event=function(a,b){return this instanceof r.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ua:va,this.target=a.target&&3===a.target.nodeType?a.target.parentNode:a.target,this.currentTarget=a.currentTarget,this.relatedTarget=a.relatedTarget):this.type=a,b&&r.extend(this,b),this.timeStamp=a&&a.timeStamp||r.now(),void(this[r.expando]=!0)):new r.Event(a,b)},r.Event.prototype={constructor:r.Event,isDefaultPrevented:va,isPropagationStopped:va,isImmediatePropagationStopped:va,isSimulated:!1,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ua,a&&!this.isSimulated&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ua,a&&!this.isSimulated&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ua,a&&!this.isSimulated&&a.stopImmediatePropagation(),this.stopPropagation()}},r.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(a){var b=a.button;return null==a.which&&ra.test(a.type)?null!=a.charCode?a.charCode:a.keyCode:!a.which&&void 0!==b&&sa.test(a.type)?1&b?1:2&b?3:4&b?2:0:a.which}},r.event.addProp),r.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){r.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||r.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),r.fn.extend({on:function(a,b,c,d){return xa(this,a,b,c,d)},one:function(a,b,c,d){return xa(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,r(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=va),this.each(function(){r.event.remove(this,a,c,b)})}});var ya=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,za=/<script|<style|<link/i,Aa=/checked\s*(?:[^=]|=\s*.checked.)/i,Ba=/^true\/(.*)/,Ca=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Da(a,b){return r.nodeName(a,"table")&&r.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a:a}function Ea(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function Fa(a){var b=Ba.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Ga(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(V.hasData(a)&&(f=V.access(a),g=V.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;c<d;c++)r.event.add(b,e,j[e][c])}W.hasData(a)&&(h=W.access(a),i=r.extend({},h),W.set(b,i))}}function Ha(a,b){var c=b.nodeName.toLowerCase();"input"===c&&ia.test(a.type)?b.checked=a.checked:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}function Ia(a,b,c,d){b=g.apply([],b);var e,f,h,i,j,k,l=0,m=a.length,n=m-1,q=b[0],s=r.isFunction(q);if(s||m>1&&"string"==typeof q&&!o.checkClone&&Aa.test(q))return a.each(function(e){var f=a.eq(e);s&&(b[0]=q.call(this,e,f.html())),Ia(f,b,c,d)});if(m&&(e=pa(b,a[0].ownerDocument,!1,a,d),f=e.firstChild,1===e.childNodes.length&&(e=f),f||d)){for(h=r.map(ma(e,"script"),Ea),i=h.length;l<m;l++)j=e,l!==n&&(j=r.clone(j,!0,!0),i&&r.merge(h,ma(j,"script"))),c.call(a[l],j,l);if(i)for(k=h[h.length-1].ownerDocument,r.map(h,Fa),l=0;l<i;l++)j=h[l],ka.test(j.type||"")&&!V.access(j,"globalEval")&&r.contains(k,j)&&(j.src?r._evalUrl&&r._evalUrl(j.src):p(j.textContent.replace(Ca,""),k))}return a}function Ja(a,b,c){for(var d,e=b?r.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||r.cleanData(ma(d)),d.parentNode&&(c&&r.contains(d.ownerDocument,d)&&na(ma(d,"script")),d.parentNode.removeChild(d));return a}r.extend({htmlPrefilter:function(a){return a.replace(ya,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=r.contains(a.ownerDocument,a);if(!(o.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||r.isXMLDoc(a)))for(g=ma(h),f=ma(a),d=0,e=f.length;d<e;d++)Ha(f[d],g[d]);if(b)if(c)for(f=f||ma(a),g=g||ma(h),d=0,e=f.length;d<e;d++)Ga(f[d],g[d]);else Ga(a,h);return g=ma(h,"script"),g.length>0&&na(g,!i&&ma(a,"script")),h},cleanData:function(a){for(var b,c,d,e=r.event.special,f=0;void 0!==(c=a[f]);f++)if(T(c)){if(b=c[V.expando]){if(b.events)for(d in b.events)e[d]?r.event.remove(c,d):r.removeEvent(c,d,b.handle);c[V.expando]=void 0}c[W.expando]&&(c[W.expando]=void 0)}}}),r.fn.extend({detach:function(a){return Ja(this,a,!0)},remove:function(a){return Ja(this,a)},text:function(a){return S(this,function(a){return void 0===a?r.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return Ia(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Da(this,a);b.appendChild(a)}})},prepend:function(){return Ia(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Da(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return Ia(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return Ia(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(r.cleanData(ma(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null!=a&&a,b=null==b?a:b,this.map(function(){return r.clone(this,a,b)})},html:function(a){return S(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!za.test(a)&&!la[(ja.exec(a)||["",""])[1].toLowerCase()]){a=r.htmlPrefilter(a);try{for(;c<d;c++)b=this[c]||{},1===b.nodeType&&(r.cleanData(ma(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return Ia(this,arguments,function(b){var c=this.parentNode;r.inArray(this,a)<0&&(r.cleanData(ma(this)),c&&c.replaceChild(b,this))},a)}}),r.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){r.fn[a]=function(a){for(var c,d=[],e=r(a),f=e.length-1,g=0;g<=f;g++)c=g===f?this:this.clone(!0),r(e[g])[b](c),h.apply(d,c.get());return this.pushStack(d)}});var Ka=/^margin/,La=new RegExp("^("+_+")(?!px)[a-z%]+$","i"),Ma=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)};!function(){function b(){if(i){i.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",i.innerHTML="",qa.appendChild(h);var b=a.getComputedStyle(i);c="1%"!==b.top,g="2px"===b.marginLeft,e="4px"===b.width,i.style.marginRight="50%",f="4px"===b.marginRight,qa.removeChild(h),i=null}}var c,e,f,g,h=d.createElement("div"),i=d.createElement("div");i.style&&(i.style.backgroundClip="content-box",i.cloneNode(!0).style.backgroundClip="",o.clearCloneStyle="content-box"===i.style.backgroundClip,h.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",h.appendChild(i),r.extend(o,{pixelPosition:function(){return b(),c},boxSizingReliable:function(){return b(),e},pixelMarginRight:function(){return b(),f},reliableMarginLeft:function(){return b(),g}}))}();function Na(a,b,c){var d,e,f,g,h=a.style;return c=c||Ma(a),c&&(g=c.getPropertyValue(b)||c[b],""!==g||r.contains(a.ownerDocument,a)||(g=r.style(a,b)),!o.pixelMarginRight()&&La.test(g)&&Ka.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function Oa(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Pa=/^(none|table(?!-c[ea]).+)/,Qa={position:"absolute",visibility:"hidden",display:"block"},Ra={letterSpacing:"0",fontWeight:"400"},Sa=["Webkit","Moz","ms"],Ta=d.createElement("div").style;function Ua(a){if(a in Ta)return a;var b=a[0].toUpperCase()+a.slice(1),c=Sa.length;while(c--)if(a=Sa[c]+b,a in Ta)return a}function Va(a,b,c){var d=aa.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Wa(a,b,c,d,e){var f,g=0;for(f=c===(d?"border":"content")?4:"width"===b?1:0;f<4;f+=2)"margin"===c&&(g+=r.css(a,c+ba[f],!0,e)),d?("content"===c&&(g-=r.css(a,"padding"+ba[f],!0,e)),"margin"!==c&&(g-=r.css(a,"border"+ba[f]+"Width",!0,e))):(g+=r.css(a,"padding"+ba[f],!0,e),"padding"!==c&&(g+=r.css(a,"border"+ba[f]+"Width",!0,e)));return g}function Xa(a,b,c){var d,e=!0,f=Ma(a),g="border-box"===r.css(a,"boxSizing",!1,f);if(a.getClientRects().length&&(d=a.getBoundingClientRect()[b]),d<=0||null==d){if(d=Na(a,b,f),(d<0||null==d)&&(d=a.style[b]),La.test(d))return d;e=g&&(o.boxSizingReliable()||d===a.style[b]),d=parseFloat(d)||0}return d+Wa(a,b,c||(g?"border":"content"),e,f)+"px"}r.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Na(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=r.camelCase(b),i=a.style;return b=r.cssProps[h]||(r.cssProps[h]=Ua(h)||h),g=r.cssHooks[b]||r.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=aa.exec(c))&&e[1]&&(c=ea(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(r.cssNumber[h]?"":"px")),o.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=r.camelCase(b);return b=r.cssProps[h]||(r.cssProps[h]=Ua(h)||h),g=r.cssHooks[b]||r.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Na(a,b,d)),"normal"===e&&b in Ra&&(e=Ra[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),r.each(["height","width"],function(a,b){r.cssHooks[b]={get:function(a,c,d){if(c)return!Pa.test(r.css(a,"display"))||a.getClientRects().length&&a.getBoundingClientRect().width?Xa(a,b,d):da(a,Qa,function(){return Xa(a,b,d)})},set:function(a,c,d){var e,f=d&&Ma(a),g=d&&Wa(a,b,d,"border-box"===r.css(a,"boxSizing",!1,f),f);return g&&(e=aa.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=r.css(a,b)),Va(a,c,g)}}}),r.cssHooks.marginLeft=Oa(o.reliableMarginLeft,function(a,b){if(b)return(parseFloat(Na(a,"marginLeft"))||a.getBoundingClientRect().left-da(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px"}),r.each({margin:"",padding:"",border:"Width"},function(a,b){r.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];d<4;d++)e[a+ba[d]+b]=f[d]||f[d-2]||f[0];return e}},Ka.test(a)||(r.cssHooks[a+b].set=Va)}),r.fn.extend({css:function(a,b){return S(this,function(a,b,c){var d,e,f={},g=0;if(r.isArray(b)){for(d=Ma(a),e=b.length;g<e;g++)f[b[g]]=r.css(a,b[g],!1,d);return f}return void 0!==c?r.style(a,b,c):r.css(a,b)},a,b,arguments.length>1)}});function Ya(a,b,c,d,e){return new Ya.prototype.init(a,b,c,d,e)}r.Tween=Ya,Ya.prototype={constructor:Ya,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||r.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(r.cssNumber[c]?"":"px")},cur:function(){var a=Ya.propHooks[this.prop];return a&&a.get?a.get(this):Ya.propHooks._default.get(this)},run:function(a){var b,c=Ya.propHooks[this.prop];return this.options.duration?this.pos=b=r.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ya.propHooks._default.set(this),this}},Ya.prototype.init.prototype=Ya.prototype,Ya.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=r.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){r.fx.step[a.prop]?r.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[r.cssProps[a.prop]]&&!r.cssHooks[a.prop]?a.elem[a.prop]=a.now:r.style(a.elem,a.prop,a.now+a.unit)}}},Ya.propHooks.scrollTop=Ya.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},r.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},r.fx=Ya.prototype.init,r.fx.step={};var Za,$a,_a=/^(?:toggle|show|hide)$/,ab=/queueHooks$/;function bb(){$a&&(a.requestAnimationFrame(bb),r.fx.tick())}function cb(){return a.setTimeout(function(){Za=void 0}),Za=r.now()}function db(a,b){var c,d=0,e={height:a};for(b=b?1:0;d<4;d+=2-b)c=ba[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function eb(a,b,c){for(var d,e=(hb.tweeners[b]||[]).concat(hb.tweeners["*"]),f=0,g=e.length;f<g;f++)if(d=e[f].call(c,b,a))return d}function fb(a,b,c){var d,e,f,g,h,i,j,k,l="width"in b||"height"in b,m=this,n={},o=a.style,p=a.nodeType&&ca(a),q=V.get(a,"fxshow");c.queue||(g=r._queueHooks(a,"fx"),null==g.unqueued&&(g.unqueued=0,h=g.empty.fire,g.empty.fire=function(){g.unqueued||h()}),g.unqueued++,m.always(function(){m.always(function(){g.unqueued--,r.queue(a,"fx").length||g.empty.fire()})}));for(d in b)if(e=b[d],_a.test(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}n[d]=q&&q[d]||r.style(a,d)}if(i=!r.isEmptyObject(b),i||!r.isEmptyObject(n)){l&&1===a.nodeType&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=q&&q.display,null==j&&(j=V.get(a,"display")),k=r.css(a,"display"),"none"===k&&(j?k=j:(ha([a],!0),j=a.style.display||j,k=r.css(a,"display"),ha([a]))),("inline"===k||"inline-block"===k&&null!=j)&&"none"===r.css(a,"float")&&(i||(m.done(function(){o.display=j}),null==j&&(k=o.display,j="none"===k?"":k)),o.display="inline-block")),c.overflow&&(o.overflow="hidden",m.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]})),i=!1;for(d in n)i||(q?"hidden"in q&&(p=q.hidden):q=V.access(a,"fxshow",{display:j}),f&&(q.hidden=!p),p&&ha([a],!0),m.done(function(){p||ha([a]),V.remove(a,"fxshow");for(d in n)r.style(a,d,n[d])})),i=eb(p?q[d]:0,d,m),d in q||(q[d]=i.start,p&&(i.end=i.start,i.start=0))}}function gb(a,b){var c,d,e,f,g;for(c in a)if(d=r.camelCase(c),e=b[d],f=a[c],r.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=r.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function hb(a,b,c){var d,e,f=0,g=hb.prefilters.length,h=r.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Za||cb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;g<i;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),f<1&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:r.extend({},b),opts:r.extend(!0,{specialEasing:{},easing:r.easing._default},c),originalProperties:b,originalOptions:c,startTime:Za||cb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=r.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;c<d;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(gb(k,j.opts.specialEasing);f<g;f++)if(d=hb.prefilters[f].call(j,a,k,j.opts))return r.isFunction(d.stop)&&(r._queueHooks(j.elem,j.opts.queue).stop=r.proxy(d.stop,d)),d;return r.map(k,eb,j),r.isFunction(j.opts.start)&&j.opts.start.call(a,j),r.fx.timer(r.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}r.Animation=r.extend(hb,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return ea(c.elem,a,aa.exec(b),c),c}]},tweener:function(a,b){r.isFunction(a)?(b=a,a=["*"]):a=a.match(K);for(var c,d=0,e=a.length;d<e;d++)c=a[d],hb.tweeners[c]=hb.tweeners[c]||[],hb.tweeners[c].unshift(b)},prefilters:[fb],prefilter:function(a,b){b?hb.prefilters.unshift(a):hb.prefilters.push(a)}}),r.speed=function(a,b,c){var e=a&&"object"==typeof a?r.extend({},a):{complete:c||!c&&b||r.isFunction(a)&&a,duration:a,easing:c&&b||b&&!r.isFunction(b)&&b};return r.fx.off||d.hidden?e.duration=0:"number"!=typeof e.duration&&(e.duration in r.fx.speeds?e.duration=r.fx.speeds[e.duration]:e.duration=r.fx.speeds._default),null!=e.queue&&e.queue!==!0||(e.queue="fx"),e.old=e.complete,e.complete=function(){r.isFunction(e.old)&&e.old.call(this),e.queue&&r.dequeue(this,e.queue)},e},r.fn.extend({fadeTo:function(a,b,c,d){return this.filter(ca).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=r.isEmptyObject(a),f=r.speed(b,c,d),g=function(){var b=hb(this,r.extend({},a),f);(e||V.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=r.timers,g=V.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&ab.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||r.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=V.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=r.timers,g=d?d.length:0;for(c.finish=!0,r.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;b<g;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),r.each(["toggle","show","hide"],function(a,b){var c=r.fn[b];r.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(db(b,!0),a,d,e)}}),r.each({slideDown:db("show"),slideUp:db("hide"),slideToggle:db("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){r.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),r.timers=[],r.fx.tick=function(){var a,b=0,c=r.timers;for(Za=r.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||r.fx.stop(),Za=void 0},r.fx.timer=function(a){r.timers.push(a),a()?r.fx.start():r.timers.pop()},r.fx.interval=13,r.fx.start=function(){$a||($a=a.requestAnimationFrame?a.requestAnimationFrame(bb):a.setInterval(r.fx.tick,r.fx.interval))},r.fx.stop=function(){a.cancelAnimationFrame?a.cancelAnimationFrame($a):a.clearInterval($a),$a=null},r.fx.speeds={slow:600,fast:200,_default:400},r.fn.delay=function(b,c){return b=r.fx?r.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",o.checkOn=""!==a.value,o.optSelected=c.selected,a=d.createElement("input"),a.value="t",a.type="radio",o.radioValue="t"===a.value}();var ib,jb=r.expr.attrHandle;r.fn.extend({attr:function(a,b){return S(this,r.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){r.removeAttr(this,a)})}}),r.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?r.prop(a,b,c):(1===f&&r.isXMLDoc(a)||(e=r.attrHooks[b.toLowerCase()]||(r.expr.match.bool.test(b)?ib:void 0)),
void 0!==c?null===c?void r.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=r.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!o.radioValue&&"radio"===b&&r.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d=0,e=b&&b.match(K);if(e&&1===a.nodeType)while(c=e[d++])a.removeAttribute(c)}}),ib={set:function(a,b,c){return b===!1?r.removeAttr(a,c):a.setAttribute(c,c),c}},r.each(r.expr.match.bool.source.match(/\w+/g),function(a,b){var c=jb[b]||r.find.attr;jb[b]=function(a,b,d){var e,f,g=b.toLowerCase();return d||(f=jb[g],jb[g]=e,e=null!=c(a,b,d)?g:null,jb[g]=f),e}});var kb=/^(?:input|select|textarea|button)$/i,lb=/^(?:a|area)$/i;r.fn.extend({prop:function(a,b){return S(this,r.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[r.propFix[a]||a]})}}),r.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&r.isXMLDoc(a)||(b=r.propFix[b]||b,e=r.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=r.find.attr(a,"tabindex");return b?parseInt(b,10):kb.test(a.nodeName)||lb.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),o.optSelected||(r.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),r.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){r.propFix[this.toLowerCase()]=this});function mb(a){var b=a.match(K)||[];return b.join(" ")}function nb(a){return a.getAttribute&&a.getAttribute("class")||""}r.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(r.isFunction(a))return this.each(function(b){r(this).addClass(a.call(this,b,nb(this)))});if("string"==typeof a&&a){b=a.match(K)||[];while(c=this[i++])if(e=nb(c),d=1===c.nodeType&&" "+mb(e)+" "){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=mb(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(r.isFunction(a))return this.each(function(b){r(this).removeClass(a.call(this,b,nb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(K)||[];while(c=this[i++])if(e=nb(c),d=1===c.nodeType&&" "+mb(e)+" "){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=mb(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):r.isFunction(a)?this.each(function(c){r(this).toggleClass(a.call(this,c,nb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=r(this),f=a.match(K)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=nb(this),b&&V.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":V.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+mb(nb(c))+" ").indexOf(b)>-1)return!0;return!1}});var ob=/\r/g;r.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=r.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,r(this).val()):a,null==e?e="":"number"==typeof e?e+="":r.isArray(e)&&(e=r.map(e,function(a){return null==a?"":a+""})),b=r.valHooks[this.type]||r.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=r.valHooks[e.type]||r.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(ob,""):null==c?"":c)}}}),r.extend({valHooks:{option:{get:function(a){var b=r.find.attr(a,"value");return null!=b?b:mb(r.text(a))}},select:{get:function(a){var b,c,d,e=a.options,f=a.selectedIndex,g="select-one"===a.type,h=g?null:[],i=g?f+1:e.length;for(d=f<0?i:g?f:0;d<i;d++)if(c=e[d],(c.selected||d===f)&&!c.disabled&&(!c.parentNode.disabled||!r.nodeName(c.parentNode,"optgroup"))){if(b=r(c).val(),g)return b;h.push(b)}return h},set:function(a,b){var c,d,e=a.options,f=r.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=r.inArray(r.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),r.each(["radio","checkbox"],function(){r.valHooks[this]={set:function(a,b){if(r.isArray(b))return a.checked=r.inArray(r(a).val(),b)>-1}},o.checkOn||(r.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var pb=/^(?:focusinfocus|focusoutblur)$/;r.extend(r.event,{trigger:function(b,c,e,f){var g,h,i,j,k,m,n,o=[e||d],p=l.call(b,"type")?b.type:b,q=l.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!pb.test(p+r.event.triggered)&&(p.indexOf(".")>-1&&(q=p.split("."),p=q.shift(),q.sort()),k=p.indexOf(":")<0&&"on"+p,b=b[r.expando]?b:new r.Event(p,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=q.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:r.makeArray(c,[b]),n=r.event.special[p]||{},f||!n.trigger||n.trigger.apply(e,c)!==!1)){if(!f&&!n.noBubble&&!r.isWindow(e)){for(j=n.delegateType||p,pb.test(j+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),i=h;i===(e.ownerDocument||d)&&o.push(i.defaultView||i.parentWindow||a)}g=0;while((h=o[g++])&&!b.isPropagationStopped())b.type=g>1?j:n.bindType||p,m=(V.get(h,"events")||{})[b.type]&&V.get(h,"handle"),m&&m.apply(h,c),m=k&&h[k],m&&m.apply&&T(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=p,f||b.isDefaultPrevented()||n._default&&n._default.apply(o.pop(),c)!==!1||!T(e)||k&&r.isFunction(e[p])&&!r.isWindow(e)&&(i=e[k],i&&(e[k]=null),r.event.triggered=p,e[p](),r.event.triggered=void 0,i&&(e[k]=i)),b.result}},simulate:function(a,b,c){var d=r.extend(new r.Event,c,{type:a,isSimulated:!0});r.event.trigger(d,null,b)}}),r.fn.extend({trigger:function(a,b){return this.each(function(){r.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];if(c)return r.event.trigger(a,b,c,!0)}}),r.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(a,b){r.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),r.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),o.focusin="onfocusin"in a,o.focusin||r.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){r.event.simulate(b,a.target,r.event.fix(a))};r.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=V.access(d,b);e||d.addEventListener(a,c,!0),V.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=V.access(d,b)-1;e?V.access(d,b,e):(d.removeEventListener(a,c,!0),V.remove(d,b))}}});var qb=a.location,rb=r.now(),sb=/\?/;r.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return c&&!c.getElementsByTagName("parsererror").length||r.error("Invalid XML: "+b),c};var tb=/\[\]$/,ub=/\r?\n/g,vb=/^(?:submit|button|image|reset|file)$/i,wb=/^(?:input|select|textarea|keygen)/i;function xb(a,b,c,d){var e;if(r.isArray(b))r.each(b,function(b,e){c||tb.test(a)?d(a,e):xb(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==r.type(b))d(a,b);else for(e in b)xb(a+"["+e+"]",b[e],c,d)}r.param=function(a,b){var c,d=[],e=function(a,b){var c=r.isFunction(b)?b():b;d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(null==c?"":c)};if(r.isArray(a)||a.jquery&&!r.isPlainObject(a))r.each(a,function(){e(this.name,this.value)});else for(c in a)xb(c,a[c],b,e);return d.join("&")},r.fn.extend({serialize:function(){return r.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=r.prop(this,"elements");return a?r.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!r(this).is(":disabled")&&wb.test(this.nodeName)&&!vb.test(a)&&(this.checked||!ia.test(a))}).map(function(a,b){var c=r(this).val();return null==c?null:r.isArray(c)?r.map(c,function(a){return{name:b.name,value:a.replace(ub,"\r\n")}}):{name:b.name,value:c.replace(ub,"\r\n")}}).get()}});var yb=/%20/g,zb=/#.*$/,Ab=/([?&])_=[^&]*/,Bb=/^(.*?):[ \t]*([^\r\n]*)$/gm,Cb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Db=/^(?:GET|HEAD)$/,Eb=/^\/\//,Fb={},Gb={},Hb="*/".concat("*"),Ib=d.createElement("a");Ib.href=qb.href;function Jb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(K)||[];if(r.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Kb(a,b,c,d){var e={},f=a===Gb;function g(h){var i;return e[h]=!0,r.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Lb(a,b){var c,d,e=r.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&r.extend(!0,a,d),a}function Mb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}if(f)return f!==i[0]&&i.unshift(f),c[f]}function Nb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}r.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:qb.href,type:"GET",isLocal:Cb.test(qb.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Hb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":r.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Lb(Lb(a,r.ajaxSettings),b):Lb(r.ajaxSettings,a)},ajaxPrefilter:Jb(Fb),ajaxTransport:Jb(Gb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m,n,o=r.ajaxSetup({},c),p=o.context||o,q=o.context&&(p.nodeType||p.jquery)?r(p):r.event,s=r.Deferred(),t=r.Callbacks("once memory"),u=o.statusCode||{},v={},w={},x="canceled",y={readyState:0,getResponseHeader:function(a){var b;if(k){if(!h){h={};while(b=Bb.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return k?g:null},setRequestHeader:function(a,b){return null==k&&(a=w[a.toLowerCase()]=w[a.toLowerCase()]||a,v[a]=b),this},overrideMimeType:function(a){return null==k&&(o.mimeType=a),this},statusCode:function(a){var b;if(a)if(k)y.always(a[y.status]);else for(b in a)u[b]=[u[b],a[b]];return this},abort:function(a){var b=a||x;return e&&e.abort(b),A(0,b),this}};if(s.promise(y),o.url=((b||o.url||qb.href)+"").replace(Eb,qb.protocol+"//"),o.type=c.method||c.type||o.method||o.type,o.dataTypes=(o.dataType||"*").toLowerCase().match(K)||[""],null==o.crossDomain){j=d.createElement("a");try{j.href=o.url,j.href=j.href,o.crossDomain=Ib.protocol+"//"+Ib.host!=j.protocol+"//"+j.host}catch(z){o.crossDomain=!0}}if(o.data&&o.processData&&"string"!=typeof o.data&&(o.data=r.param(o.data,o.traditional)),Kb(Fb,o,c,y),k)return y;l=r.event&&o.global,l&&0===r.active++&&r.event.trigger("ajaxStart"),o.type=o.type.toUpperCase(),o.hasContent=!Db.test(o.type),f=o.url.replace(zb,""),o.hasContent?o.data&&o.processData&&0===(o.contentType||"").indexOf("application/x-www-form-urlencoded")&&(o.data=o.data.replace(yb,"+")):(n=o.url.slice(f.length),o.data&&(f+=(sb.test(f)?"&":"?")+o.data,delete o.data),o.cache===!1&&(f=f.replace(Ab,"$1"),n=(sb.test(f)?"&":"?")+"_="+rb++ +n),o.url=f+n),o.ifModified&&(r.lastModified[f]&&y.setRequestHeader("If-Modified-Since",r.lastModified[f]),r.etag[f]&&y.setRequestHeader("If-None-Match",r.etag[f])),(o.data&&o.hasContent&&o.contentType!==!1||c.contentType)&&y.setRequestHeader("Content-Type",o.contentType),y.setRequestHeader("Accept",o.dataTypes[0]&&o.accepts[o.dataTypes[0]]?o.accepts[o.dataTypes[0]]+("*"!==o.dataTypes[0]?", "+Hb+"; q=0.01":""):o.accepts["*"]);for(m in o.headers)y.setRequestHeader(m,o.headers[m]);if(o.beforeSend&&(o.beforeSend.call(p,y,o)===!1||k))return y.abort();if(x="abort",t.add(o.complete),y.done(o.success),y.fail(o.error),e=Kb(Gb,o,c,y)){if(y.readyState=1,l&&q.trigger("ajaxSend",[y,o]),k)return y;o.async&&o.timeout>0&&(i=a.setTimeout(function(){y.abort("timeout")},o.timeout));try{k=!1,e.send(v,A)}catch(z){if(k)throw z;A(-1,z)}}else A(-1,"No Transport");function A(b,c,d,h){var j,m,n,v,w,x=c;k||(k=!0,i&&a.clearTimeout(i),e=void 0,g=h||"",y.readyState=b>0?4:0,j=b>=200&&b<300||304===b,d&&(v=Mb(o,y,d)),v=Nb(o,v,y,j),j?(o.ifModified&&(w=y.getResponseHeader("Last-Modified"),w&&(r.lastModified[f]=w),w=y.getResponseHeader("etag"),w&&(r.etag[f]=w)),204===b||"HEAD"===o.type?x="nocontent":304===b?x="notmodified":(x=v.state,m=v.data,n=v.error,j=!n)):(n=x,!b&&x||(x="error",b<0&&(b=0))),y.status=b,y.statusText=(c||x)+"",j?s.resolveWith(p,[m,x,y]):s.rejectWith(p,[y,x,n]),y.statusCode(u),u=void 0,l&&q.trigger(j?"ajaxSuccess":"ajaxError",[y,o,j?m:n]),t.fireWith(p,[y,x]),l&&(q.trigger("ajaxComplete",[y,o]),--r.active||r.event.trigger("ajaxStop")))}return y},getJSON:function(a,b,c){return r.get(a,b,c,"json")},getScript:function(a,b){return r.get(a,void 0,b,"script")}}),r.each(["get","post"],function(a,b){r[b]=function(a,c,d,e){return r.isFunction(c)&&(e=e||d,d=c,c=void 0),r.ajax(r.extend({url:a,type:b,dataType:e,data:c,success:d},r.isPlainObject(a)&&a))}}),r._evalUrl=function(a){return r.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},r.fn.extend({wrapAll:function(a){var b;return this[0]&&(r.isFunction(a)&&(a=a.call(this[0])),b=r(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this},wrapInner:function(a){return r.isFunction(a)?this.each(function(b){r(this).wrapInner(a.call(this,b))}):this.each(function(){var b=r(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=r.isFunction(a);return this.each(function(c){r(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(a){return this.parent(a).not("body").each(function(){r(this).replaceWith(this.childNodes)}),this}}),r.expr.pseudos.hidden=function(a){return!r.expr.pseudos.visible(a)},r.expr.pseudos.visible=function(a){return!!(a.offsetWidth||a.offsetHeight||a.getClientRects().length)},r.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Ob={0:200,1223:204},Pb=r.ajaxSettings.xhr();o.cors=!!Pb&&"withCredentials"in Pb,o.ajax=Pb=!!Pb,r.ajaxTransport(function(b){var c,d;if(o.cors||Pb&&!b.crossDomain)return{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Ob[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}}),r.ajaxPrefilter(function(a){a.crossDomain&&(a.contents.script=!1)}),r.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return r.globalEval(a),a}}}),r.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),r.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=r("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Qb=[],Rb=/(=)\?(?=&|$)|\?\?/;r.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Qb.pop()||r.expando+"_"+rb++;return this[a]=!0,a}}),r.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Rb.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Rb.test(b.data)&&"data");if(h||"jsonp"===b.dataTypes[0])return e=b.jsonpCallback=r.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Rb,"$1"+e):b.jsonp!==!1&&(b.url+=(sb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||r.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?r(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Qb.push(e)),g&&r.isFunction(f)&&f(g[0]),g=f=void 0}),"script"}),o.createHTMLDocument=function(){var a=d.implementation.createHTMLDocument("").body;return a.innerHTML="<form></form><form></form>",2===a.childNodes.length}(),r.parseHTML=function(a,b,c){if("string"!=typeof a)return[];"boolean"==typeof b&&(c=b,b=!1);var e,f,g;return b||(o.createHTMLDocument?(b=d.implementation.createHTMLDocument(""),e=b.createElement("base"),e.href=d.location.href,b.head.appendChild(e)):b=d),f=B.exec(a),g=!c&&[],f?[b.createElement(f[1])]:(f=pa([a],b,g),g&&g.length&&r(g).remove(),r.merge([],f.childNodes))},r.fn.load=function(a,b,c){var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=mb(a.slice(h)),a=a.slice(0,h)),r.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&r.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?r("<div>").append(r.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},r.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){r.fn[b]=function(a){return this.on(b,a)}}),r.expr.pseudos.animated=function(a){return r.grep(r.timers,function(b){return a===b.elem}).length};function Sb(a){return r.isWindow(a)?a:9===a.nodeType&&a.defaultView}r.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=r.css(a,"position"),l=r(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=r.css(a,"top"),i=r.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),r.isFunction(b)&&(b=b.call(a,c,r.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},r.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){r.offset.setOffset(this,a,b)});var b,c,d,e,f=this[0];if(f)return f.getClientRects().length?(d=f.getBoundingClientRect(),d.width||d.height?(e=f.ownerDocument,c=Sb(e),b=e.documentElement,{top:d.top+c.pageYOffset-b.clientTop,left:d.left+c.pageXOffset-b.clientLeft}):d):{top:0,left:0}},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===r.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),r.nodeName(a[0],"html")||(d=a.offset()),d={top:d.top+r.css(a[0],"borderTopWidth",!0),left:d.left+r.css(a[0],"borderLeftWidth",!0)}),{top:b.top-d.top-r.css(c,"marginTop",!0),left:b.left-d.left-r.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===r.css(a,"position"))a=a.offsetParent;return a||qa})}}),r.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;r.fn[a]=function(d){return S(this,function(a,d,e){var f=Sb(a);return void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),r.each(["top","left"],function(a,b){r.cssHooks[b]=Oa(o.pixelPosition,function(a,c){if(c)return c=Na(a,b),La.test(c)?r(a).position()[b]+"px":c})}),r.each({Height:"height",Width:"width"},function(a,b){r.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){r.fn[d]=function(e,f){var g=arguments.length&&(c||"boolean"!=typeof e),h=c||(e===!0||f===!0?"margin":"border");return S(this,function(b,c,e){var f;return r.isWindow(b)?0===d.indexOf("outer")?b["inner"+a]:b.document.documentElement["client"+a]:9===b.nodeType?(f=b.documentElement,Math.max(b.body["scroll"+a],f["scroll"+a],b.body["offset"+a],f["offset"+a],f["client"+a])):void 0===e?r.css(b,c,h):r.style(b,c,e,h)},b,g?e:void 0,g)}})}),r.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}}),r.parseJSON=JSON.parse,"function"==typeof define&&define.amd&&define("jquery",[],function(){return r});var Tb=a.jQuery,Ub=a.$;return r.noConflict=function(b){return a.$===r&&(a.$=Ub),b&&a.jQuery===r&&(a.jQuery=Tb),r},b||(a.jQuery=a.$=r),r});

!function(){function n(n){return n&&(n.ownerDocument||n.document||n).documentElement}function t(n){return n&&(n.ownerDocument&&n.ownerDocument.defaultView||n.document&&n||n.defaultView)}function e(n,t){return t>n?-1:n>t?1:n>=t?0:0/0}function r(n){return null===n?0/0:+n}function u(n){return!isNaN(n)}function i(n){return{left:function(t,e,r,u){for(arguments.length<3&&(r=0),arguments.length<4&&(u=t.length);u>r;){var i=r+u>>>1;n(t[i],e)<0?r=i+1:u=i}return r},right:function(t,e,r,u){for(arguments.length<3&&(r=0),arguments.length<4&&(u=t.length);u>r;){var i=r+u>>>1;n(t[i],e)>0?u=i:r=i+1}return r}}}function o(n){return n.length}function a(n){for(var t=1;n*t%1;)t*=10;return t}function c(n,t){for(var e in t)Object.defineProperty(n.prototype,e,{value:t[e],enumerable:!1})}function l(){this._=Object.create(null)}function s(n){return(n+="")===pa||n[0]===va?va+n:n}function f(n){return(n+="")[0]===va?n.slice(1):n}function h(n){return s(n)in this._}function g(n){return(n=s(n))in this._&&delete this._[n]}function p(){var n=[];for(var t in this._)n.push(f(t));return n}function v(){var n=0;for(var t in this._)++n;return n}function d(){for(var n in this._)return!1;return!0}function m(){this._=Object.create(null)}function y(n){return n}function M(n,t,e){return function(){var r=e.apply(t,arguments);return r===t?n:r}}function x(n,t){if(t in n)return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e=0,r=da.length;r>e;++e){var u=da[e]+t;if(u in n)return u}}function b(){}function _(){}function w(n){function t(){for(var t,r=e,u=-1,i=r.length;++u<i;)(t=r[u].on)&&t.apply(this,arguments);return n}var e=[],r=new l;return t.on=function(t,u){var i,o=r.get(t);return arguments.length<2?o&&o.on:(o&&(o.on=null,e=e.slice(0,i=e.indexOf(o)).concat(e.slice(i+1)),r.remove(t)),u&&e.push(r.set(t,{on:u})),n)},t}function S(){ta.event.preventDefault()}function k(){for(var n,t=ta.event;n=t.sourceEvent;)t=n;return t}function E(n){for(var t=new _,e=0,r=arguments.length;++e<r;)t[arguments[e]]=w(t);return t.of=function(e,r){return function(u){try{var i=u.sourceEvent=ta.event;u.target=n,ta.event=u,t[u.type].apply(e,r)}finally{ta.event=i}}},t}function A(n){return ya(n,_a),n}function N(n){return"function"==typeof n?n:function(){return Ma(n,this)}}function C(n){return"function"==typeof n?n:function(){return xa(n,this)}}function z(n,t){function e(){this.removeAttribute(n)}function r(){this.removeAttributeNS(n.space,n.local)}function u(){this.setAttribute(n,t)}function i(){this.setAttributeNS(n.space,n.local,t)}function o(){var e=t.apply(this,arguments);null==e?this.removeAttribute(n):this.setAttribute(n,e)}function a(){var e=t.apply(this,arguments);null==e?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,e)}return n=ta.ns.qualify(n),null==t?n.local?r:e:"function"==typeof t?n.local?a:o:n.local?i:u}function q(n){return n.trim().replace(/\s+/g," ")}function L(n){return new RegExp("(?:^|\\s+)"+ta.requote(n)+"(?:\\s+|$)","g")}function T(n){return(n+"").trim().split(/^|\s+/)}function R(n,t){function e(){for(var e=-1;++e<u;)n[e](this,t)}function r(){for(var e=-1,r=t.apply(this,arguments);++e<u;)n[e](this,r)}n=T(n).map(D);var u=n.length;return"function"==typeof t?r:e}function D(n){var t=L(n);return function(e,r){if(u=e.classList)return r?u.add(n):u.remove(n);var u=e.getAttribute("class")||"";r?(t.lastIndex=0,t.test(u)||e.setAttribute("class",q(u+" "+n))):e.setAttribute("class",q(u.replace(t," ")))}}function P(n,t,e){function r(){this.style.removeProperty(n)}function u(){this.style.setProperty(n,t,e)}function i(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(n):this.style.setProperty(n,r,e)}return null==t?r:"function"==typeof t?i:u}function U(n,t){function e(){delete this[n]}function r(){this[n]=t}function u(){var e=t.apply(this,arguments);null==e?delete this[n]:this[n]=e}return null==t?e:"function"==typeof t?u:r}function j(n){function t(){var t=this.ownerDocument,e=this.namespaceURI;return e?t.createElementNS(e,n):t.createElement(n)}function e(){return this.ownerDocument.createElementNS(n.space,n.local)}return"function"==typeof n?n:(n=ta.ns.qualify(n)).local?e:t}function F(){var n=this.parentNode;n&&n.removeChild(this)}function H(n){return{__data__:n}}function O(n){return function(){return ba(this,n)}}function I(n){return arguments.length||(n=e),function(t,e){return t&&e?n(t.__data__,e.__data__):!t-!e}}function Y(n,t){for(var e=0,r=n.length;r>e;e++)for(var u,i=n[e],o=0,a=i.length;a>o;o++)(u=i[o])&&t(u,o,e);return n}function Z(n){return ya(n,Sa),n}function V(n){var t,e;return function(r,u,i){var o,a=n[i].update,c=a.length;for(i!=e&&(e=i,t=0),u>=t&&(t=u+1);!(o=a[t])&&++t<c;);return o}}function X(n,t,e){function r(){var t=this[o];t&&(this.removeEventListener(n,t,t.$),delete this[o])}function u(){var u=c(t,ra(arguments));r.call(this),this.addEventListener(n,this[o]=u,u.$=e),u._=t}function i(){var t,e=new RegExp("^__on([^.]+)"+ta.requote(n)+"$");for(var r in this)if(t=r.match(e)){var u=this[r];this.removeEventListener(t[1],u,u.$),delete this[r]}}var o="__on"+n,a=n.indexOf("."),c=$;a>0&&(n=n.slice(0,a));var l=ka.get(n);return l&&(n=l,c=B),a?t?u:r:t?b:i}function $(n,t){return function(e){var r=ta.event;ta.event=e,t[0]=this.__data__;try{n.apply(this,t)}finally{ta.event=r}}}function B(n,t){var e=$(n,t);return function(n){var t=this,r=n.relatedTarget;r&&(r===t||8&r.compareDocumentPosition(t))||e.call(t,n)}}function W(e){var r=".dragsuppress-"+ ++Aa,u="click"+r,i=ta.select(t(e)).on("touchmove"+r,S).on("dragstart"+r,S).on("selectstart"+r,S);if(null==Ea&&(Ea="onselectstart"in e?!1:x(e.style,"userSelect")),Ea){var o=n(e).style,a=o[Ea];o[Ea]="none"}return function(n){if(i.on(r,null),Ea&&(o[Ea]=a),n){var t=function(){i.on(u,null)};i.on(u,function(){S(),t()},!0),setTimeout(t,0)}}}function J(n,e){e.changedTouches&&(e=e.changedTouches[0]);var r=n.ownerSVGElement||n;if(r.createSVGPoint){var u=r.createSVGPoint();if(0>Na){var i=t(n);if(i.scrollX||i.scrollY){r=ta.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var o=r[0][0].getScreenCTM();Na=!(o.f||o.e),r.remove()}}return Na?(u.x=e.pageX,u.y=e.pageY):(u.x=e.clientX,u.y=e.clientY),u=u.matrixTransform(n.getScreenCTM().inverse()),[u.x,u.y]}var a=n.getBoundingClientRect();return[e.clientX-a.left-n.clientLeft,e.clientY-a.top-n.clientTop]}function G(){return ta.event.changedTouches[0].identifier}function K(n){return n>0?1:0>n?-1:0}function Q(n,t,e){return(t[0]-n[0])*(e[1]-n[1])-(t[1]-n[1])*(e[0]-n[0])}function nt(n){return n>1?0:-1>n?qa:Math.acos(n)}function tt(n){return n>1?Ra:-1>n?-Ra:Math.asin(n)}function et(n){return((n=Math.exp(n))-1/n)/2}function rt(n){return((n=Math.exp(n))+1/n)/2}function ut(n){return((n=Math.exp(2*n))-1)/(n+1)}function it(n){return(n=Math.sin(n/2))*n}function ot(){}function at(n,t,e){return this instanceof at?(this.h=+n,this.s=+t,void(this.l=+e)):arguments.length<2?n instanceof at?new at(n.h,n.s,n.l):bt(""+n,_t,at):new at(n,t,e)}function ct(n,t,e){function r(n){return n>360?n-=360:0>n&&(n+=360),60>n?i+(o-i)*n/60:180>n?o:240>n?i+(o-i)*(240-n)/60:i}function u(n){return Math.round(255*r(n))}var i,o;return n=isNaN(n)?0:(n%=360)<0?n+360:n,t=isNaN(t)?0:0>t?0:t>1?1:t,e=0>e?0:e>1?1:e,o=.5>=e?e*(1+t):e+t-e*t,i=2*e-o,new mt(u(n+120),u(n),u(n-120))}function lt(n,t,e){return this instanceof lt?(this.h=+n,this.c=+t,void(this.l=+e)):arguments.length<2?n instanceof lt?new lt(n.h,n.c,n.l):n instanceof ft?gt(n.l,n.a,n.b):gt((n=wt((n=ta.rgb(n)).r,n.g,n.b)).l,n.a,n.b):new lt(n,t,e)}function st(n,t,e){return isNaN(n)&&(n=0),isNaN(t)&&(t=0),new ft(e,Math.cos(n*=Da)*t,Math.sin(n)*t)}function ft(n,t,e){return this instanceof ft?(this.l=+n,this.a=+t,void(this.b=+e)):arguments.length<2?n instanceof ft?new ft(n.l,n.a,n.b):n instanceof lt?st(n.h,n.c,n.l):wt((n=mt(n)).r,n.g,n.b):new ft(n,t,e)}function ht(n,t,e){var r=(n+16)/116,u=r+t/500,i=r-e/200;return u=pt(u)*Xa,r=pt(r)*$a,i=pt(i)*Ba,new mt(dt(3.2404542*u-1.5371385*r-.4985314*i),dt(-.969266*u+1.8760108*r+.041556*i),dt(.0556434*u-.2040259*r+1.0572252*i))}function gt(n,t,e){return n>0?new lt(Math.atan2(e,t)*Pa,Math.sqrt(t*t+e*e),n):new lt(0/0,0/0,n)}function pt(n){return n>.206893034?n*n*n:(n-4/29)/7.787037}function vt(n){return n>.008856?Math.pow(n,1/3):7.787037*n+4/29}function dt(n){return Math.round(255*(.00304>=n?12.92*n:1.055*Math.pow(n,1/2.4)-.055))}function mt(n,t,e){return this instanceof mt?(this.r=~~n,this.g=~~t,void(this.b=~~e)):arguments.length<2?n instanceof mt?new mt(n.r,n.g,n.b):bt(""+n,mt,ct):new mt(n,t,e)}function yt(n){return new mt(n>>16,n>>8&255,255&n)}function Mt(n){return yt(n)+""}function xt(n){return 16>n?"0"+Math.max(0,n).toString(16):Math.min(255,n).toString(16)}function bt(n,t,e){var r,u,i,o=0,a=0,c=0;if(r=/([a-z]+)\((.*)\)/i.exec(n))switch(u=r[2].split(","),r[1]){case"hsl":return e(parseFloat(u[0]),parseFloat(u[1])/100,parseFloat(u[2])/100);case"rgb":return t(kt(u[0]),kt(u[1]),kt(u[2]))}return(i=Ga.get(n.toLowerCase()))?t(i.r,i.g,i.b):(null==n||"#"!==n.charAt(0)||isNaN(i=parseInt(n.slice(1),16))||(4===n.length?(o=(3840&i)>>4,o=o>>4|o,a=240&i,a=a>>4|a,c=15&i,c=c<<4|c):7===n.length&&(o=(16711680&i)>>16,a=(65280&i)>>8,c=255&i)),t(o,a,c))}function _t(n,t,e){var r,u,i=Math.min(n/=255,t/=255,e/=255),o=Math.max(n,t,e),a=o-i,c=(o+i)/2;return a?(u=.5>c?a/(o+i):a/(2-o-i),r=n==o?(t-e)/a+(e>t?6:0):t==o?(e-n)/a+2:(n-t)/a+4,r*=60):(r=0/0,u=c>0&&1>c?0:r),new at(r,u,c)}function wt(n,t,e){n=St(n),t=St(t),e=St(e);var r=vt((.4124564*n+.3575761*t+.1804375*e)/Xa),u=vt((.2126729*n+.7151522*t+.072175*e)/$a),i=vt((.0193339*n+.119192*t+.9503041*e)/Ba);return ft(116*u-16,500*(r-u),200*(u-i))}function St(n){return(n/=255)<=.04045?n/12.92:Math.pow((n+.055)/1.055,2.4)}function kt(n){var t=parseFloat(n);return"%"===n.charAt(n.length-1)?Math.round(2.55*t):t}function Et(n){return"function"==typeof n?n:function(){return n}}function At(n){return function(t,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=null),Nt(t,e,n,r)}}function Nt(n,t,e,r){function u(){var n,t=c.status;if(!t&&zt(c)||t>=200&&300>t||304===t){try{n=e.call(i,c)}catch(r){return void o.error.call(i,r)}o.load.call(i,n)}else o.error.call(i,c)}var i={},o=ta.dispatch("beforesend","progress","load","error"),a={},c=new XMLHttpRequest,l=null;return!this.XDomainRequest||"withCredentials"in c||!/^(http(s)?:)?\/\//.test(n)||(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=u:c.onreadystatechange=function(){c.readyState>3&&u()},c.onprogress=function(n){var t=ta.event;ta.event=n;try{o.progress.call(i,c)}finally{ta.event=t}},i.header=function(n,t){return n=(n+"").toLowerCase(),arguments.length<2?a[n]:(null==t?delete a[n]:a[n]=t+"",i)},i.mimeType=function(n){return arguments.length?(t=null==n?null:n+"",i):t},i.responseType=function(n){return arguments.length?(l=n,i):l},i.response=function(n){return e=n,i},["get","post"].forEach(function(n){i[n]=function(){return i.send.apply(i,[n].concat(ra(arguments)))}}),i.send=function(e,r,u){if(2===arguments.length&&"function"==typeof r&&(u=r,r=null),c.open(e,n,!0),null==t||"accept"in a||(a.accept=t+",*/*"),c.setRequestHeader)for(var s in a)c.setRequestHeader(s,a[s]);return null!=t&&c.overrideMimeType&&c.overrideMimeType(t),null!=l&&(c.responseType=l),null!=u&&i.on("error",u).on("load",function(n){u(null,n)}),o.beforesend.call(i,c),c.send(null==r?null:r),i},i.abort=function(){return c.abort(),i},ta.rebind(i,o,"on"),null==r?i:i.get(Ct(r))}function Ct(n){return 1===n.length?function(t,e){n(null==t?e:null)}:n}function zt(n){var t=n.responseType;return t&&"text"!==t?n.response:n.responseText}function qt(){var n=Lt(),t=Tt()-n;t>24?(isFinite(t)&&(clearTimeout(tc),tc=setTimeout(qt,t)),nc=0):(nc=1,rc(qt))}function Lt(){var n=Date.now();for(ec=Ka;ec;)n>=ec.t&&(ec.f=ec.c(n-ec.t)),ec=ec.n;return n}function Tt(){for(var n,t=Ka,e=1/0;t;)t.f?t=n?n.n=t.n:Ka=t.n:(t.t<e&&(e=t.t),t=(n=t).n);return Qa=n,e}function Rt(n,t){return t-(n?Math.ceil(Math.log(n)/Math.LN10):1)}function Dt(n,t){var e=Math.pow(10,3*ga(8-t));return{scale:t>8?function(n){return n/e}:function(n){return n*e},symbol:n}}function Pt(n){var t=n.decimal,e=n.thousands,r=n.grouping,u=n.currency,i=r&&e?function(n,t){for(var u=n.length,i=[],o=0,a=r[0],c=0;u>0&&a>0&&(c+a+1>t&&(a=Math.max(1,t-c)),i.push(n.substring(u-=a,u+a)),!((c+=a+1)>t));)a=r[o=(o+1)%r.length];return i.reverse().join(e)}:y;return function(n){var e=ic.exec(n),r=e[1]||" ",o=e[2]||">",a=e[3]||"-",c=e[4]||"",l=e[5],s=+e[6],f=e[7],h=e[8],g=e[9],p=1,v="",d="",m=!1,y=!0;switch(h&&(h=+h.substring(1)),(l||"0"===r&&"="===o)&&(l=r="0",o="="),g){case"n":f=!0,g="g";break;case"%":p=100,d="%",g="f";break;case"p":p=100,d="%",g="r";break;case"b":case"o":case"x":case"X":"#"===c&&(v="0"+g.toLowerCase());case"c":y=!1;case"d":m=!0,h=0;break;case"s":p=-1,g="r"}"$"===c&&(v=u[0],d=u[1]),"r"!=g||h||(g="g"),null!=h&&("g"==g?h=Math.max(1,Math.min(21,h)):("e"==g||"f"==g)&&(h=Math.max(0,Math.min(20,h)))),g=oc.get(g)||Ut;var M=l&&f;return function(n){var e=d;if(m&&n%1)return"";var u=0>n||0===n&&0>1/n?(n=-n,"-"):"-"===a?"":a;if(0>p){var c=ta.formatPrefix(n,h);n=c.scale(n),e=c.symbol+d}else n*=p;n=g(n,h);var x,b,_=n.lastIndexOf(".");if(0>_){var w=y?n.lastIndexOf("e"):-1;0>w?(x=n,b=""):(x=n.substring(0,w),b=n.substring(w))}else x=n.substring(0,_),b=t+n.substring(_+1);!l&&f&&(x=i(x,1/0));var S=v.length+x.length+b.length+(M?0:u.length),k=s>S?new Array(S=s-S+1).join(r):"";return M&&(x=i(k+x,k.length?s-b.length:1/0)),u+=v,n=x+b,("<"===o?u+n+k:">"===o?k+u+n:"^"===o?k.substring(0,S>>=1)+u+n+k.substring(S):u+(M?n:k+n))+e}}}function Ut(n){return n+""}function jt(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function Ft(n,t,e){function r(t){var e=n(t),r=i(e,1);return r-t>t-e?e:r}function u(e){return t(e=n(new cc(e-1)),1),e}function i(n,e){return t(n=new cc(+n),e),n}function o(n,r,i){var o=u(n),a=[];if(i>1)for(;r>o;)e(o)%i||a.push(new Date(+o)),t(o,1);else for(;r>o;)a.push(new Date(+o)),t(o,1);return a}function a(n,t,e){try{cc=jt;var r=new jt;return r._=n,o(r,t,e)}finally{cc=Date}}n.floor=n,n.round=r,n.ceil=u,n.offset=i,n.range=o;var c=n.utc=Ht(n);return c.floor=c,c.round=Ht(r),c.ceil=Ht(u),c.offset=Ht(i),c.range=a,n}function Ht(n){return function(t,e){try{cc=jt;var r=new jt;return r._=t,n(r,e)._}finally{cc=Date}}}function Ot(n){function t(n){function t(t){for(var e,u,i,o=[],a=-1,c=0;++a<r;)37===n.charCodeAt(a)&&(o.push(n.slice(c,a)),null!=(u=sc[e=n.charAt(++a)])&&(e=n.charAt(++a)),(i=N[e])&&(e=i(t,null==u?"e"===e?" ":"0":u)),o.push(e),c=a+1);return o.push(n.slice(c,a)),o.join("")}var r=n.length;return t.parse=function(t){var r={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},u=e(r,n,t,0);if(u!=t.length)return null;"p"in r&&(r.H=r.H%12+12*r.p);var i=null!=r.Z&&cc!==jt,o=new(i?jt:cc);return"j"in r?o.setFullYear(r.y,0,r.j):"w"in r&&("W"in r||"U"in r)?(o.setFullYear(r.y,0,1),o.setFullYear(r.y,0,"W"in r?(r.w+6)%7+7*r.W-(o.getDay()+5)%7:r.w+7*r.U-(o.getDay()+6)%7)):o.setFullYear(r.y,r.m,r.d),o.setHours(r.H+(r.Z/100|0),r.M+r.Z%100,r.S,r.L),i?o._:o},t.toString=function(){return n},t}function e(n,t,e,r){for(var u,i,o,a=0,c=t.length,l=e.length;c>a;){if(r>=l)return-1;if(u=t.charCodeAt(a++),37===u){if(o=t.charAt(a++),i=C[o in sc?t.charAt(a++):o],!i||(r=i(n,e,r))<0)return-1}else if(u!=e.charCodeAt(r++))return-1}return r}function r(n,t,e){_.lastIndex=0;var r=_.exec(t.slice(e));return r?(n.w=w.get(r[0].toLowerCase()),e+r[0].length):-1}function u(n,t,e){x.lastIndex=0;var r=x.exec(t.slice(e));return r?(n.w=b.get(r[0].toLowerCase()),e+r[0].length):-1}function i(n,t,e){E.lastIndex=0;var r=E.exec(t.slice(e));return r?(n.m=A.get(r[0].toLowerCase()),e+r[0].length):-1}function o(n,t,e){S.lastIndex=0;var r=S.exec(t.slice(e));return r?(n.m=k.get(r[0].toLowerCase()),e+r[0].length):-1}function a(n,t,r){return e(n,N.c.toString(),t,r)}function c(n,t,r){return e(n,N.x.toString(),t,r)}function l(n,t,r){return e(n,N.X.toString(),t,r)}function s(n,t,e){var r=M.get(t.slice(e,e+=2).toLowerCase());return null==r?-1:(n.p=r,e)}var f=n.dateTime,h=n.date,g=n.time,p=n.periods,v=n.days,d=n.shortDays,m=n.months,y=n.shortMonths;t.utc=function(n){function e(n){try{cc=jt;var t=new cc;return t._=n,r(t)}finally{cc=Date}}var r=t(n);return e.parse=function(n){try{cc=jt;var t=r.parse(n);return t&&t._}finally{cc=Date}},e.toString=r.toString,e},t.multi=t.utc.multi=ae;var M=ta.map(),x=Yt(v),b=Zt(v),_=Yt(d),w=Zt(d),S=Yt(m),k=Zt(m),E=Yt(y),A=Zt(y);p.forEach(function(n,t){M.set(n.toLowerCase(),t)});var N={a:function(n){return d[n.getDay()]},A:function(n){return v[n.getDay()]},b:function(n){return y[n.getMonth()]},B:function(n){return m[n.getMonth()]},c:t(f),d:function(n,t){return It(n.getDate(),t,2)},e:function(n,t){return It(n.getDate(),t,2)},H:function(n,t){return It(n.getHours(),t,2)},I:function(n,t){return It(n.getHours()%12||12,t,2)},j:function(n,t){return It(1+ac.dayOfYear(n),t,3)},L:function(n,t){return It(n.getMilliseconds(),t,3)},m:function(n,t){return It(n.getMonth()+1,t,2)},M:function(n,t){return It(n.getMinutes(),t,2)},p:function(n){return p[+(n.getHours()>=12)]},S:function(n,t){return It(n.getSeconds(),t,2)},U:function(n,t){return It(ac.sundayOfYear(n),t,2)},w:function(n){return n.getDay()},W:function(n,t){return It(ac.mondayOfYear(n),t,2)},x:t(h),X:t(g),y:function(n,t){return It(n.getFullYear()%100,t,2)},Y:function(n,t){return It(n.getFullYear()%1e4,t,4)},Z:ie,"%":function(){return"%"}},C={a:r,A:u,b:i,B:o,c:a,d:Qt,e:Qt,H:te,I:te,j:ne,L:ue,m:Kt,M:ee,p:s,S:re,U:Xt,w:Vt,W:$t,x:c,X:l,y:Wt,Y:Bt,Z:Jt,"%":oe};return t}function It(n,t,e){var r=0>n?"-":"",u=(r?-n:n)+"",i=u.length;return r+(e>i?new Array(e-i+1).join(t)+u:u)}function Yt(n){return new RegExp("^(?:"+n.map(ta.requote).join("|")+")","i")}function Zt(n){for(var t=new l,e=-1,r=n.length;++e<r;)t.set(n[e].toLowerCase(),e);return t}function Vt(n,t,e){fc.lastIndex=0;var r=fc.exec(t.slice(e,e+1));return r?(n.w=+r[0],e+r[0].length):-1}function Xt(n,t,e){fc.lastIndex=0;var r=fc.exec(t.slice(e));return r?(n.U=+r[0],e+r[0].length):-1}function $t(n,t,e){fc.lastIndex=0;var r=fc.exec(t.slice(e));return r?(n.W=+r[0],e+r[0].length):-1}function Bt(n,t,e){fc.lastIndex=0;var r=fc.exec(t.slice(e,e+4));return r?(n.y=+r[0],e+r[0].length):-1}function Wt(n,t,e){fc.lastIndex=0;var r=fc.exec(t.slice(e,e+2));return r?(n.y=Gt(+r[0]),e+r[0].length):-1}function Jt(n,t,e){return/^[+-]\d{4}$/.test(t=t.slice(e,e+5))?(n.Z=-t,e+5):-1}function Gt(n){return n+(n>68?1900:2e3)}function Kt(n,t,e){fc.lastIndex=0;var r=fc.exec(t.slice(e,e+2));return r?(n.m=r[0]-1,e+r[0].length):-1}function Qt(n,t,e){fc.lastIndex=0;var r=fc.exec(t.slice(e,e+2));return r?(n.d=+r[0],e+r[0].length):-1}function ne(n,t,e){fc.lastIndex=0;var r=fc.exec(t.slice(e,e+3));return r?(n.j=+r[0],e+r[0].length):-1}function te(n,t,e){fc.lastIndex=0;var r=fc.exec(t.slice(e,e+2));return r?(n.H=+r[0],e+r[0].length):-1}function ee(n,t,e){fc.lastIndex=0;var r=fc.exec(t.slice(e,e+2));return r?(n.M=+r[0],e+r[0].length):-1}function re(n,t,e){fc.lastIndex=0;var r=fc.exec(t.slice(e,e+2));return r?(n.S=+r[0],e+r[0].length):-1}function ue(n,t,e){fc.lastIndex=0;var r=fc.exec(t.slice(e,e+3));return r?(n.L=+r[0],e+r[0].length):-1}function ie(n){var t=n.getTimezoneOffset(),e=t>0?"-":"+",r=ga(t)/60|0,u=ga(t)%60;return e+It(r,"0",2)+It(u,"0",2)}function oe(n,t,e){hc.lastIndex=0;var r=hc.exec(t.slice(e,e+1));return r?e+r[0].length:-1}function ae(n){for(var t=n.length,e=-1;++e<t;)n[e][0]=this(n[e][0]);return function(t){for(var e=0,r=n[e];!r[1](t);)r=n[++e];return r[0](t)}}function ce(){}function le(n,t,e){var r=e.s=n+t,u=r-n,i=r-u;e.t=n-i+(t-u)}function se(n,t){n&&dc.hasOwnProperty(n.type)&&dc[n.type](n,t)}function fe(n,t,e){var r,u=-1,i=n.length-e;for(t.lineStart();++u<i;)r=n[u],t.point(r[0],r[1],r[2]);t.lineEnd()}function he(n,t){var e=-1,r=n.length;for(t.polygonStart();++e<r;)fe(n[e],t,1);t.polygonEnd()}function ge(){function n(n,t){n*=Da,t=t*Da/2+qa/4;var e=n-r,o=e>=0?1:-1,a=o*e,c=Math.cos(t),l=Math.sin(t),s=i*l,f=u*c+s*Math.cos(a),h=s*o*Math.sin(a);yc.add(Math.atan2(h,f)),r=n,u=c,i=l}var t,e,r,u,i;Mc.point=function(o,a){Mc.point=n,r=(t=o)*Da,u=Math.cos(a=(e=a)*Da/2+qa/4),i=Math.sin(a)},Mc.lineEnd=function(){n(t,e)}}function pe(n){var t=n[0],e=n[1],r=Math.cos(e);return[r*Math.cos(t),r*Math.sin(t),Math.sin(e)]}function ve(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function de(n,t){return[n[1]*t[2]-n[2]*t[1],n[2]*t[0]-n[0]*t[2],n[0]*t[1]-n[1]*t[0]]}function me(n,t){n[0]+=t[0],n[1]+=t[1],n[2]+=t[2]}function ye(n,t){return[n[0]*t,n[1]*t,n[2]*t]}function Me(n){var t=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=t,n[1]/=t,n[2]/=t}function xe(n){return[Math.atan2(n[1],n[0]),tt(n[2])]}function be(n,t){return ga(n[0]-t[0])<Ca&&ga(n[1]-t[1])<Ca}function _e(n,t){n*=Da;var e=Math.cos(t*=Da);we(e*Math.cos(n),e*Math.sin(n),Math.sin(t))}function we(n,t,e){++xc,_c+=(n-_c)/xc,wc+=(t-wc)/xc,Sc+=(e-Sc)/xc}function Se(){function n(n,u){n*=Da;var i=Math.cos(u*=Da),o=i*Math.cos(n),a=i*Math.sin(n),c=Math.sin(u),l=Math.atan2(Math.sqrt((l=e*c-r*a)*l+(l=r*o-t*c)*l+(l=t*a-e*o)*l),t*o+e*a+r*c);bc+=l,kc+=l*(t+(t=o)),Ec+=l*(e+(e=a)),Ac+=l*(r+(r=c)),we(t,e,r)}var t,e,r;qc.point=function(u,i){u*=Da;var o=Math.cos(i*=Da);t=o*Math.cos(u),e=o*Math.sin(u),r=Math.sin(i),qc.point=n,we(t,e,r)}}function ke(){qc.point=_e}function Ee(){function n(n,t){n*=Da;var e=Math.cos(t*=Da),o=e*Math.cos(n),a=e*Math.sin(n),c=Math.sin(t),l=u*c-i*a,s=i*o-r*c,f=r*a-u*o,h=Math.sqrt(l*l+s*s+f*f),g=r*o+u*a+i*c,p=h&&-nt(g)/h,v=Math.atan2(h,g);Nc+=p*l,Cc+=p*s,zc+=p*f,bc+=v,kc+=v*(r+(r=o)),Ec+=v*(u+(u=a)),Ac+=v*(i+(i=c)),we(r,u,i)}var t,e,r,u,i;qc.point=function(o,a){t=o,e=a,qc.point=n,o*=Da;var c=Math.cos(a*=Da);r=c*Math.cos(o),u=c*Math.sin(o),i=Math.sin(a),we(r,u,i)},qc.lineEnd=function(){n(t,e),qc.lineEnd=ke,qc.point=_e}}function Ae(n,t){function e(e,r){return e=n(e,r),t(e[0],e[1])}return n.invert&&t.invert&&(e.invert=function(e,r){return e=t.invert(e,r),e&&n.invert(e[0],e[1])}),e}function Ne(){return!0}function Ce(n,t,e,r,u){var i=[],o=[];if(n.forEach(function(n){if(!((t=n.length-1)<=0)){var t,e=n[0],r=n[t];if(be(e,r)){u.lineStart();for(var a=0;t>a;++a)u.point((e=n[a])[0],e[1]);return void u.lineEnd()}var c=new qe(e,n,null,!0),l=new qe(e,null,c,!1);c.o=l,i.push(c),o.push(l),c=new qe(r,n,null,!1),l=new qe(r,null,c,!0),c.o=l,i.push(c),o.push(l)}}),o.sort(t),ze(i),ze(o),i.length){for(var a=0,c=e,l=o.length;l>a;++a)o[a].e=c=!c;for(var s,f,h=i[0];;){for(var g=h,p=!0;g.v;)if((g=g.n)===h)return;s=g.z,u.lineStart();do{if(g.v=g.o.v=!0,g.e){if(p)for(var a=0,l=s.length;l>a;++a)u.point((f=s[a])[0],f[1]);else r(g.x,g.n.x,1,u);g=g.n}else{if(p){s=g.p.z;for(var a=s.length-1;a>=0;--a)u.point((f=s[a])[0],f[1])}else r(g.x,g.p.x,-1,u);g=g.p}g=g.o,s=g.z,p=!p}while(!g.v);u.lineEnd()}}}function ze(n){if(t=n.length){for(var t,e,r=0,u=n[0];++r<t;)u.n=e=n[r],e.p=u,u=e;u.n=e=n[0],e.p=u}}function qe(n,t,e,r){this.x=n,this.z=t,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Le(n,t,e,r){return function(u,i){function o(t,e){var r=u(t,e);n(t=r[0],e=r[1])&&i.point(t,e)}function a(n,t){var e=u(n,t);d.point(e[0],e[1])}function c(){y.point=a,d.lineStart()}function l(){y.point=o,d.lineEnd()}function s(n,t){v.push([n,t]);var e=u(n,t);x.point(e[0],e[1])}function f(){x.lineStart(),v=[]}function h(){s(v[0][0],v[0][1]),x.lineEnd();var n,t=x.clean(),e=M.buffer(),r=e.length;if(v.pop(),p.push(v),v=null,r)if(1&t){n=e[0];var u,r=n.length-1,o=-1;if(r>0){for(b||(i.polygonStart(),b=!0),i.lineStart();++o<r;)i.point((u=n[o])[0],u[1]);i.lineEnd()}}else r>1&&2&t&&e.push(e.pop().concat(e.shift())),g.push(e.filter(Te))}var g,p,v,d=t(i),m=u.invert(r[0],r[1]),y={point:o,lineStart:c,lineEnd:l,polygonStart:function(){y.point=s,y.lineStart=f,y.lineEnd=h,g=[],p=[]},polygonEnd:function(){y.point=o,y.lineStart=c,y.lineEnd=l,g=ta.merge(g);var n=Fe(m,p);g.length?(b||(i.polygonStart(),b=!0),Ce(g,De,n,e,i)):n&&(b||(i.polygonStart(),b=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),b&&(i.polygonEnd(),b=!1),g=p=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}},M=Re(),x=t(M),b=!1;return y}}function Te(n){return n.length>1}function Re(){var n,t=[];return{lineStart:function(){t.push(n=[])},point:function(t,e){n.push([t,e])},lineEnd:b,buffer:function(){var e=t;return t=[],n=null,e},rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))}}}function De(n,t){return((n=n.x)[0]<0?n[1]-Ra-Ca:Ra-n[1])-((t=t.x)[0]<0?t[1]-Ra-Ca:Ra-t[1])}function Pe(n){var t,e=0/0,r=0/0,u=0/0;return{lineStart:function(){n.lineStart(),t=1},point:function(i,o){var a=i>0?qa:-qa,c=ga(i-e);ga(c-qa)<Ca?(n.point(e,r=(r+o)/2>0?Ra:-Ra),n.point(u,r),n.lineEnd(),n.lineStart(),n.point(a,r),n.point(i,r),t=0):u!==a&&c>=qa&&(ga(e-u)<Ca&&(e-=u*Ca),ga(i-a)<Ca&&(i-=a*Ca),r=Ue(e,r,i,o),n.point(u,r),n.lineEnd(),n.lineStart(),n.point(a,r),t=0),n.point(e=i,r=o),u=a},lineEnd:function(){n.lineEnd(),e=r=0/0},clean:function(){return 2-t}}}function Ue(n,t,e,r){var u,i,o=Math.sin(n-e);return ga(o)>Ca?Math.atan((Math.sin(t)*(i=Math.cos(r))*Math.sin(e)-Math.sin(r)*(u=Math.cos(t))*Math.sin(n))/(u*i*o)):(t+r)/2}function je(n,t,e,r){var u;if(null==n)u=e*Ra,r.point(-qa,u),r.point(0,u),r.point(qa,u),r.point(qa,0),r.point(qa,-u),r.point(0,-u),r.point(-qa,-u),r.point(-qa,0),r.point(-qa,u);else if(ga(n[0]-t[0])>Ca){var i=n[0]<t[0]?qa:-qa;u=e*i/2,r.point(-i,u),r.point(0,u),r.point(i,u)}else r.point(t[0],t[1])}function Fe(n,t){var e=n[0],r=n[1],u=[Math.sin(e),-Math.cos(e),0],i=0,o=0;yc.reset();for(var a=0,c=t.length;c>a;++a){var l=t[a],s=l.length;if(s)for(var f=l[0],h=f[0],g=f[1]/2+qa/4,p=Math.sin(g),v=Math.cos(g),d=1;;){d===s&&(d=0),n=l[d];var m=n[0],y=n[1]/2+qa/4,M=Math.sin(y),x=Math.cos(y),b=m-h,_=b>=0?1:-1,w=_*b,S=w>qa,k=p*M;if(yc.add(Math.atan2(k*_*Math.sin(w),v*x+k*Math.cos(w))),i+=S?b+_*La:b,S^h>=e^m>=e){var E=de(pe(f),pe(n));Me(E);var A=de(u,E);Me(A);var N=(S^b>=0?-1:1)*tt(A[2]);(r>N||r===N&&(E[0]||E[1]))&&(o+=S^b>=0?1:-1)}if(!d++)break;h=m,p=M,v=x,f=n}}return(-Ca>i||Ca>i&&0>yc)^1&o}function He(n){function t(n,t){return Math.cos(n)*Math.cos(t)>i}function e(n){var e,i,c,l,s;return{lineStart:function(){l=c=!1,s=1},point:function(f,h){var g,p=[f,h],v=t(f,h),d=o?v?0:u(f,h):v?u(f+(0>f?qa:-qa),h):0;if(!e&&(l=c=v)&&n.lineStart(),v!==c&&(g=r(e,p),(be(e,g)||be(p,g))&&(p[0]+=Ca,p[1]+=Ca,v=t(p[0],p[1]))),v!==c)s=0,v?(n.lineStart(),g=r(p,e),n.point(g[0],g[1])):(g=r(e,p),n.point(g[0],g[1]),n.lineEnd()),e=g;else if(a&&e&&o^v){var m;d&i||!(m=r(p,e,!0))||(s=0,o?(n.lineStart(),n.point(m[0][0],m[0][1]),n.point(m[1][0],m[1][1]),n.lineEnd()):(n.point(m[1][0],m[1][1]),n.lineEnd(),n.lineStart(),n.point(m[0][0],m[0][1])))}!v||e&&be(e,p)||n.point(p[0],p[1]),e=p,c=v,i=d},lineEnd:function(){c&&n.lineEnd(),e=null},clean:function(){return s|(l&&c)<<1}}}function r(n,t,e){var r=pe(n),u=pe(t),o=[1,0,0],a=de(r,u),c=ve(a,a),l=a[0],s=c-l*l;if(!s)return!e&&n;var f=i*c/s,h=-i*l/s,g=de(o,a),p=ye(o,f),v=ye(a,h);me(p,v);var d=g,m=ve(p,d),y=ve(d,d),M=m*m-y*(ve(p,p)-1);if(!(0>M)){var x=Math.sqrt(M),b=ye(d,(-m-x)/y);if(me(b,p),b=xe(b),!e)return b;var _,w=n[0],S=t[0],k=n[1],E=t[1];w>S&&(_=w,w=S,S=_);var A=S-w,N=ga(A-qa)<Ca,C=N||Ca>A;if(!N&&k>E&&(_=k,k=E,E=_),C?N?k+E>0^b[1]<(ga(b[0]-w)<Ca?k:E):k<=b[1]&&b[1]<=E:A>qa^(w<=b[0]&&b[0]<=S)){var z=ye(d,(-m+x)/y);return me(z,p),[b,xe(z)]}}}function u(t,e){var r=o?n:qa-n,u=0;return-r>t?u|=1:t>r&&(u|=2),-r>e?u|=4:e>r&&(u|=8),u}var i=Math.cos(n),o=i>0,a=ga(i)>Ca,c=gr(n,6*Da);return Le(t,e,c,o?[0,-n]:[-qa,n-qa])}function Oe(n,t,e,r){return function(u){var i,o=u.a,a=u.b,c=o.x,l=o.y,s=a.x,f=a.y,h=0,g=1,p=s-c,v=f-l;if(i=n-c,p||!(i>0)){if(i/=p,0>p){if(h>i)return;g>i&&(g=i)}else if(p>0){if(i>g)return;i>h&&(h=i)}if(i=e-c,p||!(0>i)){if(i/=p,0>p){if(i>g)return;i>h&&(h=i)}else if(p>0){if(h>i)return;g>i&&(g=i)}if(i=t-l,v||!(i>0)){if(i/=v,0>v){if(h>i)return;g>i&&(g=i)}else if(v>0){if(i>g)return;i>h&&(h=i)}if(i=r-l,v||!(0>i)){if(i/=v,0>v){if(i>g)return;i>h&&(h=i)}else if(v>0){if(h>i)return;g>i&&(g=i)}return h>0&&(u.a={x:c+h*p,y:l+h*v}),1>g&&(u.b={x:c+g*p,y:l+g*v}),u}}}}}}function Ie(n,t,e,r){function u(r,u){return ga(r[0]-n)<Ca?u>0?0:3:ga(r[0]-e)<Ca?u>0?2:1:ga(r[1]-t)<Ca?u>0?1:0:u>0?3:2}function i(n,t){return o(n.x,t.x)}function o(n,t){var e=u(n,1),r=u(t,1);return e!==r?e-r:0===e?t[1]-n[1]:1===e?n[0]-t[0]:2===e?n[1]-t[1]:t[0]-n[0]}return function(a){function c(n){for(var t=0,e=d.length,r=n[1],u=0;e>u;++u)for(var i,o=1,a=d[u],c=a.length,l=a[0];c>o;++o)i=a[o],l[1]<=r?i[1]>r&&Q(l,i,n)>0&&++t:i[1]<=r&&Q(l,i,n)<0&&--t,l=i;return 0!==t}function l(i,a,c,l){var s=0,f=0;if(null==i||(s=u(i,c))!==(f=u(a,c))||o(i,a)<0^c>0){do l.point(0===s||3===s?n:e,s>1?r:t);while((s=(s+c+4)%4)!==f)}else l.point(a[0],a[1])}function s(u,i){return u>=n&&e>=u&&i>=t&&r>=i}function f(n,t){s(n,t)&&a.point(n,t)}function h(){C.point=p,d&&d.push(m=[]),S=!0,w=!1,b=_=0/0}function g(){v&&(p(y,M),x&&w&&A.rejoin(),v.push(A.buffer())),C.point=f,w&&a.lineEnd()}function p(n,t){n=Math.max(-Tc,Math.min(Tc,n)),t=Math.max(-Tc,Math.min(Tc,t));var e=s(n,t);if(d&&m.push([n,t]),S)y=n,M=t,x=e,S=!1,e&&(a.lineStart(),a.point(n,t));else if(e&&w)a.point(n,t);else{var r={a:{x:b,y:_},b:{x:n,y:t}};N(r)?(w||(a.lineStart(),a.point(r.a.x,r.a.y)),a.point(r.b.x,r.b.y),e||a.lineEnd(),k=!1):e&&(a.lineStart(),a.point(n,t),k=!1)}b=n,_=t,w=e}var v,d,m,y,M,x,b,_,w,S,k,E=a,A=Re(),N=Oe(n,t,e,r),C={point:f,lineStart:h,lineEnd:g,polygonStart:function(){a=A,v=[],d=[],k=!0},polygonEnd:function(){a=E,v=ta.merge(v);var t=c([n,r]),e=k&&t,u=v.length;(e||u)&&(a.polygonStart(),e&&(a.lineStart(),l(null,null,1,a),a.lineEnd()),u&&Ce(v,i,t,l,a),a.polygonEnd()),v=d=m=null}};return C}}function Ye(n){var t=0,e=qa/3,r=ir(n),u=r(t,e);return u.parallels=function(n){return arguments.length?r(t=n[0]*qa/180,e=n[1]*qa/180):[t/qa*180,e/qa*180]},u}function Ze(n,t){function e(n,t){var e=Math.sqrt(i-2*u*Math.sin(t))/u;return[e*Math.sin(n*=u),o-e*Math.cos(n)]}var r=Math.sin(n),u=(r+Math.sin(t))/2,i=1+r*(2*u-r),o=Math.sqrt(i)/u;return e.invert=function(n,t){var e=o-t;return[Math.atan2(n,e)/u,tt((i-(n*n+e*e)*u*u)/(2*u))]},e}function Ve(){function n(n,t){Dc+=u*n-r*t,r=n,u=t}var t,e,r,u;Hc.point=function(i,o){Hc.point=n,t=r=i,e=u=o},Hc.lineEnd=function(){n(t,e)}}function Xe(n,t){Pc>n&&(Pc=n),n>jc&&(jc=n),Uc>t&&(Uc=t),t>Fc&&(Fc=t)}function $e(){function n(n,t){o.push("M",n,",",t,i)}function t(n,t){o.push("M",n,",",t),a.point=e}function e(n,t){o.push("L",n,",",t)}function r(){a.point=n}function u(){o.push("Z")}var i=Be(4.5),o=[],a={point:n,lineStart:function(){a.point=t},lineEnd:r,polygonStart:function(){a.lineEnd=u},polygonEnd:function(){a.lineEnd=r,a.point=n},pointRadius:function(n){return i=Be(n),a},result:function(){if(o.length){var n=o.join("");return o=[],n}}};return a}function Be(n){return"m0,"+n+"a"+n+","+n+" 0 1,1 0,"+-2*n+"a"+n+","+n+" 0 1,1 0,"+2*n+"z"}function We(n,t){_c+=n,wc+=t,++Sc}function Je(){function n(n,r){var u=n-t,i=r-e,o=Math.sqrt(u*u+i*i);kc+=o*(t+n)/2,Ec+=o*(e+r)/2,Ac+=o,We(t=n,e=r)}var t,e;Ic.point=function(r,u){Ic.point=n,We(t=r,e=u)}}function Ge(){Ic.point=We}function Ke(){function n(n,t){var e=n-r,i=t-u,o=Math.sqrt(e*e+i*i);kc+=o*(r+n)/2,Ec+=o*(u+t)/2,Ac+=o,o=u*n-r*t,Nc+=o*(r+n),Cc+=o*(u+t),zc+=3*o,We(r=n,u=t)}var t,e,r,u;Ic.point=function(i,o){Ic.point=n,We(t=r=i,e=u=o)},Ic.lineEnd=function(){n(t,e)}}function Qe(n){function t(t,e){n.moveTo(t+o,e),n.arc(t,e,o,0,La)}function e(t,e){n.moveTo(t,e),a.point=r}function r(t,e){n.lineTo(t,e)}function u(){a.point=t}function i(){n.closePath()}var o=4.5,a={point:t,lineStart:function(){a.point=e},lineEnd:u,polygonStart:function(){a.lineEnd=i},polygonEnd:function(){a.lineEnd=u,a.point=t},pointRadius:function(n){return o=n,a},result:b};return a}function nr(n){function t(n){return(a?r:e)(n)}function e(t){return rr(t,function(e,r){e=n(e,r),t.point(e[0],e[1])})}function r(t){function e(e,r){e=n(e,r),t.point(e[0],e[1])}function r(){M=0/0,S.point=i,t.lineStart()}function i(e,r){var i=pe([e,r]),o=n(e,r);u(M,x,y,b,_,w,M=o[0],x=o[1],y=e,b=i[0],_=i[1],w=i[2],a,t),t.point(M,x)}function o(){S.point=e,t.lineEnd()}function c(){r(),S.point=l,S.lineEnd=s}function l(n,t){i(f=n,h=t),g=M,p=x,v=b,d=_,m=w,S.point=i}function s(){u(M,x,y,b,_,w,g,p,f,v,d,m,a,t),S.lineEnd=o,o()}var f,h,g,p,v,d,m,y,M,x,b,_,w,S={point:e,lineStart:r,lineEnd:o,polygonStart:function(){t.polygonStart(),S.lineStart=c
},polygonEnd:function(){t.polygonEnd(),S.lineStart=r}};return S}function u(t,e,r,a,c,l,s,f,h,g,p,v,d,m){var y=s-t,M=f-e,x=y*y+M*M;if(x>4*i&&d--){var b=a+g,_=c+p,w=l+v,S=Math.sqrt(b*b+_*_+w*w),k=Math.asin(w/=S),E=ga(ga(w)-1)<Ca||ga(r-h)<Ca?(r+h)/2:Math.atan2(_,b),A=n(E,k),N=A[0],C=A[1],z=N-t,q=C-e,L=M*z-y*q;(L*L/x>i||ga((y*z+M*q)/x-.5)>.3||o>a*g+c*p+l*v)&&(u(t,e,r,a,c,l,N,C,E,b/=S,_/=S,w,d,m),m.point(N,C),u(N,C,E,b,_,w,s,f,h,g,p,v,d,m))}}var i=.5,o=Math.cos(30*Da),a=16;return t.precision=function(n){return arguments.length?(a=(i=n*n)>0&&16,t):Math.sqrt(i)},t}function tr(n){var t=nr(function(t,e){return n([t*Pa,e*Pa])});return function(n){return or(t(n))}}function er(n){this.stream=n}function rr(n,t){return{point:t,sphere:function(){n.sphere()},lineStart:function(){n.lineStart()},lineEnd:function(){n.lineEnd()},polygonStart:function(){n.polygonStart()},polygonEnd:function(){n.polygonEnd()}}}function ur(n){return ir(function(){return n})()}function ir(n){function t(n){return n=a(n[0]*Da,n[1]*Da),[n[0]*h+c,l-n[1]*h]}function e(n){return n=a.invert((n[0]-c)/h,(l-n[1])/h),n&&[n[0]*Pa,n[1]*Pa]}function r(){a=Ae(o=lr(m,M,x),i);var n=i(v,d);return c=g-n[0]*h,l=p+n[1]*h,u()}function u(){return s&&(s.valid=!1,s=null),t}var i,o,a,c,l,s,f=nr(function(n,t){return n=i(n,t),[n[0]*h+c,l-n[1]*h]}),h=150,g=480,p=250,v=0,d=0,m=0,M=0,x=0,b=Lc,_=y,w=null,S=null;return t.stream=function(n){return s&&(s.valid=!1),s=or(b(o,f(_(n)))),s.valid=!0,s},t.clipAngle=function(n){return arguments.length?(b=null==n?(w=n,Lc):He((w=+n)*Da),u()):w},t.clipExtent=function(n){return arguments.length?(S=n,_=n?Ie(n[0][0],n[0][1],n[1][0],n[1][1]):y,u()):S},t.scale=function(n){return arguments.length?(h=+n,r()):h},t.translate=function(n){return arguments.length?(g=+n[0],p=+n[1],r()):[g,p]},t.center=function(n){return arguments.length?(v=n[0]%360*Da,d=n[1]%360*Da,r()):[v*Pa,d*Pa]},t.rotate=function(n){return arguments.length?(m=n[0]%360*Da,M=n[1]%360*Da,x=n.length>2?n[2]%360*Da:0,r()):[m*Pa,M*Pa,x*Pa]},ta.rebind(t,f,"precision"),function(){return i=n.apply(this,arguments),t.invert=i.invert&&e,r()}}function or(n){return rr(n,function(t,e){n.point(t*Da,e*Da)})}function ar(n,t){return[n,t]}function cr(n,t){return[n>qa?n-La:-qa>n?n+La:n,t]}function lr(n,t,e){return n?t||e?Ae(fr(n),hr(t,e)):fr(n):t||e?hr(t,e):cr}function sr(n){return function(t,e){return t+=n,[t>qa?t-La:-qa>t?t+La:t,e]}}function fr(n){var t=sr(n);return t.invert=sr(-n),t}function hr(n,t){function e(n,t){var e=Math.cos(t),a=Math.cos(n)*e,c=Math.sin(n)*e,l=Math.sin(t),s=l*r+a*u;return[Math.atan2(c*i-s*o,a*r-l*u),tt(s*i+c*o)]}var r=Math.cos(n),u=Math.sin(n),i=Math.cos(t),o=Math.sin(t);return e.invert=function(n,t){var e=Math.cos(t),a=Math.cos(n)*e,c=Math.sin(n)*e,l=Math.sin(t),s=l*i-c*o;return[Math.atan2(c*i+l*o,a*r+s*u),tt(s*r-a*u)]},e}function gr(n,t){var e=Math.cos(n),r=Math.sin(n);return function(u,i,o,a){var c=o*t;null!=u?(u=pr(e,u),i=pr(e,i),(o>0?i>u:u>i)&&(u+=o*La)):(u=n+o*La,i=n-.5*c);for(var l,s=u;o>0?s>i:i>s;s-=c)a.point((l=xe([e,-r*Math.cos(s),-r*Math.sin(s)]))[0],l[1])}}function pr(n,t){var e=pe(t);e[0]-=n,Me(e);var r=nt(-e[1]);return((-e[2]<0?-r:r)+2*Math.PI-Ca)%(2*Math.PI)}function vr(n,t,e){var r=ta.range(n,t-Ca,e).concat(t);return function(n){return r.map(function(t){return[n,t]})}}function dr(n,t,e){var r=ta.range(n,t-Ca,e).concat(t);return function(n){return r.map(function(t){return[t,n]})}}function mr(n){return n.source}function yr(n){return n.target}function Mr(n,t,e,r){var u=Math.cos(t),i=Math.sin(t),o=Math.cos(r),a=Math.sin(r),c=u*Math.cos(n),l=u*Math.sin(n),s=o*Math.cos(e),f=o*Math.sin(e),h=2*Math.asin(Math.sqrt(it(r-t)+u*o*it(e-n))),g=1/Math.sin(h),p=h?function(n){var t=Math.sin(n*=h)*g,e=Math.sin(h-n)*g,r=e*c+t*s,u=e*l+t*f,o=e*i+t*a;return[Math.atan2(u,r)*Pa,Math.atan2(o,Math.sqrt(r*r+u*u))*Pa]}:function(){return[n*Pa,t*Pa]};return p.distance=h,p}function xr(){function n(n,u){var i=Math.sin(u*=Da),o=Math.cos(u),a=ga((n*=Da)-t),c=Math.cos(a);Yc+=Math.atan2(Math.sqrt((a=o*Math.sin(a))*a+(a=r*i-e*o*c)*a),e*i+r*o*c),t=n,e=i,r=o}var t,e,r;Zc.point=function(u,i){t=u*Da,e=Math.sin(i*=Da),r=Math.cos(i),Zc.point=n},Zc.lineEnd=function(){Zc.point=Zc.lineEnd=b}}function br(n,t){function e(t,e){var r=Math.cos(t),u=Math.cos(e),i=n(r*u);return[i*u*Math.sin(t),i*Math.sin(e)]}return e.invert=function(n,e){var r=Math.sqrt(n*n+e*e),u=t(r),i=Math.sin(u),o=Math.cos(u);return[Math.atan2(n*i,r*o),Math.asin(r&&e*i/r)]},e}function _r(n,t){function e(n,t){o>0?-Ra+Ca>t&&(t=-Ra+Ca):t>Ra-Ca&&(t=Ra-Ca);var e=o/Math.pow(u(t),i);return[e*Math.sin(i*n),o-e*Math.cos(i*n)]}var r=Math.cos(n),u=function(n){return Math.tan(qa/4+n/2)},i=n===t?Math.sin(n):Math.log(r/Math.cos(t))/Math.log(u(t)/u(n)),o=r*Math.pow(u(n),i)/i;return i?(e.invert=function(n,t){var e=o-t,r=K(i)*Math.sqrt(n*n+e*e);return[Math.atan2(n,e)/i,2*Math.atan(Math.pow(o/r,1/i))-Ra]},e):Sr}function wr(n,t){function e(n,t){var e=i-t;return[e*Math.sin(u*n),i-e*Math.cos(u*n)]}var r=Math.cos(n),u=n===t?Math.sin(n):(r-Math.cos(t))/(t-n),i=r/u+n;return ga(u)<Ca?ar:(e.invert=function(n,t){var e=i-t;return[Math.atan2(n,e)/u,i-K(u)*Math.sqrt(n*n+e*e)]},e)}function Sr(n,t){return[n,Math.log(Math.tan(qa/4+t/2))]}function kr(n){var t,e=ur(n),r=e.scale,u=e.translate,i=e.clipExtent;return e.scale=function(){var n=r.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.translate=function(){var n=u.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.clipExtent=function(n){var o=i.apply(e,arguments);if(o===e){if(t=null==n){var a=qa*r(),c=u();i([[c[0]-a,c[1]-a],[c[0]+a,c[1]+a]])}}else t&&(o=null);return o},e.clipExtent(null)}function Er(n,t){return[Math.log(Math.tan(qa/4+t/2)),-n]}function Ar(n){return n[0]}function Nr(n){return n[1]}function Cr(n){for(var t=n.length,e=[0,1],r=2,u=2;t>u;u++){for(;r>1&&Q(n[e[r-2]],n[e[r-1]],n[u])<=0;)--r;e[r++]=u}return e.slice(0,r)}function zr(n,t){return n[0]-t[0]||n[1]-t[1]}function qr(n,t,e){return(e[0]-t[0])*(n[1]-t[1])<(e[1]-t[1])*(n[0]-t[0])}function Lr(n,t,e,r){var u=n[0],i=e[0],o=t[0]-u,a=r[0]-i,c=n[1],l=e[1],s=t[1]-c,f=r[1]-l,h=(a*(c-l)-f*(u-i))/(f*o-a*s);return[u+h*o,c+h*s]}function Tr(n){var t=n[0],e=n[n.length-1];return!(t[0]-e[0]||t[1]-e[1])}function Rr(){tu(this),this.edge=this.site=this.circle=null}function Dr(n){var t=el.pop()||new Rr;return t.site=n,t}function Pr(n){Xr(n),Qc.remove(n),el.push(n),tu(n)}function Ur(n){var t=n.circle,e=t.x,r=t.cy,u={x:e,y:r},i=n.P,o=n.N,a=[n];Pr(n);for(var c=i;c.circle&&ga(e-c.circle.x)<Ca&&ga(r-c.circle.cy)<Ca;)i=c.P,a.unshift(c),Pr(c),c=i;a.unshift(c),Xr(c);for(var l=o;l.circle&&ga(e-l.circle.x)<Ca&&ga(r-l.circle.cy)<Ca;)o=l.N,a.push(l),Pr(l),l=o;a.push(l),Xr(l);var s,f=a.length;for(s=1;f>s;++s)l=a[s],c=a[s-1],Kr(l.edge,c.site,l.site,u);c=a[0],l=a[f-1],l.edge=Jr(c.site,l.site,null,u),Vr(c),Vr(l)}function jr(n){for(var t,e,r,u,i=n.x,o=n.y,a=Qc._;a;)if(r=Fr(a,o)-i,r>Ca)a=a.L;else{if(u=i-Hr(a,o),!(u>Ca)){r>-Ca?(t=a.P,e=a):u>-Ca?(t=a,e=a.N):t=e=a;break}if(!a.R){t=a;break}a=a.R}var c=Dr(n);if(Qc.insert(t,c),t||e){if(t===e)return Xr(t),e=Dr(t.site),Qc.insert(c,e),c.edge=e.edge=Jr(t.site,c.site),Vr(t),void Vr(e);if(!e)return void(c.edge=Jr(t.site,c.site));Xr(t),Xr(e);var l=t.site,s=l.x,f=l.y,h=n.x-s,g=n.y-f,p=e.site,v=p.x-s,d=p.y-f,m=2*(h*d-g*v),y=h*h+g*g,M=v*v+d*d,x={x:(d*y-g*M)/m+s,y:(h*M-v*y)/m+f};Kr(e.edge,l,p,x),c.edge=Jr(l,n,null,x),e.edge=Jr(n,p,null,x),Vr(t),Vr(e)}}function Fr(n,t){var e=n.site,r=e.x,u=e.y,i=u-t;if(!i)return r;var o=n.P;if(!o)return-1/0;e=o.site;var a=e.x,c=e.y,l=c-t;if(!l)return a;var s=a-r,f=1/i-1/l,h=s/l;return f?(-h+Math.sqrt(h*h-2*f*(s*s/(-2*l)-c+l/2+u-i/2)))/f+r:(r+a)/2}function Hr(n,t){var e=n.N;if(e)return Fr(e,t);var r=n.site;return r.y===t?r.x:1/0}function Or(n){this.site=n,this.edges=[]}function Ir(n){for(var t,e,r,u,i,o,a,c,l,s,f=n[0][0],h=n[1][0],g=n[0][1],p=n[1][1],v=Kc,d=v.length;d--;)if(i=v[d],i&&i.prepare())for(a=i.edges,c=a.length,o=0;c>o;)s=a[o].end(),r=s.x,u=s.y,l=a[++o%c].start(),t=l.x,e=l.y,(ga(r-t)>Ca||ga(u-e)>Ca)&&(a.splice(o,0,new Qr(Gr(i.site,s,ga(r-f)<Ca&&p-u>Ca?{x:f,y:ga(t-f)<Ca?e:p}:ga(u-p)<Ca&&h-r>Ca?{x:ga(e-p)<Ca?t:h,y:p}:ga(r-h)<Ca&&u-g>Ca?{x:h,y:ga(t-h)<Ca?e:g}:ga(u-g)<Ca&&r-f>Ca?{x:ga(e-g)<Ca?t:f,y:g}:null),i.site,null)),++c)}function Yr(n,t){return t.angle-n.angle}function Zr(){tu(this),this.x=this.y=this.arc=this.site=this.cy=null}function Vr(n){var t=n.P,e=n.N;if(t&&e){var r=t.site,u=n.site,i=e.site;if(r!==i){var o=u.x,a=u.y,c=r.x-o,l=r.y-a,s=i.x-o,f=i.y-a,h=2*(c*f-l*s);if(!(h>=-za)){var g=c*c+l*l,p=s*s+f*f,v=(f*g-l*p)/h,d=(c*p-s*g)/h,f=d+a,m=rl.pop()||new Zr;m.arc=n,m.site=u,m.x=v+o,m.y=f+Math.sqrt(v*v+d*d),m.cy=f,n.circle=m;for(var y=null,M=tl._;M;)if(m.y<M.y||m.y===M.y&&m.x<=M.x){if(!M.L){y=M.P;break}M=M.L}else{if(!M.R){y=M;break}M=M.R}tl.insert(y,m),y||(nl=m)}}}}function Xr(n){var t=n.circle;t&&(t.P||(nl=t.N),tl.remove(t),rl.push(t),tu(t),n.circle=null)}function $r(n){for(var t,e=Gc,r=Oe(n[0][0],n[0][1],n[1][0],n[1][1]),u=e.length;u--;)t=e[u],(!Br(t,n)||!r(t)||ga(t.a.x-t.b.x)<Ca&&ga(t.a.y-t.b.y)<Ca)&&(t.a=t.b=null,e.splice(u,1))}function Br(n,t){var e=n.b;if(e)return!0;var r,u,i=n.a,o=t[0][0],a=t[1][0],c=t[0][1],l=t[1][1],s=n.l,f=n.r,h=s.x,g=s.y,p=f.x,v=f.y,d=(h+p)/2,m=(g+v)/2;if(v===g){if(o>d||d>=a)return;if(h>p){if(i){if(i.y>=l)return}else i={x:d,y:c};e={x:d,y:l}}else{if(i){if(i.y<c)return}else i={x:d,y:l};e={x:d,y:c}}}else if(r=(h-p)/(v-g),u=m-r*d,-1>r||r>1)if(h>p){if(i){if(i.y>=l)return}else i={x:(c-u)/r,y:c};e={x:(l-u)/r,y:l}}else{if(i){if(i.y<c)return}else i={x:(l-u)/r,y:l};e={x:(c-u)/r,y:c}}else if(v>g){if(i){if(i.x>=a)return}else i={x:o,y:r*o+u};e={x:a,y:r*a+u}}else{if(i){if(i.x<o)return}else i={x:a,y:r*a+u};e={x:o,y:r*o+u}}return n.a=i,n.b=e,!0}function Wr(n,t){this.l=n,this.r=t,this.a=this.b=null}function Jr(n,t,e,r){var u=new Wr(n,t);return Gc.push(u),e&&Kr(u,n,t,e),r&&Kr(u,t,n,r),Kc[n.i].edges.push(new Qr(u,n,t)),Kc[t.i].edges.push(new Qr(u,t,n)),u}function Gr(n,t,e){var r=new Wr(n,null);return r.a=t,r.b=e,Gc.push(r),r}function Kr(n,t,e,r){n.a||n.b?n.l===e?n.b=r:n.a=r:(n.a=r,n.l=t,n.r=e)}function Qr(n,t,e){var r=n.a,u=n.b;this.edge=n,this.site=t,this.angle=e?Math.atan2(e.y-t.y,e.x-t.x):n.l===t?Math.atan2(u.x-r.x,r.y-u.y):Math.atan2(r.x-u.x,u.y-r.y)}function nu(){this._=null}function tu(n){n.U=n.C=n.L=n.R=n.P=n.N=null}function eu(n,t){var e=t,r=t.R,u=e.U;u?u.L===e?u.L=r:u.R=r:n._=r,r.U=u,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function ru(n,t){var e=t,r=t.L,u=e.U;u?u.L===e?u.L=r:u.R=r:n._=r,r.U=u,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function uu(n){for(;n.L;)n=n.L;return n}function iu(n,t){var e,r,u,i=n.sort(ou).pop();for(Gc=[],Kc=new Array(n.length),Qc=new nu,tl=new nu;;)if(u=nl,i&&(!u||i.y<u.y||i.y===u.y&&i.x<u.x))(i.x!==e||i.y!==r)&&(Kc[i.i]=new Or(i),jr(i),e=i.x,r=i.y),i=n.pop();else{if(!u)break;Ur(u.arc)}t&&($r(t),Ir(t));var o={cells:Kc,edges:Gc};return Qc=tl=Gc=Kc=null,o}function ou(n,t){return t.y-n.y||t.x-n.x}function au(n,t,e){return(n.x-e.x)*(t.y-n.y)-(n.x-t.x)*(e.y-n.y)}function cu(n){return n.x}function lu(n){return n.y}function su(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function fu(n,t,e,r,u,i){if(!n(t,e,r,u,i)){var o=.5*(e+u),a=.5*(r+i),c=t.nodes;c[0]&&fu(n,c[0],e,r,o,a),c[1]&&fu(n,c[1],o,r,u,a),c[2]&&fu(n,c[2],e,a,o,i),c[3]&&fu(n,c[3],o,a,u,i)}}function hu(n,t,e,r,u,i,o){var a,c=1/0;return function l(n,s,f,h,g){if(!(s>i||f>o||r>h||u>g)){if(p=n.point){var p,v=t-n.x,d=e-n.y,m=v*v+d*d;if(c>m){var y=Math.sqrt(c=m);r=t-y,u=e-y,i=t+y,o=e+y,a=p}}for(var M=n.nodes,x=.5*(s+h),b=.5*(f+g),_=t>=x,w=e>=b,S=w<<1|_,k=S+4;k>S;++S)if(n=M[3&S])switch(3&S){case 0:l(n,s,f,x,b);break;case 1:l(n,x,f,h,b);break;case 2:l(n,s,b,x,g);break;case 3:l(n,x,b,h,g)}}}(n,r,u,i,o),a}function gu(n,t){n=ta.rgb(n),t=ta.rgb(t);var e=n.r,r=n.g,u=n.b,i=t.r-e,o=t.g-r,a=t.b-u;return function(n){return"#"+xt(Math.round(e+i*n))+xt(Math.round(r+o*n))+xt(Math.round(u+a*n))}}function pu(n,t){var e,r={},u={};for(e in n)e in t?r[e]=mu(n[e],t[e]):u[e]=n[e];for(e in t)e in n||(u[e]=t[e]);return function(n){for(e in r)u[e]=r[e](n);return u}}function vu(n,t){return n=+n,t=+t,function(e){return n*(1-e)+t*e}}function du(n,t){var e,r,u,i=il.lastIndex=ol.lastIndex=0,o=-1,a=[],c=[];for(n+="",t+="";(e=il.exec(n))&&(r=ol.exec(t));)(u=r.index)>i&&(u=t.slice(i,u),a[o]?a[o]+=u:a[++o]=u),(e=e[0])===(r=r[0])?a[o]?a[o]+=r:a[++o]=r:(a[++o]=null,c.push({i:o,x:vu(e,r)})),i=ol.lastIndex;return i<t.length&&(u=t.slice(i),a[o]?a[o]+=u:a[++o]=u),a.length<2?c[0]?(t=c[0].x,function(n){return t(n)+""}):function(){return t}:(t=c.length,function(n){for(var e,r=0;t>r;++r)a[(e=c[r]).i]=e.x(n);return a.join("")})}function mu(n,t){for(var e,r=ta.interpolators.length;--r>=0&&!(e=ta.interpolators[r](n,t)););return e}function yu(n,t){var e,r=[],u=[],i=n.length,o=t.length,a=Math.min(n.length,t.length);for(e=0;a>e;++e)r.push(mu(n[e],t[e]));for(;i>e;++e)u[e]=n[e];for(;o>e;++e)u[e]=t[e];return function(n){for(e=0;a>e;++e)u[e]=r[e](n);return u}}function Mu(n){return function(t){return 0>=t?0:t>=1?1:n(t)}}function xu(n){return function(t){return 1-n(1-t)}}function bu(n){return function(t){return.5*(.5>t?n(2*t):2-n(2-2*t))}}function _u(n){return n*n}function wu(n){return n*n*n}function Su(n){if(0>=n)return 0;if(n>=1)return 1;var t=n*n,e=t*n;return 4*(.5>n?e:3*(n-t)+e-.75)}function ku(n){return function(t){return Math.pow(t,n)}}function Eu(n){return 1-Math.cos(n*Ra)}function Au(n){return Math.pow(2,10*(n-1))}function Nu(n){return 1-Math.sqrt(1-n*n)}function Cu(n,t){var e;return arguments.length<2&&(t=.45),arguments.length?e=t/La*Math.asin(1/n):(n=1,e=t/4),function(r){return 1+n*Math.pow(2,-10*r)*Math.sin((r-e)*La/t)}}function zu(n){return n||(n=1.70158),function(t){return t*t*((n+1)*t-n)}}function qu(n){return 1/2.75>n?7.5625*n*n:2/2.75>n?7.5625*(n-=1.5/2.75)*n+.75:2.5/2.75>n?7.5625*(n-=2.25/2.75)*n+.9375:7.5625*(n-=2.625/2.75)*n+.984375}function Lu(n,t){n=ta.hcl(n),t=ta.hcl(t);var e=n.h,r=n.c,u=n.l,i=t.h-e,o=t.c-r,a=t.l-u;return isNaN(o)&&(o=0,r=isNaN(r)?t.c:r),isNaN(i)?(i=0,e=isNaN(e)?t.h:e):i>180?i-=360:-180>i&&(i+=360),function(n){return st(e+i*n,r+o*n,u+a*n)+""}}function Tu(n,t){n=ta.hsl(n),t=ta.hsl(t);var e=n.h,r=n.s,u=n.l,i=t.h-e,o=t.s-r,a=t.l-u;return isNaN(o)&&(o=0,r=isNaN(r)?t.s:r),isNaN(i)?(i=0,e=isNaN(e)?t.h:e):i>180?i-=360:-180>i&&(i+=360),function(n){return ct(e+i*n,r+o*n,u+a*n)+""}}function Ru(n,t){n=ta.lab(n),t=ta.lab(t);var e=n.l,r=n.a,u=n.b,i=t.l-e,o=t.a-r,a=t.b-u;return function(n){return ht(e+i*n,r+o*n,u+a*n)+""}}function Du(n,t){return t-=n,function(e){return Math.round(n+t*e)}}function Pu(n){var t=[n.a,n.b],e=[n.c,n.d],r=ju(t),u=Uu(t,e),i=ju(Fu(e,t,-u))||0;t[0]*e[1]<e[0]*t[1]&&(t[0]*=-1,t[1]*=-1,r*=-1,u*=-1),this.rotate=(r?Math.atan2(t[1],t[0]):Math.atan2(-e[0],e[1]))*Pa,this.translate=[n.e,n.f],this.scale=[r,i],this.skew=i?Math.atan2(u,i)*Pa:0}function Uu(n,t){return n[0]*t[0]+n[1]*t[1]}function ju(n){var t=Math.sqrt(Uu(n,n));return t&&(n[0]/=t,n[1]/=t),t}function Fu(n,t,e){return n[0]+=e*t[0],n[1]+=e*t[1],n}function Hu(n,t){var e,r=[],u=[],i=ta.transform(n),o=ta.transform(t),a=i.translate,c=o.translate,l=i.rotate,s=o.rotate,f=i.skew,h=o.skew,g=i.scale,p=o.scale;return a[0]!=c[0]||a[1]!=c[1]?(r.push("translate(",null,",",null,")"),u.push({i:1,x:vu(a[0],c[0])},{i:3,x:vu(a[1],c[1])})):r.push(c[0]||c[1]?"translate("+c+")":""),l!=s?(l-s>180?s+=360:s-l>180&&(l+=360),u.push({i:r.push(r.pop()+"rotate(",null,")")-2,x:vu(l,s)})):s&&r.push(r.pop()+"rotate("+s+")"),f!=h?u.push({i:r.push(r.pop()+"skewX(",null,")")-2,x:vu(f,h)}):h&&r.push(r.pop()+"skewX("+h+")"),g[0]!=p[0]||g[1]!=p[1]?(e=r.push(r.pop()+"scale(",null,",",null,")"),u.push({i:e-4,x:vu(g[0],p[0])},{i:e-2,x:vu(g[1],p[1])})):(1!=p[0]||1!=p[1])&&r.push(r.pop()+"scale("+p+")"),e=u.length,function(n){for(var t,i=-1;++i<e;)r[(t=u[i]).i]=t.x(n);return r.join("")}}function Ou(n,t){return t=(t-=n=+n)||1/t,function(e){return(e-n)/t}}function Iu(n,t){return t=(t-=n=+n)||1/t,function(e){return Math.max(0,Math.min(1,(e-n)/t))}}function Yu(n){for(var t=n.source,e=n.target,r=Vu(t,e),u=[t];t!==r;)t=t.parent,u.push(t);for(var i=u.length;e!==r;)u.splice(i,0,e),e=e.parent;return u}function Zu(n){for(var t=[],e=n.parent;null!=e;)t.push(n),n=e,e=e.parent;return t.push(n),t}function Vu(n,t){if(n===t)return n;for(var e=Zu(n),r=Zu(t),u=e.pop(),i=r.pop(),o=null;u===i;)o=u,u=e.pop(),i=r.pop();return o}function Xu(n){n.fixed|=2}function $u(n){n.fixed&=-7}function Bu(n){n.fixed|=4,n.px=n.x,n.py=n.y}function Wu(n){n.fixed&=-5}function Ju(n,t,e){var r=0,u=0;if(n.charge=0,!n.leaf)for(var i,o=n.nodes,a=o.length,c=-1;++c<a;)i=o[c],null!=i&&(Ju(i,t,e),n.charge+=i.charge,r+=i.charge*i.cx,u+=i.charge*i.cy);if(n.point){n.leaf||(n.point.x+=Math.random()-.5,n.point.y+=Math.random()-.5);var l=t*e[n.point.index];n.charge+=n.pointCharge=l,r+=l*n.point.x,u+=l*n.point.y}n.cx=r/n.charge,n.cy=u/n.charge}function Gu(n,t){return ta.rebind(n,t,"sort","children","value"),n.nodes=n,n.links=ri,n}function Ku(n,t){for(var e=[n];null!=(n=e.pop());)if(t(n),(u=n.children)&&(r=u.length))for(var r,u;--r>=0;)e.push(u[r])}function Qu(n,t){for(var e=[n],r=[];null!=(n=e.pop());)if(r.push(n),(i=n.children)&&(u=i.length))for(var u,i,o=-1;++o<u;)e.push(i[o]);for(;null!=(n=r.pop());)t(n)}function ni(n){return n.children}function ti(n){return n.value}function ei(n,t){return t.value-n.value}function ri(n){return ta.merge(n.map(function(n){return(n.children||[]).map(function(t){return{source:n,target:t}})}))}function ui(n){return n.x}function ii(n){return n.y}function oi(n,t,e){n.y0=t,n.y=e}function ai(n){return ta.range(n.length)}function ci(n){for(var t=-1,e=n[0].length,r=[];++t<e;)r[t]=0;return r}function li(n){for(var t,e=1,r=0,u=n[0][1],i=n.length;i>e;++e)(t=n[e][1])>u&&(r=e,u=t);return r}function si(n){return n.reduce(fi,0)}function fi(n,t){return n+t[1]}function hi(n,t){return gi(n,Math.ceil(Math.log(t.length)/Math.LN2+1))}function gi(n,t){for(var e=-1,r=+n[0],u=(n[1]-r)/t,i=[];++e<=t;)i[e]=u*e+r;return i}function pi(n){return[ta.min(n),ta.max(n)]}function vi(n,t){return n.value-t.value}function di(n,t){var e=n._pack_next;n._pack_next=t,t._pack_prev=n,t._pack_next=e,e._pack_prev=t}function mi(n,t){n._pack_next=t,t._pack_prev=n}function yi(n,t){var e=t.x-n.x,r=t.y-n.y,u=n.r+t.r;return.999*u*u>e*e+r*r}function Mi(n){function t(n){s=Math.min(n.x-n.r,s),f=Math.max(n.x+n.r,f),h=Math.min(n.y-n.r,h),g=Math.max(n.y+n.r,g)}if((e=n.children)&&(l=e.length)){var e,r,u,i,o,a,c,l,s=1/0,f=-1/0,h=1/0,g=-1/0;if(e.forEach(xi),r=e[0],r.x=-r.r,r.y=0,t(r),l>1&&(u=e[1],u.x=u.r,u.y=0,t(u),l>2))for(i=e[2],wi(r,u,i),t(i),di(r,i),r._pack_prev=i,di(i,u),u=r._pack_next,o=3;l>o;o++){wi(r,u,i=e[o]);var p=0,v=1,d=1;for(a=u._pack_next;a!==u;a=a._pack_next,v++)if(yi(a,i)){p=1;break}if(1==p)for(c=r._pack_prev;c!==a._pack_prev&&!yi(c,i);c=c._pack_prev,d++);p?(d>v||v==d&&u.r<r.r?mi(r,u=a):mi(r=c,u),o--):(di(r,i),u=i,t(i))}var m=(s+f)/2,y=(h+g)/2,M=0;for(o=0;l>o;o++)i=e[o],i.x-=m,i.y-=y,M=Math.max(M,i.r+Math.sqrt(i.x*i.x+i.y*i.y));n.r=M,e.forEach(bi)}}function xi(n){n._pack_next=n._pack_prev=n}function bi(n){delete n._pack_next,delete n._pack_prev}function _i(n,t,e,r){var u=n.children;if(n.x=t+=r*n.x,n.y=e+=r*n.y,n.r*=r,u)for(var i=-1,o=u.length;++i<o;)_i(u[i],t,e,r)}function wi(n,t,e){var r=n.r+e.r,u=t.x-n.x,i=t.y-n.y;if(r&&(u||i)){var o=t.r+e.r,a=u*u+i*i;o*=o,r*=r;var c=.5+(r-o)/(2*a),l=Math.sqrt(Math.max(0,2*o*(r+a)-(r-=a)*r-o*o))/(2*a);e.x=n.x+c*u+l*i,e.y=n.y+c*i-l*u}else e.x=n.x+r,e.y=n.y}function Si(n,t){return n.parent==t.parent?1:2}function ki(n){var t=n.children;return t.length?t[0]:n.t}function Ei(n){var t,e=n.children;return(t=e.length)?e[t-1]:n.t}function Ai(n,t,e){var r=e/(t.i-n.i);t.c-=r,t.s+=e,n.c+=r,t.z+=e,t.m+=e}function Ni(n){for(var t,e=0,r=0,u=n.children,i=u.length;--i>=0;)t=u[i],t.z+=e,t.m+=e,e+=t.s+(r+=t.c)}function Ci(n,t,e){return n.a.parent===t.parent?n.a:e}function zi(n){return 1+ta.max(n,function(n){return n.y})}function qi(n){return n.reduce(function(n,t){return n+t.x},0)/n.length}function Li(n){var t=n.children;return t&&t.length?Li(t[0]):n}function Ti(n){var t,e=n.children;return e&&(t=e.length)?Ti(e[t-1]):n}function Ri(n){return{x:n.x,y:n.y,dx:n.dx,dy:n.dy}}function Di(n,t){var e=n.x+t[3],r=n.y+t[0],u=n.dx-t[1]-t[3],i=n.dy-t[0]-t[2];return 0>u&&(e+=u/2,u=0),0>i&&(r+=i/2,i=0),{x:e,y:r,dx:u,dy:i}}function Pi(n){var t=n[0],e=n[n.length-1];return e>t?[t,e]:[e,t]}function Ui(n){return n.rangeExtent?n.rangeExtent():Pi(n.range())}function ji(n,t,e,r){var u=e(n[0],n[1]),i=r(t[0],t[1]);return function(n){return i(u(n))}}function Fi(n,t){var e,r=0,u=n.length-1,i=n[r],o=n[u];return i>o&&(e=r,r=u,u=e,e=i,i=o,o=e),n[r]=t.floor(i),n[u]=t.ceil(o),n}function Hi(n){return n?{floor:function(t){return Math.floor(t/n)*n},ceil:function(t){return Math.ceil(t/n)*n}}:ml}function Oi(n,t,e,r){var u=[],i=[],o=0,a=Math.min(n.length,t.length)-1;for(n[a]<n[0]&&(n=n.slice().reverse(),t=t.slice().reverse());++o<=a;)u.push(e(n[o-1],n[o])),i.push(r(t[o-1],t[o]));return function(t){var e=ta.bisect(n,t,1,a)-1;return i[e](u[e](t))}}function Ii(n,t,e,r){function u(){var u=Math.min(n.length,t.length)>2?Oi:ji,c=r?Iu:Ou;return o=u(n,t,c,e),a=u(t,n,c,mu),i}function i(n){return o(n)}var o,a;return i.invert=function(n){return a(n)},i.domain=function(t){return arguments.length?(n=t.map(Number),u()):n},i.range=function(n){return arguments.length?(t=n,u()):t},i.rangeRound=function(n){return i.range(n).interpolate(Du)},i.clamp=function(n){return arguments.length?(r=n,u()):r},i.interpolate=function(n){return arguments.length?(e=n,u()):e},i.ticks=function(t){return Xi(n,t)},i.tickFormat=function(t,e){return $i(n,t,e)},i.nice=function(t){return Zi(n,t),u()},i.copy=function(){return Ii(n,t,e,r)},u()}function Yi(n,t){return ta.rebind(n,t,"range","rangeRound","interpolate","clamp")}function Zi(n,t){return Fi(n,Hi(Vi(n,t)[2]))}function Vi(n,t){null==t&&(t=10);var e=Pi(n),r=e[1]-e[0],u=Math.pow(10,Math.floor(Math.log(r/t)/Math.LN10)),i=t/r*u;return.15>=i?u*=10:.35>=i?u*=5:.75>=i&&(u*=2),e[0]=Math.ceil(e[0]/u)*u,e[1]=Math.floor(e[1]/u)*u+.5*u,e[2]=u,e}function Xi(n,t){return ta.range.apply(ta,Vi(n,t))}function $i(n,t,e){var r=Vi(n,t);if(e){var u=ic.exec(e);if(u.shift(),"s"===u[8]){var i=ta.formatPrefix(Math.max(ga(r[0]),ga(r[1])));return u[7]||(u[7]="."+Bi(i.scale(r[2]))),u[8]="f",e=ta.format(u.join("")),function(n){return e(i.scale(n))+i.symbol}}u[7]||(u[7]="."+Wi(u[8],r)),e=u.join("")}else e=",."+Bi(r[2])+"f";return ta.format(e)}function Bi(n){return-Math.floor(Math.log(n)/Math.LN10+.01)}function Wi(n,t){var e=Bi(t[2]);return n in yl?Math.abs(e-Bi(Math.max(ga(t[0]),ga(t[1]))))+ +("e"!==n):e-2*("%"===n)}function Ji(n,t,e,r){function u(n){return(e?Math.log(0>n?0:n):-Math.log(n>0?0:-n))/Math.log(t)}function i(n){return e?Math.pow(t,n):-Math.pow(t,-n)}function o(t){return n(u(t))}return o.invert=function(t){return i(n.invert(t))},o.domain=function(t){return arguments.length?(e=t[0]>=0,n.domain((r=t.map(Number)).map(u)),o):r},o.base=function(e){return arguments.length?(t=+e,n.domain(r.map(u)),o):t},o.nice=function(){var t=Fi(r.map(u),e?Math:xl);return n.domain(t),r=t.map(i),o},o.ticks=function(){var n=Pi(r),o=[],a=n[0],c=n[1],l=Math.floor(u(a)),s=Math.ceil(u(c)),f=t%1?2:t;if(isFinite(s-l)){if(e){for(;s>l;l++)for(var h=1;f>h;h++)o.push(i(l)*h);o.push(i(l))}else for(o.push(i(l));l++<s;)for(var h=f-1;h>0;h--)o.push(i(l)*h);for(l=0;o[l]<a;l++);for(s=o.length;o[s-1]>c;s--);o=o.slice(l,s)}return o},o.tickFormat=function(n,t){if(!arguments.length)return Ml;arguments.length<2?t=Ml:"function"!=typeof t&&(t=ta.format(t));var r,a=Math.max(.1,n/o.ticks().length),c=e?(r=1e-12,Math.ceil):(r=-1e-12,Math.floor);return function(n){return n/i(c(u(n)+r))<=a?t(n):""}},o.copy=function(){return Ji(n.copy(),t,e,r)},Yi(o,n)}function Gi(n,t,e){function r(t){return n(u(t))}var u=Ki(t),i=Ki(1/t);return r.invert=function(t){return i(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain((e=t.map(Number)).map(u)),r):e},r.ticks=function(n){return Xi(e,n)},r.tickFormat=function(n,t){return $i(e,n,t)},r.nice=function(n){return r.domain(Zi(e,n))},r.exponent=function(o){return arguments.length?(u=Ki(t=o),i=Ki(1/t),n.domain(e.map(u)),r):t},r.copy=function(){return Gi(n.copy(),t,e)},Yi(r,n)}function Ki(n){return function(t){return 0>t?-Math.pow(-t,n):Math.pow(t,n)}}function Qi(n,t){function e(e){return i[((u.get(e)||("range"===t.t?u.set(e,n.push(e)):0/0))-1)%i.length]}function r(t,e){return ta.range(n.length).map(function(n){return t+e*n})}var u,i,o;return e.domain=function(r){if(!arguments.length)return n;n=[],u=new l;for(var i,o=-1,a=r.length;++o<a;)u.has(i=r[o])||u.set(i,n.push(i));return e[t.t].apply(e,t.a)},e.range=function(n){return arguments.length?(i=n,o=0,t={t:"range",a:arguments},e):i},e.rangePoints=function(u,a){arguments.length<2&&(a=0);var c=u[0],l=u[1],s=n.length<2?(c=(c+l)/2,0):(l-c)/(n.length-1+a);return i=r(c+s*a/2,s),o=0,t={t:"rangePoints",a:arguments},e},e.rangeRoundPoints=function(u,a){arguments.length<2&&(a=0);var c=u[0],l=u[1],s=n.length<2?(c=l=Math.round((c+l)/2),0):(l-c)/(n.length-1+a)|0;return i=r(c+Math.round(s*a/2+(l-c-(n.length-1+a)*s)/2),s),o=0,t={t:"rangeRoundPoints",a:arguments},e},e.rangeBands=function(u,a,c){arguments.length<2&&(a=0),arguments.length<3&&(c=a);var l=u[1]<u[0],s=u[l-0],f=u[1-l],h=(f-s)/(n.length-a+2*c);return i=r(s+h*c,h),l&&i.reverse(),o=h*(1-a),t={t:"rangeBands",a:arguments},e},e.rangeRoundBands=function(u,a,c){arguments.length<2&&(a=0),arguments.length<3&&(c=a);var l=u[1]<u[0],s=u[l-0],f=u[1-l],h=Math.floor((f-s)/(n.length-a+2*c));return i=r(s+Math.round((f-s-(n.length-a)*h)/2),h),l&&i.reverse(),o=Math.round(h*(1-a)),t={t:"rangeRoundBands",a:arguments},e},e.rangeBand=function(){return o},e.rangeExtent=function(){return Pi(t.a[0])},e.copy=function(){return Qi(n,t)},e.domain(n)}function no(n,t){function i(){var e=0,r=t.length;for(a=[];++e<r;)a[e-1]=ta.quantile(n,e/r);return o}function o(n){return isNaN(n=+n)?void 0:t[ta.bisect(a,n)]}var a;return o.domain=function(t){return arguments.length?(n=t.map(r).filter(u).sort(e),i()):n},o.range=function(n){return arguments.length?(t=n,i()):t},o.quantiles=function(){return a},o.invertExtent=function(e){return e=t.indexOf(e),0>e?[0/0,0/0]:[e>0?a[e-1]:n[0],e<a.length?a[e]:n[n.length-1]]},o.copy=function(){return no(n,t)},i()}function to(n,t,e){function r(t){return e[Math.max(0,Math.min(o,Math.floor(i*(t-n))))]}function u(){return i=e.length/(t-n),o=e.length-1,r}var i,o;return r.domain=function(e){return arguments.length?(n=+e[0],t=+e[e.length-1],u()):[n,t]},r.range=function(n){return arguments.length?(e=n,u()):e},r.invertExtent=function(t){return t=e.indexOf(t),t=0>t?0/0:t/i+n,[t,t+1/i]},r.copy=function(){return to(n,t,e)},u()}function eo(n,t){function e(e){return e>=e?t[ta.bisect(n,e)]:void 0}return e.domain=function(t){return arguments.length?(n=t,e):n},e.range=function(n){return arguments.length?(t=n,e):t},e.invertExtent=function(e){return e=t.indexOf(e),[n[e-1],n[e]]},e.copy=function(){return eo(n,t)},e}function ro(n){function t(n){return+n}return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=e.map(t),t):n},t.ticks=function(t){return Xi(n,t)},t.tickFormat=function(t,e){return $i(n,t,e)},t.copy=function(){return ro(n)},t}function uo(){return 0}function io(n){return n.innerRadius}function oo(n){return n.outerRadius}function ao(n){return n.startAngle}function co(n){return n.endAngle}function lo(n){return n&&n.padAngle}function so(n,t,e,r){return(n-e)*t-(t-r)*n>0?0:1}function fo(n,t,e,r,u){var i=n[0]-t[0],o=n[1]-t[1],a=(u?r:-r)/Math.sqrt(i*i+o*o),c=a*o,l=-a*i,s=n[0]+c,f=n[1]+l,h=t[0]+c,g=t[1]+l,p=(s+h)/2,v=(f+g)/2,d=h-s,m=g-f,y=d*d+m*m,M=e-r,x=s*g-h*f,b=(0>m?-1:1)*Math.sqrt(M*M*y-x*x),_=(x*m-d*b)/y,w=(-x*d-m*b)/y,S=(x*m+d*b)/y,k=(-x*d+m*b)/y,E=_-p,A=w-v,N=S-p,C=k-v;return E*E+A*A>N*N+C*C&&(_=S,w=k),[[_-c,w-l],[_*e/M,w*e/M]]}function ho(n){function t(t){function o(){l.push("M",i(n(s),a))}for(var c,l=[],s=[],f=-1,h=t.length,g=Et(e),p=Et(r);++f<h;)u.call(this,c=t[f],f)?s.push([+g.call(this,c,f),+p.call(this,c,f)]):s.length&&(o(),s=[]);return s.length&&o(),l.length?l.join(""):null}var e=Ar,r=Nr,u=Ne,i=go,o=i.key,a=.7;return t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t.defined=function(n){return arguments.length?(u=n,t):u},t.interpolate=function(n){return arguments.length?(o="function"==typeof n?i=n:(i=El.get(n)||go).key,t):o},t.tension=function(n){return arguments.length?(a=n,t):a},t}function go(n){return n.join("L")}function po(n){return go(n)+"Z"}function vo(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("H",(r[0]+(r=n[t])[0])/2,"V",r[1]);return e>1&&u.push("H",r[0]),u.join("")}function mo(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("V",(r=n[t])[1],"H",r[0]);return u.join("")}function yo(n){for(var t=0,e=n.length,r=n[0],u=[r[0],",",r[1]];++t<e;)u.push("H",(r=n[t])[0],"V",r[1]);return u.join("")}function Mo(n,t){return n.length<4?go(n):n[1]+_o(n.slice(1,-1),wo(n,t))}function xo(n,t){return n.length<3?go(n):n[0]+_o((n.push(n[0]),n),wo([n[n.length-2]].concat(n,[n[1]]),t))}function bo(n,t){return n.length<3?go(n):n[0]+_o(n,wo(n,t))}function _o(n,t){if(t.length<1||n.length!=t.length&&n.length!=t.length+2)return go(n);var e=n.length!=t.length,r="",u=n[0],i=n[1],o=t[0],a=o,c=1;if(e&&(r+="Q"+(i[0]-2*o[0]/3)+","+(i[1]-2*o[1]/3)+","+i[0]+","+i[1],u=n[1],c=2),t.length>1){a=t[1],i=n[c],c++,r+="C"+(u[0]+o[0])+","+(u[1]+o[1])+","+(i[0]-a[0])+","+(i[1]-a[1])+","+i[0]+","+i[1];for(var l=2;l<t.length;l++,c++)i=n[c],a=t[l],r+="S"+(i[0]-a[0])+","+(i[1]-a[1])+","+i[0]+","+i[1]}if(e){var s=n[c];r+="Q"+(i[0]+2*a[0]/3)+","+(i[1]+2*a[1]/3)+","+s[0]+","+s[1]}return r}function wo(n,t){for(var e,r=[],u=(1-t)/2,i=n[0],o=n[1],a=1,c=n.length;++a<c;)e=i,i=o,o=n[a],r.push([u*(o[0]-e[0]),u*(o[1]-e[1])]);return r}function So(n){if(n.length<3)return go(n);var t=1,e=n.length,r=n[0],u=r[0],i=r[1],o=[u,u,u,(r=n[1])[0]],a=[i,i,i,r[1]],c=[u,",",i,"L",No(Cl,o),",",No(Cl,a)];for(n.push(n[e-1]);++t<=e;)r=n[t],o.shift(),o.push(r[0]),a.shift(),a.push(r[1]),Co(c,o,a);return n.pop(),c.push("L",r),c.join("")}function ko(n){if(n.length<4)return go(n);for(var t,e=[],r=-1,u=n.length,i=[0],o=[0];++r<3;)t=n[r],i.push(t[0]),o.push(t[1]);for(e.push(No(Cl,i)+","+No(Cl,o)),--r;++r<u;)t=n[r],i.shift(),i.push(t[0]),o.shift(),o.push(t[1]),Co(e,i,o);return e.join("")}function Eo(n){for(var t,e,r=-1,u=n.length,i=u+4,o=[],a=[];++r<4;)e=n[r%u],o.push(e[0]),a.push(e[1]);for(t=[No(Cl,o),",",No(Cl,a)],--r;++r<i;)e=n[r%u],o.shift(),o.push(e[0]),a.shift(),a.push(e[1]),Co(t,o,a);return t.join("")}function Ao(n,t){var e=n.length-1;if(e)for(var r,u,i=n[0][0],o=n[0][1],a=n[e][0]-i,c=n[e][1]-o,l=-1;++l<=e;)r=n[l],u=l/e,r[0]=t*r[0]+(1-t)*(i+u*a),r[1]=t*r[1]+(1-t)*(o+u*c);return So(n)}function No(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]*t[3]}function Co(n,t,e){n.push("C",No(Al,t),",",No(Al,e),",",No(Nl,t),",",No(Nl,e),",",No(Cl,t),",",No(Cl,e))}function zo(n,t){return(t[1]-n[1])/(t[0]-n[0])}function qo(n){for(var t=0,e=n.length-1,r=[],u=n[0],i=n[1],o=r[0]=zo(u,i);++t<e;)r[t]=(o+(o=zo(u=i,i=n[t+1])))/2;return r[t]=o,r}function Lo(n){for(var t,e,r,u,i=[],o=qo(n),a=-1,c=n.length-1;++a<c;)t=zo(n[a],n[a+1]),ga(t)<Ca?o[a]=o[a+1]=0:(e=o[a]/t,r=o[a+1]/t,u=e*e+r*r,u>9&&(u=3*t/Math.sqrt(u),o[a]=u*e,o[a+1]=u*r));for(a=-1;++a<=c;)u=(n[Math.min(c,a+1)][0]-n[Math.max(0,a-1)][0])/(6*(1+o[a]*o[a])),i.push([u||0,o[a]*u||0]);return i}function To(n){return n.length<3?go(n):n[0]+_o(n,Lo(n))}function Ro(n){for(var t,e,r,u=-1,i=n.length;++u<i;)t=n[u],e=t[0],r=t[1]-Ra,t[0]=e*Math.cos(r),t[1]=e*Math.sin(r);return n}function Do(n){function t(t){function c(){v.push("M",a(n(m),f),s,l(n(d.reverse()),f),"Z")}for(var h,g,p,v=[],d=[],m=[],y=-1,M=t.length,x=Et(e),b=Et(u),_=e===r?function(){return g}:Et(r),w=u===i?function(){return p}:Et(i);++y<M;)o.call(this,h=t[y],y)?(d.push([g=+x.call(this,h,y),p=+b.call(this,h,y)]),m.push([+_.call(this,h,y),+w.call(this,h,y)])):d.length&&(c(),d=[],m=[]);return d.length&&c(),v.length?v.join(""):null}var e=Ar,r=Ar,u=0,i=Nr,o=Ne,a=go,c=a.key,l=a,s="L",f=.7;return t.x=function(n){return arguments.length?(e=r=n,t):r},t.x0=function(n){return arguments.length?(e=n,t):e},t.x1=function(n){return arguments.length?(r=n,t):r
},t.y=function(n){return arguments.length?(u=i=n,t):i},t.y0=function(n){return arguments.length?(u=n,t):u},t.y1=function(n){return arguments.length?(i=n,t):i},t.defined=function(n){return arguments.length?(o=n,t):o},t.interpolate=function(n){return arguments.length?(c="function"==typeof n?a=n:(a=El.get(n)||go).key,l=a.reverse||a,s=a.closed?"M":"L",t):c},t.tension=function(n){return arguments.length?(f=n,t):f},t}function Po(n){return n.radius}function Uo(n){return[n.x,n.y]}function jo(n){return function(){var t=n.apply(this,arguments),e=t[0],r=t[1]-Ra;return[e*Math.cos(r),e*Math.sin(r)]}}function Fo(){return 64}function Ho(){return"circle"}function Oo(n){var t=Math.sqrt(n/qa);return"M0,"+t+"A"+t+","+t+" 0 1,1 0,"+-t+"A"+t+","+t+" 0 1,1 0,"+t+"Z"}function Io(n){return function(){var t,e;(t=this[n])&&(e=t[t.active])&&(--t.count?delete t[t.active]:delete this[n],t.active+=.5,e.event&&e.event.interrupt.call(this,this.__data__,e.index))}}function Yo(n,t,e){return ya(n,Pl),n.namespace=t,n.id=e,n}function Zo(n,t,e,r){var u=n.id,i=n.namespace;return Y(n,"function"==typeof e?function(n,o,a){n[i][u].tween.set(t,r(e.call(n,n.__data__,o,a)))}:(e=r(e),function(n){n[i][u].tween.set(t,e)}))}function Vo(n){return null==n&&(n=""),function(){this.textContent=n}}function Xo(n){return null==n?"__transition__":"__transition_"+n+"__"}function $o(n,t,e,r,u){var i=n[e]||(n[e]={active:0,count:0}),o=i[r];if(!o){var a=u.time;o=i[r]={tween:new l,time:a,delay:u.delay,duration:u.duration,ease:u.ease,index:t},u=null,++i.count,ta.timer(function(u){function c(e){if(i.active>r)return s();var u=i[i.active];u&&(--i.count,delete i[i.active],u.event&&u.event.interrupt.call(n,n.__data__,u.index)),i.active=r,o.event&&o.event.start.call(n,n.__data__,t),o.tween.forEach(function(e,r){(r=r.call(n,n.__data__,t))&&v.push(r)}),h=o.ease,f=o.duration,ta.timer(function(){return p.c=l(e||1)?Ne:l,1},0,a)}function l(e){if(i.active!==r)return 1;for(var u=e/f,a=h(u),c=v.length;c>0;)v[--c].call(n,a);return u>=1?(o.event&&o.event.end.call(n,n.__data__,t),s()):void 0}function s(){return--i.count?delete i[r]:delete n[e],1}var f,h,g=o.delay,p=ec,v=[];return p.t=g+a,u>=g?c(u-g):void(p.c=c)},0,a)}}function Bo(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate("+(isFinite(r)?r:e(n))+",0)"})}function Wo(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate(0,"+(isFinite(r)?r:e(n))+")"})}function Jo(n){return n.toISOString()}function Go(n,t,e){function r(t){return n(t)}function u(n,e){var r=n[1]-n[0],u=r/e,i=ta.bisect(Vl,u);return i==Vl.length?[t.year,Vi(n.map(function(n){return n/31536e6}),e)[2]]:i?t[u/Vl[i-1]<Vl[i]/u?i-1:i]:[Bl,Vi(n,e)[2]]}return r.invert=function(t){return Ko(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain(t),r):n.domain().map(Ko)},r.nice=function(n,t){function e(e){return!isNaN(e)&&!n.range(e,Ko(+e+1),t).length}var i=r.domain(),o=Pi(i),a=null==n?u(o,10):"number"==typeof n&&u(o,n);return a&&(n=a[0],t=a[1]),r.domain(Fi(i,t>1?{floor:function(t){for(;e(t=n.floor(t));)t=Ko(t-1);return t},ceil:function(t){for(;e(t=n.ceil(t));)t=Ko(+t+1);return t}}:n))},r.ticks=function(n,t){var e=Pi(r.domain()),i=null==n?u(e,10):"number"==typeof n?u(e,n):!n.range&&[{range:n},t];return i&&(n=i[0],t=i[1]),n.range(e[0],Ko(+e[1]+1),1>t?1:t)},r.tickFormat=function(){return e},r.copy=function(){return Go(n.copy(),t,e)},Yi(r,n)}function Ko(n){return new Date(n)}function Qo(n){return JSON.parse(n.responseText)}function na(n){var t=ua.createRange();return t.selectNode(ua.body),t.createContextualFragment(n.responseText)}var ta={version:"3.5.5"},ea=[].slice,ra=function(n){return ea.call(n)},ua=this.document;if(ua)try{ra(ua.documentElement.childNodes)[0].nodeType}catch(ia){ra=function(n){for(var t=n.length,e=new Array(t);t--;)e[t]=n[t];return e}}if(Date.now||(Date.now=function(){return+new Date}),ua)try{ua.createElement("DIV").style.setProperty("opacity",0,"")}catch(oa){var aa=this.Element.prototype,ca=aa.setAttribute,la=aa.setAttributeNS,sa=this.CSSStyleDeclaration.prototype,fa=sa.setProperty;aa.setAttribute=function(n,t){ca.call(this,n,t+"")},aa.setAttributeNS=function(n,t,e){la.call(this,n,t,e+"")},sa.setProperty=function(n,t,e){fa.call(this,n,t+"",e)}}ta.ascending=e,ta.descending=function(n,t){return n>t?-1:t>n?1:t>=n?0:0/0},ta.min=function(n,t){var e,r,u=-1,i=n.length;if(1===arguments.length){for(;++u<i;)if(null!=(r=n[u])&&r>=r){e=r;break}for(;++u<i;)null!=(r=n[u])&&e>r&&(e=r)}else{for(;++u<i;)if(null!=(r=t.call(n,n[u],u))&&r>=r){e=r;break}for(;++u<i;)null!=(r=t.call(n,n[u],u))&&e>r&&(e=r)}return e},ta.max=function(n,t){var e,r,u=-1,i=n.length;if(1===arguments.length){for(;++u<i;)if(null!=(r=n[u])&&r>=r){e=r;break}for(;++u<i;)null!=(r=n[u])&&r>e&&(e=r)}else{for(;++u<i;)if(null!=(r=t.call(n,n[u],u))&&r>=r){e=r;break}for(;++u<i;)null!=(r=t.call(n,n[u],u))&&r>e&&(e=r)}return e},ta.extent=function(n,t){var e,r,u,i=-1,o=n.length;if(1===arguments.length){for(;++i<o;)if(null!=(r=n[i])&&r>=r){e=u=r;break}for(;++i<o;)null!=(r=n[i])&&(e>r&&(e=r),r>u&&(u=r))}else{for(;++i<o;)if(null!=(r=t.call(n,n[i],i))&&r>=r){e=u=r;break}for(;++i<o;)null!=(r=t.call(n,n[i],i))&&(e>r&&(e=r),r>u&&(u=r))}return[e,u]},ta.sum=function(n,t){var e,r=0,i=n.length,o=-1;if(1===arguments.length)for(;++o<i;)u(e=+n[o])&&(r+=e);else for(;++o<i;)u(e=+t.call(n,n[o],o))&&(r+=e);return r},ta.mean=function(n,t){var e,i=0,o=n.length,a=-1,c=o;if(1===arguments.length)for(;++a<o;)u(e=r(n[a]))?i+=e:--c;else for(;++a<o;)u(e=r(t.call(n,n[a],a)))?i+=e:--c;return c?i/c:void 0},ta.quantile=function(n,t){var e=(n.length-1)*t+1,r=Math.floor(e),u=+n[r-1],i=e-r;return i?u+i*(n[r]-u):u},ta.median=function(n,t){var i,o=[],a=n.length,c=-1;if(1===arguments.length)for(;++c<a;)u(i=r(n[c]))&&o.push(i);else for(;++c<a;)u(i=r(t.call(n,n[c],c)))&&o.push(i);return o.length?ta.quantile(o.sort(e),.5):void 0},ta.variance=function(n,t){var e,i,o=n.length,a=0,c=0,l=-1,s=0;if(1===arguments.length)for(;++l<o;)u(e=r(n[l]))&&(i=e-a,a+=i/++s,c+=i*(e-a));else for(;++l<o;)u(e=r(t.call(n,n[l],l)))&&(i=e-a,a+=i/++s,c+=i*(e-a));return s>1?c/(s-1):void 0},ta.deviation=function(){var n=ta.variance.apply(this,arguments);return n?Math.sqrt(n):n};var ha=i(e);ta.bisectLeft=ha.left,ta.bisect=ta.bisectRight=ha.right,ta.bisector=function(n){return i(1===n.length?function(t,r){return e(n(t),r)}:n)},ta.shuffle=function(n,t,e){(i=arguments.length)<3&&(e=n.length,2>i&&(t=0));for(var r,u,i=e-t;i;)u=Math.random()*i--|0,r=n[i+t],n[i+t]=n[u+t],n[u+t]=r;return n},ta.permute=function(n,t){for(var e=t.length,r=new Array(e);e--;)r[e]=n[t[e]];return r},ta.pairs=function(n){for(var t,e=0,r=n.length-1,u=n[0],i=new Array(0>r?0:r);r>e;)i[e]=[t=u,u=n[++e]];return i},ta.zip=function(){if(!(r=arguments.length))return[];for(var n=-1,t=ta.min(arguments,o),e=new Array(t);++n<t;)for(var r,u=-1,i=e[n]=new Array(r);++u<r;)i[u]=arguments[u][n];return e},ta.transpose=function(n){return ta.zip.apply(ta,n)},ta.keys=function(n){var t=[];for(var e in n)t.push(e);return t},ta.values=function(n){var t=[];for(var e in n)t.push(n[e]);return t},ta.entries=function(n){var t=[];for(var e in n)t.push({key:e,value:n[e]});return t},ta.merge=function(n){for(var t,e,r,u=n.length,i=-1,o=0;++i<u;)o+=n[i].length;for(e=new Array(o);--u>=0;)for(r=n[u],t=r.length;--t>=0;)e[--o]=r[t];return e};var ga=Math.abs;ta.range=function(n,t,e){if(arguments.length<3&&(e=1,arguments.length<2&&(t=n,n=0)),(t-n)/e===1/0)throw new Error("infinite range");var r,u=[],i=a(ga(e)),o=-1;if(n*=i,t*=i,e*=i,0>e)for(;(r=n+e*++o)>t;)u.push(r/i);else for(;(r=n+e*++o)<t;)u.push(r/i);return u},ta.map=function(n,t){var e=new l;if(n instanceof l)n.forEach(function(n,t){e.set(n,t)});else if(Array.isArray(n)){var r,u=-1,i=n.length;if(1===arguments.length)for(;++u<i;)e.set(u,n[u]);else for(;++u<i;)e.set(t.call(n,r=n[u],u),r)}else for(var o in n)e.set(o,n[o]);return e};var pa="__proto__",va="\x00";c(l,{has:h,get:function(n){return this._[s(n)]},set:function(n,t){return this._[s(n)]=t},remove:g,keys:p,values:function(){var n=[];for(var t in this._)n.push(this._[t]);return n},entries:function(){var n=[];for(var t in this._)n.push({key:f(t),value:this._[t]});return n},size:v,empty:d,forEach:function(n){for(var t in this._)n.call(this,f(t),this._[t])}}),ta.nest=function(){function n(t,o,a){if(a>=i.length)return r?r.call(u,o):e?o.sort(e):o;for(var c,s,f,h,g=-1,p=o.length,v=i[a++],d=new l;++g<p;)(h=d.get(c=v(s=o[g])))?h.push(s):d.set(c,[s]);return t?(s=t(),f=function(e,r){s.set(e,n(t,r,a))}):(s={},f=function(e,r){s[e]=n(t,r,a)}),d.forEach(f),s}function t(n,e){if(e>=i.length)return n;var r=[],u=o[e++];return n.forEach(function(n,u){r.push({key:n,values:t(u,e)})}),u?r.sort(function(n,t){return u(n.key,t.key)}):r}var e,r,u={},i=[],o=[];return u.map=function(t,e){return n(e,t,0)},u.entries=function(e){return t(n(ta.map,e,0),0)},u.key=function(n){return i.push(n),u},u.sortKeys=function(n){return o[i.length-1]=n,u},u.sortValues=function(n){return e=n,u},u.rollup=function(n){return r=n,u},u},ta.set=function(n){var t=new m;if(n)for(var e=0,r=n.length;r>e;++e)t.add(n[e]);return t},c(m,{has:h,add:function(n){return this._[s(n+="")]=!0,n},remove:g,values:p,size:v,empty:d,forEach:function(n){for(var t in this._)n.call(this,f(t))}}),ta.behavior={},ta.rebind=function(n,t){for(var e,r=1,u=arguments.length;++r<u;)n[e=arguments[r]]=M(n,t,t[e]);return n};var da=["webkit","ms","moz","Moz","o","O"];ta.dispatch=function(){for(var n=new _,t=-1,e=arguments.length;++t<e;)n[arguments[t]]=w(n);return n},_.prototype.on=function(n,t){var e=n.indexOf("."),r="";if(e>=0&&(r=n.slice(e+1),n=n.slice(0,e)),n)return arguments.length<2?this[n].on(r):this[n].on(r,t);if(2===arguments.length){if(null==t)for(n in this)this.hasOwnProperty(n)&&this[n].on(r,null);return this}},ta.event=null,ta.requote=function(n){return n.replace(ma,"\\$&")};var ma=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,ya={}.__proto__?function(n,t){n.__proto__=t}:function(n,t){for(var e in t)n[e]=t[e]},Ma=function(n,t){return t.querySelector(n)},xa=function(n,t){return t.querySelectorAll(n)},ba=function(n,t){var e=n.matches||n[x(n,"matchesSelector")];return(ba=function(n,t){return e.call(n,t)})(n,t)};"function"==typeof Sizzle&&(Ma=function(n,t){return Sizzle(n,t)[0]||null},xa=Sizzle,ba=Sizzle.matchesSelector),ta.selection=function(){return ta.select(ua.documentElement)};var _a=ta.selection.prototype=[];_a.select=function(n){var t,e,r,u,i=[];n=N(n);for(var o=-1,a=this.length;++o<a;){i.push(t=[]),t.parentNode=(r=this[o]).parentNode;for(var c=-1,l=r.length;++c<l;)(u=r[c])?(t.push(e=n.call(u,u.__data__,c,o)),e&&"__data__"in u&&(e.__data__=u.__data__)):t.push(null)}return A(i)},_a.selectAll=function(n){var t,e,r=[];n=C(n);for(var u=-1,i=this.length;++u<i;)for(var o=this[u],a=-1,c=o.length;++a<c;)(e=o[a])&&(r.push(t=ra(n.call(e,e.__data__,a,u))),t.parentNode=e);return A(r)};var wa={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};ta.ns={prefix:wa,qualify:function(n){var t=n.indexOf(":"),e=n;return t>=0&&(e=n.slice(0,t),n=n.slice(t+1)),wa.hasOwnProperty(e)?{space:wa[e],local:n}:n}},_a.attr=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node();return n=ta.ns.qualify(n),n.local?e.getAttributeNS(n.space,n.local):e.getAttribute(n)}for(t in n)this.each(z(t,n[t]));return this}return this.each(z(n,t))},_a.classed=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node(),r=(n=T(n)).length,u=-1;if(t=e.classList){for(;++u<r;)if(!t.contains(n[u]))return!1}else for(t=e.getAttribute("class");++u<r;)if(!L(n[u]).test(t))return!1;return!0}for(t in n)this.each(R(t,n[t]));return this}return this.each(R(n,t))},_a.style=function(n,e,r){var u=arguments.length;if(3>u){if("string"!=typeof n){2>u&&(e="");for(r in n)this.each(P(r,n[r],e));return this}if(2>u){var i=this.node();return t(i).getComputedStyle(i,null).getPropertyValue(n)}r=""}return this.each(P(n,e,r))},_a.property=function(n,t){if(arguments.length<2){if("string"==typeof n)return this.node()[n];for(t in n)this.each(U(t,n[t]));return this}return this.each(U(n,t))},_a.text=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.textContent=null==t?"":t}:null==n?function(){this.textContent=""}:function(){this.textContent=n}):this.node().textContent},_a.html=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.innerHTML=null==t?"":t}:null==n?function(){this.innerHTML=""}:function(){this.innerHTML=n}):this.node().innerHTML},_a.append=function(n){return n=j(n),this.select(function(){return this.appendChild(n.apply(this,arguments))})},_a.insert=function(n,t){return n=j(n),t=N(t),this.select(function(){return this.insertBefore(n.apply(this,arguments),t.apply(this,arguments)||null)})},_a.remove=function(){return this.each(F)},_a.data=function(n,t){function e(n,e){var r,u,i,o=n.length,f=e.length,h=Math.min(o,f),g=new Array(f),p=new Array(f),v=new Array(o);if(t){var d,m=new l,y=new Array(o);for(r=-1;++r<o;)m.has(d=t.call(u=n[r],u.__data__,r))?v[r]=u:m.set(d,u),y[r]=d;for(r=-1;++r<f;)(u=m.get(d=t.call(e,i=e[r],r)))?u!==!0&&(g[r]=u,u.__data__=i):p[r]=H(i),m.set(d,!0);for(r=-1;++r<o;)m.get(y[r])!==!0&&(v[r]=n[r])}else{for(r=-1;++r<h;)u=n[r],i=e[r],u?(u.__data__=i,g[r]=u):p[r]=H(i);for(;f>r;++r)p[r]=H(e[r]);for(;o>r;++r)v[r]=n[r]}p.update=g,p.parentNode=g.parentNode=v.parentNode=n.parentNode,a.push(p),c.push(g),s.push(v)}var r,u,i=-1,o=this.length;if(!arguments.length){for(n=new Array(o=(r=this[0]).length);++i<o;)(u=r[i])&&(n[i]=u.__data__);return n}var a=Z([]),c=A([]),s=A([]);if("function"==typeof n)for(;++i<o;)e(r=this[i],n.call(r,r.parentNode.__data__,i));else for(;++i<o;)e(r=this[i],n);return c.enter=function(){return a},c.exit=function(){return s},c},_a.datum=function(n){return arguments.length?this.property("__data__",n):this.property("__data__")},_a.filter=function(n){var t,e,r,u=[];"function"!=typeof n&&(n=O(n));for(var i=0,o=this.length;o>i;i++){u.push(t=[]),t.parentNode=(e=this[i]).parentNode;for(var a=0,c=e.length;c>a;a++)(r=e[a])&&n.call(r,r.__data__,a,i)&&t.push(r)}return A(u)},_a.order=function(){for(var n=-1,t=this.length;++n<t;)for(var e,r=this[n],u=r.length-1,i=r[u];--u>=0;)(e=r[u])&&(i&&i!==e.nextSibling&&i.parentNode.insertBefore(e,i),i=e);return this},_a.sort=function(n){n=I.apply(this,arguments);for(var t=-1,e=this.length;++t<e;)this[t].sort(n);return this.order()},_a.each=function(n){return Y(this,function(t,e,r){n.call(t,t.__data__,e,r)})},_a.call=function(n){var t=ra(arguments);return n.apply(t[0]=this,t),this},_a.empty=function(){return!this.node()},_a.node=function(){for(var n=0,t=this.length;t>n;n++)for(var e=this[n],r=0,u=e.length;u>r;r++){var i=e[r];if(i)return i}return null},_a.size=function(){var n=0;return Y(this,function(){++n}),n};var Sa=[];ta.selection.enter=Z,ta.selection.enter.prototype=Sa,Sa.append=_a.append,Sa.empty=_a.empty,Sa.node=_a.node,Sa.call=_a.call,Sa.size=_a.size,Sa.select=function(n){for(var t,e,r,u,i,o=[],a=-1,c=this.length;++a<c;){r=(u=this[a]).update,o.push(t=[]),t.parentNode=u.parentNode;for(var l=-1,s=u.length;++l<s;)(i=u[l])?(t.push(r[l]=e=n.call(u.parentNode,i.__data__,l,a)),e.__data__=i.__data__):t.push(null)}return A(o)},Sa.insert=function(n,t){return arguments.length<2&&(t=V(this)),_a.insert.call(this,n,t)},ta.select=function(t){var e;return"string"==typeof t?(e=[Ma(t,ua)],e.parentNode=ua.documentElement):(e=[t],e.parentNode=n(t)),A([e])},ta.selectAll=function(n){var t;return"string"==typeof n?(t=ra(xa(n,ua)),t.parentNode=ua.documentElement):(t=n,t.parentNode=null),A([t])},_a.on=function(n,t,e){var r=arguments.length;if(3>r){if("string"!=typeof n){2>r&&(t=!1);for(e in n)this.each(X(e,n[e],t));return this}if(2>r)return(r=this.node()["__on"+n])&&r._;e=!1}return this.each(X(n,t,e))};var ka=ta.map({mouseenter:"mouseover",mouseleave:"mouseout"});ua&&ka.forEach(function(n){"on"+n in ua&&ka.remove(n)});var Ea,Aa=0;ta.mouse=function(n){return J(n,k())};var Na=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;ta.touch=function(n,t,e){if(arguments.length<3&&(e=t,t=k().changedTouches),t)for(var r,u=0,i=t.length;i>u;++u)if((r=t[u]).identifier===e)return J(n,r)},ta.behavior.drag=function(){function n(){this.on("mousedown.drag",i).on("touchstart.drag",o)}function e(n,t,e,i,o){return function(){function a(){var n,e,r=t(h,v);r&&(n=r[0]-M[0],e=r[1]-M[1],p|=n|e,M=r,g({type:"drag",x:r[0]+l[0],y:r[1]+l[1],dx:n,dy:e}))}function c(){t(h,v)&&(m.on(i+d,null).on(o+d,null),y(p&&ta.event.target===f),g({type:"dragend"}))}var l,s=this,f=ta.event.target,h=s.parentNode,g=r.of(s,arguments),p=0,v=n(),d=".drag"+(null==v?"":"-"+v),m=ta.select(e(f)).on(i+d,a).on(o+d,c),y=W(f),M=t(h,v);u?(l=u.apply(s,arguments),l=[l.x-M[0],l.y-M[1]]):l=[0,0],g({type:"dragstart"})}}var r=E(n,"drag","dragstart","dragend"),u=null,i=e(b,ta.mouse,t,"mousemove","mouseup"),o=e(G,ta.touch,y,"touchmove","touchend");return n.origin=function(t){return arguments.length?(u=t,n):u},ta.rebind(n,r,"on")},ta.touches=function(n,t){return arguments.length<2&&(t=k().touches),t?ra(t).map(function(t){var e=J(n,t);return e.identifier=t.identifier,e}):[]};var Ca=1e-6,za=Ca*Ca,qa=Math.PI,La=2*qa,Ta=La-Ca,Ra=qa/2,Da=qa/180,Pa=180/qa,Ua=Math.SQRT2,ja=2,Fa=4;ta.interpolateZoom=function(n,t){function e(n){var t=n*y;if(m){var e=rt(v),o=i/(ja*h)*(e*ut(Ua*t+v)-et(v));return[r+o*l,u+o*s,i*e/rt(Ua*t+v)]}return[r+n*l,u+n*s,i*Math.exp(Ua*t)]}var r=n[0],u=n[1],i=n[2],o=t[0],a=t[1],c=t[2],l=o-r,s=a-u,f=l*l+s*s,h=Math.sqrt(f),g=(c*c-i*i+Fa*f)/(2*i*ja*h),p=(c*c-i*i-Fa*f)/(2*c*ja*h),v=Math.log(Math.sqrt(g*g+1)-g),d=Math.log(Math.sqrt(p*p+1)-p),m=d-v,y=(m||Math.log(c/i))/Ua;return e.duration=1e3*y,e},ta.behavior.zoom=function(){function n(n){n.on(q,f).on(Oa+".zoom",g).on("dblclick.zoom",p).on(R,h)}function e(n){return[(n[0]-k.x)/k.k,(n[1]-k.y)/k.k]}function r(n){return[n[0]*k.k+k.x,n[1]*k.k+k.y]}function u(n){k.k=Math.max(N[0],Math.min(N[1],n))}function i(n,t){t=r(t),k.x+=n[0]-t[0],k.y+=n[1]-t[1]}function o(t,e,r,o){t.__chart__={x:k.x,y:k.y,k:k.k},u(Math.pow(2,o)),i(d=e,r),t=ta.select(t),C>0&&(t=t.transition().duration(C)),t.call(n.event)}function a(){b&&b.domain(x.range().map(function(n){return(n-k.x)/k.k}).map(x.invert)),w&&w.domain(_.range().map(function(n){return(n-k.y)/k.k}).map(_.invert))}function c(n){z++||n({type:"zoomstart"})}function l(n){a(),n({type:"zoom",scale:k.k,translate:[k.x,k.y]})}function s(n){--z||n({type:"zoomend"}),d=null}function f(){function n(){f=1,i(ta.mouse(u),g),l(a)}function r(){h.on(L,null).on(T,null),p(f&&ta.event.target===o),s(a)}var u=this,o=ta.event.target,a=D.of(u,arguments),f=0,h=ta.select(t(u)).on(L,n).on(T,r),g=e(ta.mouse(u)),p=W(u);Dl.call(u),c(a)}function h(){function n(){var n=ta.touches(p);return g=k.k,n.forEach(function(n){n.identifier in d&&(d[n.identifier]=e(n))}),n}function t(){var t=ta.event.target;ta.select(t).on(x,r).on(b,a),_.push(t);for(var e=ta.event.changedTouches,u=0,i=e.length;i>u;++u)d[e[u].identifier]=null;var c=n(),l=Date.now();if(1===c.length){if(500>l-M){var s=c[0];o(p,s,d[s.identifier],Math.floor(Math.log(k.k)/Math.LN2)+1),S()}M=l}else if(c.length>1){var s=c[0],f=c[1],h=s[0]-f[0],g=s[1]-f[1];m=h*h+g*g}}function r(){var n,t,e,r,o=ta.touches(p);Dl.call(p);for(var a=0,c=o.length;c>a;++a,r=null)if(e=o[a],r=d[e.identifier]){if(t)break;n=e,t=r}if(r){var s=(s=e[0]-n[0])*s+(s=e[1]-n[1])*s,f=m&&Math.sqrt(s/m);n=[(n[0]+e[0])/2,(n[1]+e[1])/2],t=[(t[0]+r[0])/2,(t[1]+r[1])/2],u(f*g)}M=null,i(n,t),l(v)}function a(){if(ta.event.touches.length){for(var t=ta.event.changedTouches,e=0,r=t.length;r>e;++e)delete d[t[e].identifier];for(var u in d)return void n()}ta.selectAll(_).on(y,null),w.on(q,f).on(R,h),E(),s(v)}var g,p=this,v=D.of(p,arguments),d={},m=0,y=".zoom-"+ta.event.changedTouches[0].identifier,x="touchmove"+y,b="touchend"+y,_=[],w=ta.select(p),E=W(p);t(),c(v),w.on(q,null).on(R,t)}function g(){var n=D.of(this,arguments);y?clearTimeout(y):(v=e(d=m||ta.mouse(this)),Dl.call(this),c(n)),y=setTimeout(function(){y=null,s(n)},50),S(),u(Math.pow(2,.002*Ha())*k.k),i(d,v),l(n)}function p(){var n=ta.mouse(this),t=Math.log(k.k)/Math.LN2;o(this,n,e(n),ta.event.shiftKey?Math.ceil(t)-1:Math.floor(t)+1)}var v,d,m,y,M,x,b,_,w,k={x:0,y:0,k:1},A=[960,500],N=Ia,C=250,z=0,q="mousedown.zoom",L="mousemove.zoom",T="mouseup.zoom",R="touchstart.zoom",D=E(n,"zoomstart","zoom","zoomend");return Oa||(Oa="onwheel"in ua?(Ha=function(){return-ta.event.deltaY*(ta.event.deltaMode?120:1)},"wheel"):"onmousewheel"in ua?(Ha=function(){return ta.event.wheelDelta},"mousewheel"):(Ha=function(){return-ta.event.detail},"MozMousePixelScroll")),n.event=function(n){n.each(function(){var n=D.of(this,arguments),t=k;Tl?ta.select(this).transition().each("start.zoom",function(){k=this.__chart__||{x:0,y:0,k:1},c(n)}).tween("zoom:zoom",function(){var e=A[0],r=A[1],u=d?d[0]:e/2,i=d?d[1]:r/2,o=ta.interpolateZoom([(u-k.x)/k.k,(i-k.y)/k.k,e/k.k],[(u-t.x)/t.k,(i-t.y)/t.k,e/t.k]);return function(t){var r=o(t),a=e/r[2];this.__chart__=k={x:u-r[0]*a,y:i-r[1]*a,k:a},l(n)}}).each("interrupt.zoom",function(){s(n)}).each("end.zoom",function(){s(n)}):(this.__chart__=k,c(n),l(n),s(n))})},n.translate=function(t){return arguments.length?(k={x:+t[0],y:+t[1],k:k.k},a(),n):[k.x,k.y]},n.scale=function(t){return arguments.length?(k={x:k.x,y:k.y,k:+t},a(),n):k.k},n.scaleExtent=function(t){return arguments.length?(N=null==t?Ia:[+t[0],+t[1]],n):N},n.center=function(t){return arguments.length?(m=t&&[+t[0],+t[1]],n):m},n.size=function(t){return arguments.length?(A=t&&[+t[0],+t[1]],n):A},n.duration=function(t){return arguments.length?(C=+t,n):C},n.x=function(t){return arguments.length?(b=t,x=t.copy(),k={x:0,y:0,k:1},n):b},n.y=function(t){return arguments.length?(w=t,_=t.copy(),k={x:0,y:0,k:1},n):w},ta.rebind(n,D,"on")};var Ha,Oa,Ia=[0,1/0];ta.color=ot,ot.prototype.toString=function(){return this.rgb()+""},ta.hsl=at;var Ya=at.prototype=new ot;Ya.brighter=function(n){return n=Math.pow(.7,arguments.length?n:1),new at(this.h,this.s,this.l/n)},Ya.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new at(this.h,this.s,n*this.l)},Ya.rgb=function(){return ct(this.h,this.s,this.l)},ta.hcl=lt;var Za=lt.prototype=new ot;Za.brighter=function(n){return new lt(this.h,this.c,Math.min(100,this.l+Va*(arguments.length?n:1)))},Za.darker=function(n){return new lt(this.h,this.c,Math.max(0,this.l-Va*(arguments.length?n:1)))},Za.rgb=function(){return st(this.h,this.c,this.l).rgb()},ta.lab=ft;var Va=18,Xa=.95047,$a=1,Ba=1.08883,Wa=ft.prototype=new ot;Wa.brighter=function(n){return new ft(Math.min(100,this.l+Va*(arguments.length?n:1)),this.a,this.b)},Wa.darker=function(n){return new ft(Math.max(0,this.l-Va*(arguments.length?n:1)),this.a,this.b)},Wa.rgb=function(){return ht(this.l,this.a,this.b)},ta.rgb=mt;var Ja=mt.prototype=new ot;Ja.brighter=function(n){n=Math.pow(.7,arguments.length?n:1);var t=this.r,e=this.g,r=this.b,u=30;return t||e||r?(t&&u>t&&(t=u),e&&u>e&&(e=u),r&&u>r&&(r=u),new mt(Math.min(255,t/n),Math.min(255,e/n),Math.min(255,r/n))):new mt(u,u,u)},Ja.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new mt(n*this.r,n*this.g,n*this.b)},Ja.hsl=function(){return _t(this.r,this.g,this.b)},Ja.toString=function(){return"#"+xt(this.r)+xt(this.g)+xt(this.b)};var Ga=ta.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});Ga.forEach(function(n,t){Ga.set(n,yt(t))}),ta.functor=Et,ta.xhr=At(y),ta.dsv=function(n,t){function e(n,e,i){arguments.length<3&&(i=e,e=null);var o=Nt(n,t,null==e?r:u(e),i);return o.row=function(n){return arguments.length?o.response(null==(e=n)?r:u(n)):e},o}function r(n){return e.parse(n.responseText)}function u(n){return function(t){return e.parse(t.responseText,n)}}function i(t){return t.map(o).join(n)}function o(n){return a.test(n)?'"'+n.replace(/\"/g,'""')+'"':n}var a=new RegExp('["'+n+"\n]"),c=n.charCodeAt(0);return e.parse=function(n,t){var r;return e.parseRows(n,function(n,e){if(r)return r(n,e-1);var u=new Function("d","return {"+n.map(function(n,t){return JSON.stringify(n)+": d["+t+"]"}).join(",")+"}");r=t?function(n,e){return t(u(n),e)}:u})},e.parseRows=function(n,t){function e(){if(s>=l)return o;if(u)return u=!1,i;var t=s;if(34===n.charCodeAt(t)){for(var e=t;e++<l;)if(34===n.charCodeAt(e)){if(34!==n.charCodeAt(e+1))break;++e}s=e+2;var r=n.charCodeAt(e+1);return 13===r?(u=!0,10===n.charCodeAt(e+2)&&++s):10===r&&(u=!0),n.slice(t+1,e).replace(/""/g,'"')}for(;l>s;){var r=n.charCodeAt(s++),a=1;if(10===r)u=!0;else if(13===r)u=!0,10===n.charCodeAt(s)&&(++s,++a);else if(r!==c)continue;return n.slice(t,s-a)}return n.slice(t)}for(var r,u,i={},o={},a=[],l=n.length,s=0,f=0;(r=e())!==o;){for(var h=[];r!==i&&r!==o;)h.push(r),r=e();t&&null==(h=t(h,f++))||a.push(h)}return a},e.format=function(t){if(Array.isArray(t[0]))return e.formatRows(t);var r=new m,u=[];return t.forEach(function(n){for(var t in n)r.has(t)||u.push(r.add(t))}),[u.map(o).join(n)].concat(t.map(function(t){return u.map(function(n){return o(t[n])}).join(n)})).join("\n")},e.formatRows=function(n){return n.map(i).join("\n")},e},ta.csv=ta.dsv(",","text/csv"),ta.tsv=ta.dsv("	","text/tab-separated-values");var Ka,Qa,nc,tc,ec,rc=this[x(this,"requestAnimationFrame")]||function(n){setTimeout(n,17)};ta.timer=function(n,t,e){var r=arguments.length;2>r&&(t=0),3>r&&(e=Date.now());var u=e+t,i={c:n,t:u,f:!1,n:null};Qa?Qa.n=i:Ka=i,Qa=i,nc||(tc=clearTimeout(tc),nc=1,rc(qt))},ta.timer.flush=function(){Lt(),Tt()},ta.round=function(n,t){return t?Math.round(n*(t=Math.pow(10,t)))/t:Math.round(n)};var uc=["y","z","a","f","p","n","\xb5","m","","k","M","G","T","P","E","Z","Y"].map(Dt);ta.formatPrefix=function(n,t){var e=0;return n&&(0>n&&(n*=-1),t&&(n=ta.round(n,Rt(n,t))),e=1+Math.floor(1e-12+Math.log(n)/Math.LN10),e=Math.max(-24,Math.min(24,3*Math.floor((e-1)/3)))),uc[8+e/3]};var ic=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,oc=ta.map({b:function(n){return n.toString(2)},c:function(n){return String.fromCharCode(n)},o:function(n){return n.toString(8)},x:function(n){return n.toString(16)},X:function(n){return n.toString(16).toUpperCase()},g:function(n,t){return n.toPrecision(t)},e:function(n,t){return n.toExponential(t)},f:function(n,t){return n.toFixed(t)},r:function(n,t){return(n=ta.round(n,Rt(n,t))).toFixed(Math.max(0,Math.min(20,Rt(n*(1+1e-15),t))))}}),ac=ta.time={},cc=Date;jt.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){lc.setUTCDate.apply(this._,arguments)},setDay:function(){lc.setUTCDay.apply(this._,arguments)},setFullYear:function(){lc.setUTCFullYear.apply(this._,arguments)},setHours:function(){lc.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){lc.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){lc.setUTCMinutes.apply(this._,arguments)},setMonth:function(){lc.setUTCMonth.apply(this._,arguments)},setSeconds:function(){lc.setUTCSeconds.apply(this._,arguments)},setTime:function(){lc.setTime.apply(this._,arguments)}};var lc=Date.prototype;ac.year=Ft(function(n){return n=ac.day(n),n.setMonth(0,1),n},function(n,t){n.setFullYear(n.getFullYear()+t)},function(n){return n.getFullYear()}),ac.years=ac.year.range,ac.years.utc=ac.year.utc.range,ac.day=Ft(function(n){var t=new cc(2e3,0);return t.setFullYear(n.getFullYear(),n.getMonth(),n.getDate()),t},function(n,t){n.setDate(n.getDate()+t)},function(n){return n.getDate()-1}),ac.days=ac.day.range,ac.days.utc=ac.day.utc.range,ac.dayOfYear=function(n){var t=ac.year(n);return Math.floor((n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(n,t){t=7-t;var e=ac[n]=Ft(function(n){return(n=ac.day(n)).setDate(n.getDate()-(n.getDay()+t)%7),n},function(n,t){n.setDate(n.getDate()+7*Math.floor(t))},function(n){var e=ac.year(n).getDay();return Math.floor((ac.dayOfYear(n)+(e+t)%7)/7)-(e!==t)});ac[n+"s"]=e.range,ac[n+"s"].utc=e.utc.range,ac[n+"OfYear"]=function(n){var e=ac.year(n).getDay();return Math.floor((ac.dayOfYear(n)+(e+t)%7)/7)}}),ac.week=ac.sunday,ac.weeks=ac.sunday.range,ac.weeks.utc=ac.sunday.utc.range,ac.weekOfYear=ac.sundayOfYear;var sc={"-":"",_:" ",0:"0"},fc=/^\s*\d+/,hc=/^%/;ta.locale=function(n){return{numberFormat:Pt(n),timeFormat:Ot(n)}};var gc=ta.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});ta.format=gc.numberFormat,ta.geo={},ce.prototype={s:0,t:0,add:function(n){le(n,this.t,pc),le(pc.s,this.s,this),this.s?this.t+=pc.t:this.s=pc.t
},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var pc=new ce;ta.geo.stream=function(n,t){n&&vc.hasOwnProperty(n.type)?vc[n.type](n,t):se(n,t)};var vc={Feature:function(n,t){se(n.geometry,t)},FeatureCollection:function(n,t){for(var e=n.features,r=-1,u=e.length;++r<u;)se(e[r].geometry,t)}},dc={Sphere:function(n,t){t.sphere()},Point:function(n,t){n=n.coordinates,t.point(n[0],n[1],n[2])},MultiPoint:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)n=e[r],t.point(n[0],n[1],n[2])},LineString:function(n,t){fe(n.coordinates,t,0)},MultiLineString:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)fe(e[r],t,0)},Polygon:function(n,t){he(n.coordinates,t)},MultiPolygon:function(n,t){for(var e=n.coordinates,r=-1,u=e.length;++r<u;)he(e[r],t)},GeometryCollection:function(n,t){for(var e=n.geometries,r=-1,u=e.length;++r<u;)se(e[r],t)}};ta.geo.area=function(n){return mc=0,ta.geo.stream(n,Mc),mc};var mc,yc=new ce,Mc={sphere:function(){mc+=4*qa},point:b,lineStart:b,lineEnd:b,polygonStart:function(){yc.reset(),Mc.lineStart=ge},polygonEnd:function(){var n=2*yc;mc+=0>n?4*qa+n:n,Mc.lineStart=Mc.lineEnd=Mc.point=b}};ta.geo.bounds=function(){function n(n,t){M.push(x=[s=n,h=n]),f>t&&(f=t),t>g&&(g=t)}function t(t,e){var r=pe([t*Da,e*Da]);if(m){var u=de(m,r),i=[u[1],-u[0],0],o=de(i,u);Me(o),o=xe(o);var c=t-p,l=c>0?1:-1,v=o[0]*Pa*l,d=ga(c)>180;if(d^(v>l*p&&l*t>v)){var y=o[1]*Pa;y>g&&(g=y)}else if(v=(v+360)%360-180,d^(v>l*p&&l*t>v)){var y=-o[1]*Pa;f>y&&(f=y)}else f>e&&(f=e),e>g&&(g=e);d?p>t?a(s,t)>a(s,h)&&(h=t):a(t,h)>a(s,h)&&(s=t):h>=s?(s>t&&(s=t),t>h&&(h=t)):t>p?a(s,t)>a(s,h)&&(h=t):a(t,h)>a(s,h)&&(s=t)}else n(t,e);m=r,p=t}function e(){b.point=t}function r(){x[0]=s,x[1]=h,b.point=n,m=null}function u(n,e){if(m){var r=n-p;y+=ga(r)>180?r+(r>0?360:-360):r}else v=n,d=e;Mc.point(n,e),t(n,e)}function i(){Mc.lineStart()}function o(){u(v,d),Mc.lineEnd(),ga(y)>Ca&&(s=-(h=180)),x[0]=s,x[1]=h,m=null}function a(n,t){return(t-=n)<0?t+360:t}function c(n,t){return n[0]-t[0]}function l(n,t){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var s,f,h,g,p,v,d,m,y,M,x,b={point:n,lineStart:e,lineEnd:r,polygonStart:function(){b.point=u,b.lineStart=i,b.lineEnd=o,y=0,Mc.polygonStart()},polygonEnd:function(){Mc.polygonEnd(),b.point=n,b.lineStart=e,b.lineEnd=r,0>yc?(s=-(h=180),f=-(g=90)):y>Ca?g=90:-Ca>y&&(f=-90),x[0]=s,x[1]=h}};return function(n){g=h=-(s=f=1/0),M=[],ta.geo.stream(n,b);var t=M.length;if(t){M.sort(c);for(var e,r=1,u=M[0],i=[u];t>r;++r)e=M[r],l(e[0],u)||l(e[1],u)?(a(u[0],e[1])>a(u[0],u[1])&&(u[1]=e[1]),a(e[0],u[1])>a(u[0],u[1])&&(u[0]=e[0])):i.push(u=e);for(var o,e,p=-1/0,t=i.length-1,r=0,u=i[t];t>=r;u=e,++r)e=i[r],(o=a(u[1],e[0]))>p&&(p=o,s=e[0],h=u[1])}return M=x=null,1/0===s||1/0===f?[[0/0,0/0],[0/0,0/0]]:[[s,f],[h,g]]}}(),ta.geo.centroid=function(n){xc=bc=_c=wc=Sc=kc=Ec=Ac=Nc=Cc=zc=0,ta.geo.stream(n,qc);var t=Nc,e=Cc,r=zc,u=t*t+e*e+r*r;return za>u&&(t=kc,e=Ec,r=Ac,Ca>bc&&(t=_c,e=wc,r=Sc),u=t*t+e*e+r*r,za>u)?[0/0,0/0]:[Math.atan2(e,t)*Pa,tt(r/Math.sqrt(u))*Pa]};var xc,bc,_c,wc,Sc,kc,Ec,Ac,Nc,Cc,zc,qc={sphere:b,point:_e,lineStart:Se,lineEnd:ke,polygonStart:function(){qc.lineStart=Ee},polygonEnd:function(){qc.lineStart=Se}},Lc=Le(Ne,Pe,je,[-qa,-qa/2]),Tc=1e9;ta.geo.clipExtent=function(){var n,t,e,r,u,i,o={stream:function(n){return u&&(u.valid=!1),u=i(n),u.valid=!0,u},extent:function(a){return arguments.length?(i=Ie(n=+a[0][0],t=+a[0][1],e=+a[1][0],r=+a[1][1]),u&&(u.valid=!1,u=null),o):[[n,t],[e,r]]}};return o.extent([[0,0],[960,500]])},(ta.geo.conicEqualArea=function(){return Ye(Ze)}).raw=Ze,ta.geo.albers=function(){return ta.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},ta.geo.albersUsa=function(){function n(n){var i=n[0],o=n[1];return t=null,e(i,o),t||(r(i,o),t)||u(i,o),t}var t,e,r,u,i=ta.geo.albers(),o=ta.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),a=ta.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c={point:function(n,e){t=[n,e]}};return n.invert=function(n){var t=i.scale(),e=i.translate(),r=(n[0]-e[0])/t,u=(n[1]-e[1])/t;return(u>=.12&&.234>u&&r>=-.425&&-.214>r?o:u>=.166&&.234>u&&r>=-.214&&-.115>r?a:i).invert(n)},n.stream=function(n){var t=i.stream(n),e=o.stream(n),r=a.stream(n);return{point:function(n,u){t.point(n,u),e.point(n,u),r.point(n,u)},sphere:function(){t.sphere(),e.sphere(),r.sphere()},lineStart:function(){t.lineStart(),e.lineStart(),r.lineStart()},lineEnd:function(){t.lineEnd(),e.lineEnd(),r.lineEnd()},polygonStart:function(){t.polygonStart(),e.polygonStart(),r.polygonStart()},polygonEnd:function(){t.polygonEnd(),e.polygonEnd(),r.polygonEnd()}}},n.precision=function(t){return arguments.length?(i.precision(t),o.precision(t),a.precision(t),n):i.precision()},n.scale=function(t){return arguments.length?(i.scale(t),o.scale(.35*t),a.scale(t),n.translate(i.translate())):i.scale()},n.translate=function(t){if(!arguments.length)return i.translate();var l=i.scale(),s=+t[0],f=+t[1];return e=i.translate(t).clipExtent([[s-.455*l,f-.238*l],[s+.455*l,f+.238*l]]).stream(c).point,r=o.translate([s-.307*l,f+.201*l]).clipExtent([[s-.425*l+Ca,f+.12*l+Ca],[s-.214*l-Ca,f+.234*l-Ca]]).stream(c).point,u=a.translate([s-.205*l,f+.212*l]).clipExtent([[s-.214*l+Ca,f+.166*l+Ca],[s-.115*l-Ca,f+.234*l-Ca]]).stream(c).point,n},n.scale(1070)};var Rc,Dc,Pc,Uc,jc,Fc,Hc={point:b,lineStart:b,lineEnd:b,polygonStart:function(){Dc=0,Hc.lineStart=Ve},polygonEnd:function(){Hc.lineStart=Hc.lineEnd=Hc.point=b,Rc+=ga(Dc/2)}},Oc={point:Xe,lineStart:b,lineEnd:b,polygonStart:b,polygonEnd:b},Ic={point:We,lineStart:Je,lineEnd:Ge,polygonStart:function(){Ic.lineStart=Ke},polygonEnd:function(){Ic.point=We,Ic.lineStart=Je,Ic.lineEnd=Ge}};ta.geo.path=function(){function n(n){return n&&("function"==typeof a&&i.pointRadius(+a.apply(this,arguments)),o&&o.valid||(o=u(i)),ta.geo.stream(n,o)),i.result()}function t(){return o=null,n}var e,r,u,i,o,a=4.5;return n.area=function(n){return Rc=0,ta.geo.stream(n,u(Hc)),Rc},n.centroid=function(n){return _c=wc=Sc=kc=Ec=Ac=Nc=Cc=zc=0,ta.geo.stream(n,u(Ic)),zc?[Nc/zc,Cc/zc]:Ac?[kc/Ac,Ec/Ac]:Sc?[_c/Sc,wc/Sc]:[0/0,0/0]},n.bounds=function(n){return jc=Fc=-(Pc=Uc=1/0),ta.geo.stream(n,u(Oc)),[[Pc,Uc],[jc,Fc]]},n.projection=function(n){return arguments.length?(u=(e=n)?n.stream||tr(n):y,t()):e},n.context=function(n){return arguments.length?(i=null==(r=n)?new $e:new Qe(n),"function"!=typeof a&&i.pointRadius(a),t()):r},n.pointRadius=function(t){return arguments.length?(a="function"==typeof t?t:(i.pointRadius(+t),+t),n):a},n.projection(ta.geo.albersUsa()).context(null)},ta.geo.transform=function(n){return{stream:function(t){var e=new er(t);for(var r in n)e[r]=n[r];return e}}},er.prototype={point:function(n,t){this.stream.point(n,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},ta.geo.projection=ur,ta.geo.projectionMutator=ir,(ta.geo.equirectangular=function(){return ur(ar)}).raw=ar.invert=ar,ta.geo.rotation=function(n){function t(t){return t=n(t[0]*Da,t[1]*Da),t[0]*=Pa,t[1]*=Pa,t}return n=lr(n[0]%360*Da,n[1]*Da,n.length>2?n[2]*Da:0),t.invert=function(t){return t=n.invert(t[0]*Da,t[1]*Da),t[0]*=Pa,t[1]*=Pa,t},t},cr.invert=ar,ta.geo.circle=function(){function n(){var n="function"==typeof r?r.apply(this,arguments):r,t=lr(-n[0]*Da,-n[1]*Da,0).invert,u=[];return e(null,null,1,{point:function(n,e){u.push(n=t(n,e)),n[0]*=Pa,n[1]*=Pa}}),{type:"Polygon",coordinates:[u]}}var t,e,r=[0,0],u=6;return n.origin=function(t){return arguments.length?(r=t,n):r},n.angle=function(r){return arguments.length?(e=gr((t=+r)*Da,u*Da),n):t},n.precision=function(r){return arguments.length?(e=gr(t*Da,(u=+r)*Da),n):u},n.angle(90)},ta.geo.distance=function(n,t){var e,r=(t[0]-n[0])*Da,u=n[1]*Da,i=t[1]*Da,o=Math.sin(r),a=Math.cos(r),c=Math.sin(u),l=Math.cos(u),s=Math.sin(i),f=Math.cos(i);return Math.atan2(Math.sqrt((e=f*o)*e+(e=l*s-c*f*a)*e),c*s+l*f*a)},ta.geo.graticule=function(){function n(){return{type:"MultiLineString",coordinates:t()}}function t(){return ta.range(Math.ceil(i/d)*d,u,d).map(h).concat(ta.range(Math.ceil(l/m)*m,c,m).map(g)).concat(ta.range(Math.ceil(r/p)*p,e,p).filter(function(n){return ga(n%d)>Ca}).map(s)).concat(ta.range(Math.ceil(a/v)*v,o,v).filter(function(n){return ga(n%m)>Ca}).map(f))}var e,r,u,i,o,a,c,l,s,f,h,g,p=10,v=p,d=90,m=360,y=2.5;return n.lines=function(){return t().map(function(n){return{type:"LineString",coordinates:n}})},n.outline=function(){return{type:"Polygon",coordinates:[h(i).concat(g(c).slice(1),h(u).reverse().slice(1),g(l).reverse().slice(1))]}},n.extent=function(t){return arguments.length?n.majorExtent(t).minorExtent(t):n.minorExtent()},n.majorExtent=function(t){return arguments.length?(i=+t[0][0],u=+t[1][0],l=+t[0][1],c=+t[1][1],i>u&&(t=i,i=u,u=t),l>c&&(t=l,l=c,c=t),n.precision(y)):[[i,l],[u,c]]},n.minorExtent=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],o=+t[1][1],r>e&&(t=r,r=e,e=t),a>o&&(t=a,a=o,o=t),n.precision(y)):[[r,a],[e,o]]},n.step=function(t){return arguments.length?n.majorStep(t).minorStep(t):n.minorStep()},n.majorStep=function(t){return arguments.length?(d=+t[0],m=+t[1],n):[d,m]},n.minorStep=function(t){return arguments.length?(p=+t[0],v=+t[1],n):[p,v]},n.precision=function(t){return arguments.length?(y=+t,s=vr(a,o,90),f=dr(r,e,y),h=vr(l,c,90),g=dr(i,u,y),n):y},n.majorExtent([[-180,-90+Ca],[180,90-Ca]]).minorExtent([[-180,-80-Ca],[180,80+Ca]])},ta.geo.greatArc=function(){function n(){return{type:"LineString",coordinates:[t||r.apply(this,arguments),e||u.apply(this,arguments)]}}var t,e,r=mr,u=yr;return n.distance=function(){return ta.geo.distance(t||r.apply(this,arguments),e||u.apply(this,arguments))},n.source=function(e){return arguments.length?(r=e,t="function"==typeof e?null:e,n):r},n.target=function(t){return arguments.length?(u=t,e="function"==typeof t?null:t,n):u},n.precision=function(){return arguments.length?n:0},n},ta.geo.interpolate=function(n,t){return Mr(n[0]*Da,n[1]*Da,t[0]*Da,t[1]*Da)},ta.geo.length=function(n){return Yc=0,ta.geo.stream(n,Zc),Yc};var Yc,Zc={sphere:b,point:b,lineStart:xr,lineEnd:b,polygonStart:b,polygonEnd:b},Vc=br(function(n){return Math.sqrt(2/(1+n))},function(n){return 2*Math.asin(n/2)});(ta.geo.azimuthalEqualArea=function(){return ur(Vc)}).raw=Vc;var Xc=br(function(n){var t=Math.acos(n);return t&&t/Math.sin(t)},y);(ta.geo.azimuthalEquidistant=function(){return ur(Xc)}).raw=Xc,(ta.geo.conicConformal=function(){return Ye(_r)}).raw=_r,(ta.geo.conicEquidistant=function(){return Ye(wr)}).raw=wr;var $c=br(function(n){return 1/n},Math.atan);(ta.geo.gnomonic=function(){return ur($c)}).raw=$c,Sr.invert=function(n,t){return[n,2*Math.atan(Math.exp(t))-Ra]},(ta.geo.mercator=function(){return kr(Sr)}).raw=Sr;var Bc=br(function(){return 1},Math.asin);(ta.geo.orthographic=function(){return ur(Bc)}).raw=Bc;var Wc=br(function(n){return 1/(1+n)},function(n){return 2*Math.atan(n)});(ta.geo.stereographic=function(){return ur(Wc)}).raw=Wc,Er.invert=function(n,t){return[-t,2*Math.atan(Math.exp(n))-Ra]},(ta.geo.transverseMercator=function(){var n=kr(Er),t=n.center,e=n.rotate;return n.center=function(n){return n?t([-n[1],n[0]]):(n=t(),[n[1],-n[0]])},n.rotate=function(n){return n?e([n[0],n[1],n.length>2?n[2]+90:90]):(n=e(),[n[0],n[1],n[2]-90])},e([0,0,90])}).raw=Er,ta.geom={},ta.geom.hull=function(n){function t(n){if(n.length<3)return[];var t,u=Et(e),i=Et(r),o=n.length,a=[],c=[];for(t=0;o>t;t++)a.push([+u.call(this,n[t],t),+i.call(this,n[t],t),t]);for(a.sort(zr),t=0;o>t;t++)c.push([a[t][0],-a[t][1]]);var l=Cr(a),s=Cr(c),f=s[0]===l[0],h=s[s.length-1]===l[l.length-1],g=[];for(t=l.length-1;t>=0;--t)g.push(n[a[l[t]][2]]);for(t=+f;t<s.length-h;++t)g.push(n[a[s[t]][2]]);return g}var e=Ar,r=Nr;return arguments.length?t(n):(t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t)},ta.geom.polygon=function(n){return ya(n,Jc),n};var Jc=ta.geom.polygon.prototype=[];Jc.area=function(){for(var n,t=-1,e=this.length,r=this[e-1],u=0;++t<e;)n=r,r=this[t],u+=n[1]*r[0]-n[0]*r[1];return.5*u},Jc.centroid=function(n){var t,e,r=-1,u=this.length,i=0,o=0,a=this[u-1];for(arguments.length||(n=-1/(6*this.area()));++r<u;)t=a,a=this[r],e=t[0]*a[1]-a[0]*t[1],i+=(t[0]+a[0])*e,o+=(t[1]+a[1])*e;return[i*n,o*n]},Jc.clip=function(n){for(var t,e,r,u,i,o,a=Tr(n),c=-1,l=this.length-Tr(this),s=this[l-1];++c<l;){for(t=n.slice(),n.length=0,u=this[c],i=t[(r=t.length-a)-1],e=-1;++e<r;)o=t[e],qr(o,s,u)?(qr(i,s,u)||n.push(Lr(i,o,s,u)),n.push(o)):qr(i,s,u)&&n.push(Lr(i,o,s,u)),i=o;a&&n.push(n[0]),s=u}return n};var Gc,Kc,Qc,nl,tl,el=[],rl=[];Or.prototype.prepare=function(){for(var n,t=this.edges,e=t.length;e--;)n=t[e].edge,n.b&&n.a||t.splice(e,1);return t.sort(Yr),t.length},Qr.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},nu.prototype={insert:function(n,t){var e,r,u;if(n){if(t.P=n,t.N=n.N,n.N&&(n.N.P=t),n.N=t,n.R){for(n=n.R;n.L;)n=n.L;n.L=t}else n.R=t;e=n}else this._?(n=uu(this._),t.P=null,t.N=n,n.P=n.L=t,e=n):(t.P=t.N=null,this._=t,e=null);for(t.L=t.R=null,t.U=e,t.C=!0,n=t;e&&e.C;)r=e.U,e===r.L?(u=r.R,u&&u.C?(e.C=u.C=!1,r.C=!0,n=r):(n===e.R&&(eu(this,e),n=e,e=n.U),e.C=!1,r.C=!0,ru(this,r))):(u=r.L,u&&u.C?(e.C=u.C=!1,r.C=!0,n=r):(n===e.L&&(ru(this,e),n=e,e=n.U),e.C=!1,r.C=!0,eu(this,r))),e=n.U;this._.C=!1},remove:function(n){n.N&&(n.N.P=n.P),n.P&&(n.P.N=n.N),n.N=n.P=null;var t,e,r,u=n.U,i=n.L,o=n.R;if(e=i?o?uu(o):i:o,u?u.L===n?u.L=e:u.R=e:this._=e,i&&o?(r=e.C,e.C=n.C,e.L=i,i.U=e,e!==o?(u=e.U,e.U=n.U,n=e.R,u.L=n,e.R=o,o.U=e):(e.U=u,u=e,n=e.R)):(r=n.C,n=e),n&&(n.U=u),!r){if(n&&n.C)return void(n.C=!1);do{if(n===this._)break;if(n===u.L){if(t=u.R,t.C&&(t.C=!1,u.C=!0,eu(this,u),t=u.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,ru(this,t),t=u.R),t.C=u.C,u.C=t.R.C=!1,eu(this,u),n=this._;break}}else if(t=u.L,t.C&&(t.C=!1,u.C=!0,ru(this,u),t=u.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,eu(this,t),t=u.L),t.C=u.C,u.C=t.L.C=!1,ru(this,u),n=this._;break}t.C=!0,n=u,u=u.U}while(!n.C);n&&(n.C=!1)}}},ta.geom.voronoi=function(n){function t(n){var t=new Array(n.length),r=a[0][0],u=a[0][1],i=a[1][0],o=a[1][1];return iu(e(n),a).cells.forEach(function(e,a){var c=e.edges,l=e.site,s=t[a]=c.length?c.map(function(n){var t=n.start();return[t.x,t.y]}):l.x>=r&&l.x<=i&&l.y>=u&&l.y<=o?[[r,o],[i,o],[i,u],[r,u]]:[];s.point=n[a]}),t}function e(n){return n.map(function(n,t){return{x:Math.round(i(n,t)/Ca)*Ca,y:Math.round(o(n,t)/Ca)*Ca,i:t}})}var r=Ar,u=Nr,i=r,o=u,a=ul;return n?t(n):(t.links=function(n){return iu(e(n)).edges.filter(function(n){return n.l&&n.r}).map(function(t){return{source:n[t.l.i],target:n[t.r.i]}})},t.triangles=function(n){var t=[];return iu(e(n)).cells.forEach(function(e,r){for(var u,i,o=e.site,a=e.edges.sort(Yr),c=-1,l=a.length,s=a[l-1].edge,f=s.l===o?s.r:s.l;++c<l;)u=s,i=f,s=a[c].edge,f=s.l===o?s.r:s.l,r<i.i&&r<f.i&&au(o,i,f)<0&&t.push([n[r],n[i.i],n[f.i]])}),t},t.x=function(n){return arguments.length?(i=Et(r=n),t):r},t.y=function(n){return arguments.length?(o=Et(u=n),t):u},t.clipExtent=function(n){return arguments.length?(a=null==n?ul:n,t):a===ul?null:a},t.size=function(n){return arguments.length?t.clipExtent(n&&[[0,0],n]):a===ul?null:a&&a[1]},t)};var ul=[[-1e6,-1e6],[1e6,1e6]];ta.geom.delaunay=function(n){return ta.geom.voronoi().triangles(n)},ta.geom.quadtree=function(n,t,e,r,u){function i(n){function i(n,t,e,r,u,i,o,a){if(!isNaN(e)&&!isNaN(r))if(n.leaf){var c=n.x,s=n.y;if(null!=c)if(ga(c-e)+ga(s-r)<.01)l(n,t,e,r,u,i,o,a);else{var f=n.point;n.x=n.y=n.point=null,l(n,f,c,s,u,i,o,a),l(n,t,e,r,u,i,o,a)}else n.x=e,n.y=r,n.point=t}else l(n,t,e,r,u,i,o,a)}function l(n,t,e,r,u,o,a,c){var l=.5*(u+a),s=.5*(o+c),f=e>=l,h=r>=s,g=h<<1|f;n.leaf=!1,n=n.nodes[g]||(n.nodes[g]=su()),f?u=l:a=l,h?o=s:c=s,i(n,t,e,r,u,o,a,c)}var s,f,h,g,p,v,d,m,y,M=Et(a),x=Et(c);if(null!=t)v=t,d=e,m=r,y=u;else if(m=y=-(v=d=1/0),f=[],h=[],p=n.length,o)for(g=0;p>g;++g)s=n[g],s.x<v&&(v=s.x),s.y<d&&(d=s.y),s.x>m&&(m=s.x),s.y>y&&(y=s.y),f.push(s.x),h.push(s.y);else for(g=0;p>g;++g){var b=+M(s=n[g],g),_=+x(s,g);v>b&&(v=b),d>_&&(d=_),b>m&&(m=b),_>y&&(y=_),f.push(b),h.push(_)}var w=m-v,S=y-d;w>S?y=d+w:m=v+S;var k=su();if(k.add=function(n){i(k,n,+M(n,++g),+x(n,g),v,d,m,y)},k.visit=function(n){fu(n,k,v,d,m,y)},k.find=function(n){return hu(k,n[0],n[1],v,d,m,y)},g=-1,null==t){for(;++g<p;)i(k,n[g],f[g],h[g],v,d,m,y);--g}else n.forEach(k.add);return f=h=n=s=null,k}var o,a=Ar,c=Nr;return(o=arguments.length)?(a=cu,c=lu,3===o&&(u=e,r=t,e=t=0),i(n)):(i.x=function(n){return arguments.length?(a=n,i):a},i.y=function(n){return arguments.length?(c=n,i):c},i.extent=function(n){return arguments.length?(null==n?t=e=r=u=null:(t=+n[0][0],e=+n[0][1],r=+n[1][0],u=+n[1][1]),i):null==t?null:[[t,e],[r,u]]},i.size=function(n){return arguments.length?(null==n?t=e=r=u=null:(t=e=0,r=+n[0],u=+n[1]),i):null==t?null:[r-t,u-e]},i)},ta.interpolateRgb=gu,ta.interpolateObject=pu,ta.interpolateNumber=vu,ta.interpolateString=du;var il=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ol=new RegExp(il.source,"g");ta.interpolate=mu,ta.interpolators=[function(n,t){var e=typeof t;return("string"===e?Ga.has(t)||/^(#|rgb\(|hsl\()/.test(t)?gu:du:t instanceof ot?gu:Array.isArray(t)?yu:"object"===e&&isNaN(t)?pu:vu)(n,t)}],ta.interpolateArray=yu;var al=function(){return y},cl=ta.map({linear:al,poly:ku,quad:function(){return _u},cubic:function(){return wu},sin:function(){return Eu},exp:function(){return Au},circle:function(){return Nu},elastic:Cu,back:zu,bounce:function(){return qu}}),ll=ta.map({"in":y,out:xu,"in-out":bu,"out-in":function(n){return bu(xu(n))}});ta.ease=function(n){var t=n.indexOf("-"),e=t>=0?n.slice(0,t):n,r=t>=0?n.slice(t+1):"in";return e=cl.get(e)||al,r=ll.get(r)||y,Mu(r(e.apply(null,ea.call(arguments,1))))},ta.interpolateHcl=Lu,ta.interpolateHsl=Tu,ta.interpolateLab=Ru,ta.interpolateRound=Du,ta.transform=function(n){var t=ua.createElementNS(ta.ns.prefix.svg,"g");return(ta.transform=function(n){if(null!=n){t.setAttribute("transform",n);var e=t.transform.baseVal.consolidate()}return new Pu(e?e.matrix:sl)})(n)},Pu.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var sl={a:1,b:0,c:0,d:1,e:0,f:0};ta.interpolateTransform=Hu,ta.layout={},ta.layout.bundle=function(){return function(n){for(var t=[],e=-1,r=n.length;++e<r;)t.push(Yu(n[e]));return t}},ta.layout.chord=function(){function n(){var n,l,f,h,g,p={},v=[],d=ta.range(i),m=[];for(e=[],r=[],n=0,h=-1;++h<i;){for(l=0,g=-1;++g<i;)l+=u[h][g];v.push(l),m.push(ta.range(i)),n+=l}for(o&&d.sort(function(n,t){return o(v[n],v[t])}),a&&m.forEach(function(n,t){n.sort(function(n,e){return a(u[t][n],u[t][e])})}),n=(La-s*i)/n,l=0,h=-1;++h<i;){for(f=l,g=-1;++g<i;){var y=d[h],M=m[y][g],x=u[y][M],b=l,_=l+=x*n;p[y+"-"+M]={index:y,subindex:M,startAngle:b,endAngle:_,value:x}}r[y]={index:y,startAngle:f,endAngle:l,value:(l-f)/n},l+=s}for(h=-1;++h<i;)for(g=h-1;++g<i;){var w=p[h+"-"+g],S=p[g+"-"+h];(w.value||S.value)&&e.push(w.value<S.value?{source:S,target:w}:{source:w,target:S})}c&&t()}function t(){e.sort(function(n,t){return c((n.source.value+n.target.value)/2,(t.source.value+t.target.value)/2)})}var e,r,u,i,o,a,c,l={},s=0;return l.matrix=function(n){return arguments.length?(i=(u=n)&&u.length,e=r=null,l):u},l.padding=function(n){return arguments.length?(s=n,e=r=null,l):s},l.sortGroups=function(n){return arguments.length?(o=n,e=r=null,l):o},l.sortSubgroups=function(n){return arguments.length?(a=n,e=null,l):a},l.sortChords=function(n){return arguments.length?(c=n,e&&t(),l):c},l.chords=function(){return e||n(),e},l.groups=function(){return r||n(),r},l},ta.layout.force=function(){function n(n){return function(t,e,r,u){if(t.point!==n){var i=t.cx-n.x,o=t.cy-n.y,a=u-e,c=i*i+o*o;if(c>a*a/d){if(p>c){var l=t.charge/c;n.px-=i*l,n.py-=o*l}return!0}if(t.point&&c&&p>c){var l=t.pointCharge/c;n.px-=i*l,n.py-=o*l}}return!t.charge}}function t(n){n.px=ta.event.x,n.py=ta.event.y,a.resume()}var e,r,u,i,o,a={},c=ta.dispatch("start","tick","end"),l=[1,1],s=.9,f=fl,h=hl,g=-30,p=gl,v=.1,d=.64,m=[],M=[];return a.tick=function(){if((r*=.99)<.005)return c.end({type:"end",alpha:r=0}),!0;var t,e,a,f,h,p,d,y,x,b=m.length,_=M.length;for(e=0;_>e;++e)a=M[e],f=a.source,h=a.target,y=h.x-f.x,x=h.y-f.y,(p=y*y+x*x)&&(p=r*i[e]*((p=Math.sqrt(p))-u[e])/p,y*=p,x*=p,h.x-=y*(d=f.weight/(h.weight+f.weight)),h.y-=x*d,f.x+=y*(d=1-d),f.y+=x*d);if((d=r*v)&&(y=l[0]/2,x=l[1]/2,e=-1,d))for(;++e<b;)a=m[e],a.x+=(y-a.x)*d,a.y+=(x-a.y)*d;if(g)for(Ju(t=ta.geom.quadtree(m),r,o),e=-1;++e<b;)(a=m[e]).fixed||t.visit(n(a));for(e=-1;++e<b;)a=m[e],a.fixed?(a.x=a.px,a.y=a.py):(a.x-=(a.px-(a.px=a.x))*s,a.y-=(a.py-(a.py=a.y))*s);c.tick({type:"tick",alpha:r})},a.nodes=function(n){return arguments.length?(m=n,a):m},a.links=function(n){return arguments.length?(M=n,a):M},a.size=function(n){return arguments.length?(l=n,a):l},a.linkDistance=function(n){return arguments.length?(f="function"==typeof n?n:+n,a):f},a.distance=a.linkDistance,a.linkStrength=function(n){return arguments.length?(h="function"==typeof n?n:+n,a):h},a.friction=function(n){return arguments.length?(s=+n,a):s},a.charge=function(n){return arguments.length?(g="function"==typeof n?n:+n,a):g},a.chargeDistance=function(n){return arguments.length?(p=n*n,a):Math.sqrt(p)},a.gravity=function(n){return arguments.length?(v=+n,a):v},a.theta=function(n){return arguments.length?(d=n*n,a):Math.sqrt(d)},a.alpha=function(n){return arguments.length?(n=+n,r?r=n>0?n:0:n>0&&(c.start({type:"start",alpha:r=n}),ta.timer(a.tick)),a):r},a.start=function(){function n(n,r){if(!e){for(e=new Array(c),a=0;c>a;++a)e[a]=[];for(a=0;s>a;++a){var u=M[a];e[u.source.index].push(u.target),e[u.target.index].push(u.source)}}for(var i,o=e[t],a=-1,l=o.length;++a<l;)if(!isNaN(i=o[a][n]))return i;return Math.random()*r}var t,e,r,c=m.length,s=M.length,p=l[0],v=l[1];for(t=0;c>t;++t)(r=m[t]).index=t,r.weight=0;for(t=0;s>t;++t)r=M[t],"number"==typeof r.source&&(r.source=m[r.source]),"number"==typeof r.target&&(r.target=m[r.target]),++r.source.weight,++r.target.weight;for(t=0;c>t;++t)r=m[t],isNaN(r.x)&&(r.x=n("x",p)),isNaN(r.y)&&(r.y=n("y",v)),isNaN(r.px)&&(r.px=r.x),isNaN(r.py)&&(r.py=r.y);if(u=[],"function"==typeof f)for(t=0;s>t;++t)u[t]=+f.call(this,M[t],t);else for(t=0;s>t;++t)u[t]=f;if(i=[],"function"==typeof h)for(t=0;s>t;++t)i[t]=+h.call(this,M[t],t);else for(t=0;s>t;++t)i[t]=h;if(o=[],"function"==typeof g)for(t=0;c>t;++t)o[t]=+g.call(this,m[t],t);else for(t=0;c>t;++t)o[t]=g;return a.resume()},a.resume=function(){return a.alpha(.1)},a.stop=function(){return a.alpha(0)},a.drag=function(){return e||(e=ta.behavior.drag().origin(y).on("dragstart.force",Xu).on("drag.force",t).on("dragend.force",$u)),arguments.length?void this.on("mouseover.force",Bu).on("mouseout.force",Wu).call(e):e},ta.rebind(a,c,"on")};var fl=20,hl=1,gl=1/0;ta.layout.hierarchy=function(){function n(u){var i,o=[u],a=[];for(u.depth=0;null!=(i=o.pop());)if(a.push(i),(l=e.call(n,i,i.depth))&&(c=l.length)){for(var c,l,s;--c>=0;)o.push(s=l[c]),s.parent=i,s.depth=i.depth+1;r&&(i.value=0),i.children=l}else r&&(i.value=+r.call(n,i,i.depth)||0),delete i.children;return Qu(u,function(n){var e,u;t&&(e=n.children)&&e.sort(t),r&&(u=n.parent)&&(u.value+=n.value)}),a}var t=ei,e=ni,r=ti;return n.sort=function(e){return arguments.length?(t=e,n):t},n.children=function(t){return arguments.length?(e=t,n):e},n.value=function(t){return arguments.length?(r=t,n):r},n.revalue=function(t){return r&&(Ku(t,function(n){n.children&&(n.value=0)}),Qu(t,function(t){var e;t.children||(t.value=+r.call(n,t,t.depth)||0),(e=t.parent)&&(e.value+=t.value)})),t},n},ta.layout.partition=function(){function n(t,e,r,u){var i=t.children;if(t.x=e,t.y=t.depth*u,t.dx=r,t.dy=u,i&&(o=i.length)){var o,a,c,l=-1;for(r=t.value?r/t.value:0;++l<o;)n(a=i[l],e,c=a.value*r,u),e+=c}}function t(n){var e=n.children,r=0;if(e&&(u=e.length))for(var u,i=-1;++i<u;)r=Math.max(r,t(e[i]));return 1+r}function e(e,i){var o=r.call(this,e,i);return n(o[0],0,u[0],u[1]/t(o[0])),o}var r=ta.layout.hierarchy(),u=[1,1];return e.size=function(n){return arguments.length?(u=n,e):u},Gu(e,r)},ta.layout.pie=function(){function n(o){var a,c=o.length,l=o.map(function(e,r){return+t.call(n,e,r)}),s=+("function"==typeof r?r.apply(this,arguments):r),f=("function"==typeof u?u.apply(this,arguments):u)-s,h=Math.min(Math.abs(f)/c,+("function"==typeof i?i.apply(this,arguments):i)),g=h*(0>f?-1:1),p=(f-c*g)/ta.sum(l),v=ta.range(c),d=[];return null!=e&&v.sort(e===pl?function(n,t){return l[t]-l[n]}:function(n,t){return e(o[n],o[t])}),v.forEach(function(n){d[n]={data:o[n],value:a=l[n],startAngle:s,endAngle:s+=a*p+g,padAngle:h}}),d}var t=Number,e=pl,r=0,u=La,i=0;return n.value=function(e){return arguments.length?(t=e,n):t},n.sort=function(t){return arguments.length?(e=t,n):e},n.startAngle=function(t){return arguments.length?(r=t,n):r},n.endAngle=function(t){return arguments.length?(u=t,n):u},n.padAngle=function(t){return arguments.length?(i=t,n):i},n};var pl={};ta.layout.stack=function(){function n(a,c){if(!(h=a.length))return a;var l=a.map(function(e,r){return t.call(n,e,r)}),s=l.map(function(t){return t.map(function(t,e){return[i.call(n,t,e),o.call(n,t,e)]})}),f=e.call(n,s,c);l=ta.permute(l,f),s=ta.permute(s,f);var h,g,p,v,d=r.call(n,s,c),m=l[0].length;for(p=0;m>p;++p)for(u.call(n,l[0][p],v=d[p],s[0][p][1]),g=1;h>g;++g)u.call(n,l[g][p],v+=s[g-1][p][1],s[g][p][1]);return a}var t=y,e=ai,r=ci,u=oi,i=ui,o=ii;return n.values=function(e){return arguments.length?(t=e,n):t},n.order=function(t){return arguments.length?(e="function"==typeof t?t:vl.get(t)||ai,n):e},n.offset=function(t){return arguments.length?(r="function"==typeof t?t:dl.get(t)||ci,n):r},n.x=function(t){return arguments.length?(i=t,n):i},n.y=function(t){return arguments.length?(o=t,n):o},n.out=function(t){return arguments.length?(u=t,n):u},n};var vl=ta.map({"inside-out":function(n){var t,e,r=n.length,u=n.map(li),i=n.map(si),o=ta.range(r).sort(function(n,t){return u[n]-u[t]}),a=0,c=0,l=[],s=[];for(t=0;r>t;++t)e=o[t],c>a?(a+=i[e],l.push(e)):(c+=i[e],s.push(e));return s.reverse().concat(l)},reverse:function(n){return ta.range(n.length).reverse()},"default":ai}),dl=ta.map({silhouette:function(n){var t,e,r,u=n.length,i=n[0].length,o=[],a=0,c=[];for(e=0;i>e;++e){for(t=0,r=0;u>t;t++)r+=n[t][e][1];r>a&&(a=r),o.push(r)}for(e=0;i>e;++e)c[e]=(a-o[e])/2;return c},wiggle:function(n){var t,e,r,u,i,o,a,c,l,s=n.length,f=n[0],h=f.length,g=[];for(g[0]=c=l=0,e=1;h>e;++e){for(t=0,u=0;s>t;++t)u+=n[t][e][1];for(t=0,i=0,a=f[e][0]-f[e-1][0];s>t;++t){for(r=0,o=(n[t][e][1]-n[t][e-1][1])/(2*a);t>r;++r)o+=(n[r][e][1]-n[r][e-1][1])/a;i+=o*n[t][e][1]}g[e]=c-=u?i/u*a:0,l>c&&(l=c)}for(e=0;h>e;++e)g[e]-=l;return g},expand:function(n){var t,e,r,u=n.length,i=n[0].length,o=1/u,a=[];for(e=0;i>e;++e){for(t=0,r=0;u>t;t++)r+=n[t][e][1];if(r)for(t=0;u>t;t++)n[t][e][1]/=r;else for(t=0;u>t;t++)n[t][e][1]=o}for(e=0;i>e;++e)a[e]=0;return a},zero:ci});ta.layout.histogram=function(){function n(n,i){for(var o,a,c=[],l=n.map(e,this),s=r.call(this,l,i),f=u.call(this,s,l,i),i=-1,h=l.length,g=f.length-1,p=t?1:1/h;++i<g;)o=c[i]=[],o.dx=f[i+1]-(o.x=f[i]),o.y=0;if(g>0)for(i=-1;++i<h;)a=l[i],a>=s[0]&&a<=s[1]&&(o=c[ta.bisect(f,a,1,g)-1],o.y+=p,o.push(n[i]));return c}var t=!0,e=Number,r=pi,u=hi;return n.value=function(t){return arguments.length?(e=t,n):e},n.range=function(t){return arguments.length?(r=Et(t),n):r},n.bins=function(t){return arguments.length?(u="number"==typeof t?function(n){return gi(n,t)}:Et(t),n):u},n.frequency=function(e){return arguments.length?(t=!!e,n):t},n},ta.layout.pack=function(){function n(n,i){var o=e.call(this,n,i),a=o[0],c=u[0],l=u[1],s=null==t?Math.sqrt:"function"==typeof t?t:function(){return t};if(a.x=a.y=0,Qu(a,function(n){n.r=+s(n.value)}),Qu(a,Mi),r){var f=r*(t?1:Math.max(2*a.r/c,2*a.r/l))/2;Qu(a,function(n){n.r+=f}),Qu(a,Mi),Qu(a,function(n){n.r-=f})}return _i(a,c/2,l/2,t?1:1/Math.max(2*a.r/c,2*a.r/l)),o}var t,e=ta.layout.hierarchy().sort(vi),r=0,u=[1,1];return n.size=function(t){return arguments.length?(u=t,n):u},n.radius=function(e){return arguments.length?(t=null==e||"function"==typeof e?e:+e,n):t},n.padding=function(t){return arguments.length?(r=+t,n):r},Gu(n,e)},ta.layout.tree=function(){function n(n,u){var s=o.call(this,n,u),f=s[0],h=t(f);if(Qu(h,e),h.parent.m=-h.z,Ku(h,r),l)Ku(f,i);else{var g=f,p=f,v=f;Ku(f,function(n){n.x<g.x&&(g=n),n.x>p.x&&(p=n),n.depth>v.depth&&(v=n)});var d=a(g,p)/2-g.x,m=c[0]/(p.x+a(p,g)/2+d),y=c[1]/(v.depth||1);Ku(f,function(n){n.x=(n.x+d)*m,n.y=n.depth*y})}return s}function t(n){for(var t,e={A:null,children:[n]},r=[e];null!=(t=r.pop());)for(var u,i=t.children,o=0,a=i.length;a>o;++o)r.push((i[o]=u={_:i[o],parent:t,children:(u=i[o].children)&&u.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:o}).a=u);return e.children[0]}function e(n){var t=n.children,e=n.parent.children,r=n.i?e[n.i-1]:null;if(t.length){Ni(n);var i=(t[0].z+t[t.length-1].z)/2;r?(n.z=r.z+a(n._,r._),n.m=n.z-i):n.z=i}else r&&(n.z=r.z+a(n._,r._));n.parent.A=u(n,r,n.parent.A||e[0])}function r(n){n._.x=n.z+n.parent.m,n.m+=n.parent.m}function u(n,t,e){if(t){for(var r,u=n,i=n,o=t,c=u.parent.children[0],l=u.m,s=i.m,f=o.m,h=c.m;o=Ei(o),u=ki(u),o&&u;)c=ki(c),i=Ei(i),i.a=n,r=o.z+f-u.z-l+a(o._,u._),r>0&&(Ai(Ci(o,n,e),n,r),l+=r,s+=r),f+=o.m,l+=u.m,h+=c.m,s+=i.m;o&&!Ei(i)&&(i.t=o,i.m+=f-s),u&&!ki(c)&&(c.t=u,c.m+=l-h,e=n)}return e}function i(n){n.x*=c[0],n.y=n.depth*c[1]}var o=ta.layout.hierarchy().sort(null).value(null),a=Si,c=[1,1],l=null;return n.separation=function(t){return arguments.length?(a=t,n):a},n.size=function(t){return arguments.length?(l=null==(c=t)?i:null,n):l?null:c},n.nodeSize=function(t){return arguments.length?(l=null==(c=t)?null:i,n):l?c:null},Gu(n,o)},ta.layout.cluster=function(){function n(n,i){var o,a=t.call(this,n,i),c=a[0],l=0;Qu(c,function(n){var t=n.children;t&&t.length?(n.x=qi(t),n.y=zi(t)):(n.x=o?l+=e(n,o):0,n.y=0,o=n)});var s=Li(c),f=Ti(c),h=s.x-e(s,f)/2,g=f.x+e(f,s)/2;return Qu(c,u?function(n){n.x=(n.x-c.x)*r[0],n.y=(c.y-n.y)*r[1]}:function(n){n.x=(n.x-h)/(g-h)*r[0],n.y=(1-(c.y?n.y/c.y:1))*r[1]}),a}var t=ta.layout.hierarchy().sort(null).value(null),e=Si,r=[1,1],u=!1;return n.separation=function(t){return arguments.length?(e=t,n):e},n.size=function(t){return arguments.length?(u=null==(r=t),n):u?null:r},n.nodeSize=function(t){return arguments.length?(u=null!=(r=t),n):u?r:null},Gu(n,t)},ta.layout.treemap=function(){function n(n,t){for(var e,r,u=-1,i=n.length;++u<i;)r=(e=n[u]).value*(0>t?0:t),e.area=isNaN(r)||0>=r?0:r}function t(e){var i=e.children;if(i&&i.length){var o,a,c,l=f(e),s=[],h=i.slice(),p=1/0,v="slice"===g?l.dx:"dice"===g?l.dy:"slice-dice"===g?1&e.depth?l.dy:l.dx:Math.min(l.dx,l.dy);for(n(h,l.dx*l.dy/e.value),s.area=0;(c=h.length)>0;)s.push(o=h[c-1]),s.area+=o.area,"squarify"!==g||(a=r(s,v))<=p?(h.pop(),p=a):(s.area-=s.pop().area,u(s,v,l,!1),v=Math.min(l.dx,l.dy),s.length=s.area=0,p=1/0);s.length&&(u(s,v,l,!0),s.length=s.area=0),i.forEach(t)}}function e(t){var r=t.children;if(r&&r.length){var i,o=f(t),a=r.slice(),c=[];for(n(a,o.dx*o.dy/t.value),c.area=0;i=a.pop();)c.push(i),c.area+=i.area,null!=i.z&&(u(c,i.z?o.dx:o.dy,o,!a.length),c.length=c.area=0);r.forEach(e)}}function r(n,t){for(var e,r=n.area,u=0,i=1/0,o=-1,a=n.length;++o<a;)(e=n[o].area)&&(i>e&&(i=e),e>u&&(u=e));return r*=r,t*=t,r?Math.max(t*u*p/r,r/(t*i*p)):1/0}function u(n,t,e,r){var u,i=-1,o=n.length,a=e.x,l=e.y,s=t?c(n.area/t):0;if(t==e.dx){for((r||s>e.dy)&&(s=e.dy);++i<o;)u=n[i],u.x=a,u.y=l,u.dy=s,a+=u.dx=Math.min(e.x+e.dx-a,s?c(u.area/s):0);u.z=!0,u.dx+=e.x+e.dx-a,e.y+=s,e.dy-=s}else{for((r||s>e.dx)&&(s=e.dx);++i<o;)u=n[i],u.x=a,u.y=l,u.dx=s,l+=u.dy=Math.min(e.y+e.dy-l,s?c(u.area/s):0);u.z=!1,u.dy+=e.y+e.dy-l,e.x+=s,e.dx-=s}}function i(r){var u=o||a(r),i=u[0];return i.x=0,i.y=0,i.dx=l[0],i.dy=l[1],o&&a.revalue(i),n([i],i.dx*i.dy/i.value),(o?e:t)(i),h&&(o=u),u}var o,a=ta.layout.hierarchy(),c=Math.round,l=[1,1],s=null,f=Ri,h=!1,g="squarify",p=.5*(1+Math.sqrt(5));
return i.size=function(n){return arguments.length?(l=n,i):l},i.padding=function(n){function t(t){var e=n.call(i,t,t.depth);return null==e?Ri(t):Di(t,"number"==typeof e?[e,e,e,e]:e)}function e(t){return Di(t,n)}if(!arguments.length)return s;var r;return f=null==(s=n)?Ri:"function"==(r=typeof n)?t:"number"===r?(n=[n,n,n,n],e):e,i},i.round=function(n){return arguments.length?(c=n?Math.round:Number,i):c!=Number},i.sticky=function(n){return arguments.length?(h=n,o=null,i):h},i.ratio=function(n){return arguments.length?(p=n,i):p},i.mode=function(n){return arguments.length?(g=n+"",i):g},Gu(i,a)},ta.random={normal:function(n,t){var e=arguments.length;return 2>e&&(t=1),1>e&&(n=0),function(){var e,r,u;do e=2*Math.random()-1,r=2*Math.random()-1,u=e*e+r*r;while(!u||u>1);return n+t*e*Math.sqrt(-2*Math.log(u)/u)}},logNormal:function(){var n=ta.random.normal.apply(ta,arguments);return function(){return Math.exp(n())}},bates:function(n){var t=ta.random.irwinHall(n);return function(){return t()/n}},irwinHall:function(n){return function(){for(var t=0,e=0;n>e;e++)t+=Math.random();return t}}},ta.scale={};var ml={floor:y,ceil:y};ta.scale.linear=function(){return Ii([0,1],[0,1],mu,!1)};var yl={s:1,g:1,p:1,r:1,e:1};ta.scale.log=function(){return Ji(ta.scale.linear().domain([0,1]),10,!0,[1,10])};var Ml=ta.format(".0e"),xl={floor:function(n){return-Math.ceil(-n)},ceil:function(n){return-Math.floor(-n)}};ta.scale.pow=function(){return Gi(ta.scale.linear(),1,[0,1])},ta.scale.sqrt=function(){return ta.scale.pow().exponent(.5)},ta.scale.ordinal=function(){return Qi([],{t:"range",a:[[]]})},ta.scale.category10=function(){return ta.scale.ordinal().range(bl)},ta.scale.category20=function(){return ta.scale.ordinal().range(_l)},ta.scale.category20b=function(){return ta.scale.ordinal().range(wl)},ta.scale.category20c=function(){return ta.scale.ordinal().range(Sl)};var bl=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(Mt),_l=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(Mt),wl=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(Mt),Sl=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(Mt);ta.scale.quantile=function(){return no([],[])},ta.scale.quantize=function(){return to(0,1,[0,1])},ta.scale.threshold=function(){return eo([.5],[0,1])},ta.scale.identity=function(){return ro([0,1])},ta.svg={},ta.svg.arc=function(){function n(){var n=Math.max(0,+e.apply(this,arguments)),l=Math.max(0,+r.apply(this,arguments)),s=o.apply(this,arguments)-Ra,f=a.apply(this,arguments)-Ra,h=Math.abs(f-s),g=s>f?0:1;if(n>l&&(p=l,l=n,n=p),h>=Ta)return t(l,g)+(n?t(n,1-g):"")+"Z";var p,v,d,m,y,M,x,b,_,w,S,k,E=0,A=0,N=[];if((m=(+c.apply(this,arguments)||0)/2)&&(d=i===kl?Math.sqrt(n*n+l*l):+i.apply(this,arguments),g||(A*=-1),l&&(A=tt(d/l*Math.sin(m))),n&&(E=tt(d/n*Math.sin(m)))),l){y=l*Math.cos(s+A),M=l*Math.sin(s+A),x=l*Math.cos(f-A),b=l*Math.sin(f-A);var C=Math.abs(f-s-2*A)<=qa?0:1;if(A&&so(y,M,x,b)===g^C){var z=(s+f)/2;y=l*Math.cos(z),M=l*Math.sin(z),x=b=null}}else y=M=0;if(n){_=n*Math.cos(f-E),w=n*Math.sin(f-E),S=n*Math.cos(s+E),k=n*Math.sin(s+E);var q=Math.abs(s-f+2*E)<=qa?0:1;if(E&&so(_,w,S,k)===1-g^q){var L=(s+f)/2;_=n*Math.cos(L),w=n*Math.sin(L),S=k=null}}else _=w=0;if((p=Math.min(Math.abs(l-n)/2,+u.apply(this,arguments)))>.001){v=l>n^g?0:1;var T=null==S?[_,w]:null==x?[y,M]:Lr([y,M],[S,k],[x,b],[_,w]),R=y-T[0],D=M-T[1],P=x-T[0],U=b-T[1],j=1/Math.sin(Math.acos((R*P+D*U)/(Math.sqrt(R*R+D*D)*Math.sqrt(P*P+U*U)))/2),F=Math.sqrt(T[0]*T[0]+T[1]*T[1]);if(null!=x){var H=Math.min(p,(l-F)/(j+1)),O=fo(null==S?[_,w]:[S,k],[y,M],l,H,g),I=fo([x,b],[_,w],l,H,g);p===H?N.push("M",O[0],"A",H,",",H," 0 0,",v," ",O[1],"A",l,",",l," 0 ",1-g^so(O[1][0],O[1][1],I[1][0],I[1][1]),",",g," ",I[1],"A",H,",",H," 0 0,",v," ",I[0]):N.push("M",O[0],"A",H,",",H," 0 1,",v," ",I[0])}else N.push("M",y,",",M);if(null!=S){var Y=Math.min(p,(n-F)/(j-1)),Z=fo([y,M],[S,k],n,-Y,g),V=fo([_,w],null==x?[y,M]:[x,b],n,-Y,g);p===Y?N.push("L",V[0],"A",Y,",",Y," 0 0,",v," ",V[1],"A",n,",",n," 0 ",g^so(V[1][0],V[1][1],Z[1][0],Z[1][1]),",",1-g," ",Z[1],"A",Y,",",Y," 0 0,",v," ",Z[0]):N.push("L",V[0],"A",Y,",",Y," 0 0,",v," ",Z[0])}else N.push("L",_,",",w)}else N.push("M",y,",",M),null!=x&&N.push("A",l,",",l," 0 ",C,",",g," ",x,",",b),N.push("L",_,",",w),null!=S&&N.push("A",n,",",n," 0 ",q,",",1-g," ",S,",",k);return N.push("Z"),N.join("")}function t(n,t){return"M0,"+n+"A"+n+","+n+" 0 1,"+t+" 0,"+-n+"A"+n+","+n+" 0 1,"+t+" 0,"+n}var e=io,r=oo,u=uo,i=kl,o=ao,a=co,c=lo;return n.innerRadius=function(t){return arguments.length?(e=Et(t),n):e},n.outerRadius=function(t){return arguments.length?(r=Et(t),n):r},n.cornerRadius=function(t){return arguments.length?(u=Et(t),n):u},n.padRadius=function(t){return arguments.length?(i=t==kl?kl:Et(t),n):i},n.startAngle=function(t){return arguments.length?(o=Et(t),n):o},n.endAngle=function(t){return arguments.length?(a=Et(t),n):a},n.padAngle=function(t){return arguments.length?(c=Et(t),n):c},n.centroid=function(){var n=(+e.apply(this,arguments)+ +r.apply(this,arguments))/2,t=(+o.apply(this,arguments)+ +a.apply(this,arguments))/2-Ra;return[Math.cos(t)*n,Math.sin(t)*n]},n};var kl="auto";ta.svg.line=function(){return ho(y)};var El=ta.map({linear:go,"linear-closed":po,step:vo,"step-before":mo,"step-after":yo,basis:So,"basis-open":ko,"basis-closed":Eo,bundle:Ao,cardinal:bo,"cardinal-open":Mo,"cardinal-closed":xo,monotone:To});El.forEach(function(n,t){t.key=n,t.closed=/-closed$/.test(n)});var Al=[0,2/3,1/3,0],Nl=[0,1/3,2/3,0],Cl=[0,1/6,2/3,1/6];ta.svg.line.radial=function(){var n=ho(Ro);return n.radius=n.x,delete n.x,n.angle=n.y,delete n.y,n},mo.reverse=yo,yo.reverse=mo,ta.svg.area=function(){return Do(y)},ta.svg.area.radial=function(){var n=Do(Ro);return n.radius=n.x,delete n.x,n.innerRadius=n.x0,delete n.x0,n.outerRadius=n.x1,delete n.x1,n.angle=n.y,delete n.y,n.startAngle=n.y0,delete n.y0,n.endAngle=n.y1,delete n.y1,n},ta.svg.chord=function(){function n(n,a){var c=t(this,i,n,a),l=t(this,o,n,a);return"M"+c.p0+r(c.r,c.p1,c.a1-c.a0)+(e(c,l)?u(c.r,c.p1,c.r,c.p0):u(c.r,c.p1,l.r,l.p0)+r(l.r,l.p1,l.a1-l.a0)+u(l.r,l.p1,c.r,c.p0))+"Z"}function t(n,t,e,r){var u=t.call(n,e,r),i=a.call(n,u,r),o=c.call(n,u,r)-Ra,s=l.call(n,u,r)-Ra;return{r:i,a0:o,a1:s,p0:[i*Math.cos(o),i*Math.sin(o)],p1:[i*Math.cos(s),i*Math.sin(s)]}}function e(n,t){return n.a0==t.a0&&n.a1==t.a1}function r(n,t,e){return"A"+n+","+n+" 0 "+ +(e>qa)+",1 "+t}function u(n,t,e,r){return"Q 0,0 "+r}var i=mr,o=yr,a=Po,c=ao,l=co;return n.radius=function(t){return arguments.length?(a=Et(t),n):a},n.source=function(t){return arguments.length?(i=Et(t),n):i},n.target=function(t){return arguments.length?(o=Et(t),n):o},n.startAngle=function(t){return arguments.length?(c=Et(t),n):c},n.endAngle=function(t){return arguments.length?(l=Et(t),n):l},n},ta.svg.diagonal=function(){function n(n,u){var i=t.call(this,n,u),o=e.call(this,n,u),a=(i.y+o.y)/2,c=[i,{x:i.x,y:a},{x:o.x,y:a},o];return c=c.map(r),"M"+c[0]+"C"+c[1]+" "+c[2]+" "+c[3]}var t=mr,e=yr,r=Uo;return n.source=function(e){return arguments.length?(t=Et(e),n):t},n.target=function(t){return arguments.length?(e=Et(t),n):e},n.projection=function(t){return arguments.length?(r=t,n):r},n},ta.svg.diagonal.radial=function(){var n=ta.svg.diagonal(),t=Uo,e=n.projection;return n.projection=function(n){return arguments.length?e(jo(t=n)):t},n},ta.svg.symbol=function(){function n(n,r){return(zl.get(t.call(this,n,r))||Oo)(e.call(this,n,r))}var t=Ho,e=Fo;return n.type=function(e){return arguments.length?(t=Et(e),n):t},n.size=function(t){return arguments.length?(e=Et(t),n):e},n};var zl=ta.map({circle:Oo,cross:function(n){var t=Math.sqrt(n/5)/2;return"M"+-3*t+","+-t+"H"+-t+"V"+-3*t+"H"+t+"V"+-t+"H"+3*t+"V"+t+"H"+t+"V"+3*t+"H"+-t+"V"+t+"H"+-3*t+"Z"},diamond:function(n){var t=Math.sqrt(n/(2*Ll)),e=t*Ll;return"M0,"+-t+"L"+e+",0 0,"+t+" "+-e+",0Z"},square:function(n){var t=Math.sqrt(n)/2;return"M"+-t+","+-t+"L"+t+","+-t+" "+t+","+t+" "+-t+","+t+"Z"},"triangle-down":function(n){var t=Math.sqrt(n/ql),e=t*ql/2;return"M0,"+e+"L"+t+","+-e+" "+-t+","+-e+"Z"},"triangle-up":function(n){var t=Math.sqrt(n/ql),e=t*ql/2;return"M0,"+-e+"L"+t+","+e+" "+-t+","+e+"Z"}});ta.svg.symbolTypes=zl.keys();var ql=Math.sqrt(3),Ll=Math.tan(30*Da);_a.transition=function(n){for(var t,e,r=Tl||++Ul,u=Xo(n),i=[],o=Rl||{time:Date.now(),ease:Su,delay:0,duration:250},a=-1,c=this.length;++a<c;){i.push(t=[]);for(var l=this[a],s=-1,f=l.length;++s<f;)(e=l[s])&&$o(e,s,u,r,o),t.push(e)}return Yo(i,u,r)},_a.interrupt=function(n){return this.each(null==n?Dl:Io(Xo(n)))};var Tl,Rl,Dl=Io(Xo()),Pl=[],Ul=0;Pl.call=_a.call,Pl.empty=_a.empty,Pl.node=_a.node,Pl.size=_a.size,ta.transition=function(n,t){return n&&n.transition?Tl?n.transition(t):n:ta.selection().transition(n)},ta.transition.prototype=Pl,Pl.select=function(n){var t,e,r,u=this.id,i=this.namespace,o=[];n=N(n);for(var a=-1,c=this.length;++a<c;){o.push(t=[]);for(var l=this[a],s=-1,f=l.length;++s<f;)(r=l[s])&&(e=n.call(r,r.__data__,s,a))?("__data__"in r&&(e.__data__=r.__data__),$o(e,s,i,u,r[i][u]),t.push(e)):t.push(null)}return Yo(o,i,u)},Pl.selectAll=function(n){var t,e,r,u,i,o=this.id,a=this.namespace,c=[];n=C(n);for(var l=-1,s=this.length;++l<s;)for(var f=this[l],h=-1,g=f.length;++h<g;)if(r=f[h]){i=r[a][o],e=n.call(r,r.__data__,h,l),c.push(t=[]);for(var p=-1,v=e.length;++p<v;)(u=e[p])&&$o(u,p,a,o,i),t.push(u)}return Yo(c,a,o)},Pl.filter=function(n){var t,e,r,u=[];"function"!=typeof n&&(n=O(n));for(var i=0,o=this.length;o>i;i++){u.push(t=[]);for(var e=this[i],a=0,c=e.length;c>a;a++)(r=e[a])&&n.call(r,r.__data__,a,i)&&t.push(r)}return Yo(u,this.namespace,this.id)},Pl.tween=function(n,t){var e=this.id,r=this.namespace;return arguments.length<2?this.node()[r][e].tween.get(n):Y(this,null==t?function(t){t[r][e].tween.remove(n)}:function(u){u[r][e].tween.set(n,t)})},Pl.attr=function(n,t){function e(){this.removeAttribute(a)}function r(){this.removeAttributeNS(a.space,a.local)}function u(n){return null==n?e:(n+="",function(){var t,e=this.getAttribute(a);return e!==n&&(t=o(e,n),function(n){this.setAttribute(a,t(n))})})}function i(n){return null==n?r:(n+="",function(){var t,e=this.getAttributeNS(a.space,a.local);return e!==n&&(t=o(e,n),function(n){this.setAttributeNS(a.space,a.local,t(n))})})}if(arguments.length<2){for(t in n)this.attr(t,n[t]);return this}var o="transform"==n?Hu:mu,a=ta.ns.qualify(n);return Zo(this,"attr."+n,t,a.local?i:u)},Pl.attrTween=function(n,t){function e(n,e){var r=t.call(this,n,e,this.getAttribute(u));return r&&function(n){this.setAttribute(u,r(n))}}function r(n,e){var r=t.call(this,n,e,this.getAttributeNS(u.space,u.local));return r&&function(n){this.setAttributeNS(u.space,u.local,r(n))}}var u=ta.ns.qualify(n);return this.tween("attr."+n,u.local?r:e)},Pl.style=function(n,e,r){function u(){this.style.removeProperty(n)}function i(e){return null==e?u:(e+="",function(){var u,i=t(this).getComputedStyle(this,null).getPropertyValue(n);return i!==e&&(u=mu(i,e),function(t){this.style.setProperty(n,u(t),r)})})}var o=arguments.length;if(3>o){if("string"!=typeof n){2>o&&(e="");for(r in n)this.style(r,n[r],e);return this}r=""}return Zo(this,"style."+n,e,i)},Pl.styleTween=function(n,e,r){function u(u,i){var o=e.call(this,u,i,t(this).getComputedStyle(this,null).getPropertyValue(n));return o&&function(t){this.style.setProperty(n,o(t),r)}}return arguments.length<3&&(r=""),this.tween("style."+n,u)},Pl.text=function(n){return Zo(this,"text",n,Vo)},Pl.remove=function(){var n=this.namespace;return this.each("end.transition",function(){var t;this[n].count<2&&(t=this.parentNode)&&t.removeChild(this)})},Pl.ease=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].ease:("function"!=typeof n&&(n=ta.ease.apply(ta,arguments)),Y(this,function(r){r[e][t].ease=n}))},Pl.delay=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].delay:Y(this,"function"==typeof n?function(r,u,i){r[e][t].delay=+n.call(r,r.__data__,u,i)}:(n=+n,function(r){r[e][t].delay=n}))},Pl.duration=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].duration:Y(this,"function"==typeof n?function(r,u,i){r[e][t].duration=Math.max(1,n.call(r,r.__data__,u,i))}:(n=Math.max(1,n),function(r){r[e][t].duration=n}))},Pl.each=function(n,t){var e=this.id,r=this.namespace;if(arguments.length<2){var u=Rl,i=Tl;try{Tl=e,Y(this,function(t,u,i){Rl=t[r][e],n.call(t,t.__data__,u,i)})}finally{Rl=u,Tl=i}}else Y(this,function(u){var i=u[r][e];(i.event||(i.event=ta.dispatch("start","end","interrupt"))).on(n,t)});return this},Pl.transition=function(){for(var n,t,e,r,u=this.id,i=++Ul,o=this.namespace,a=[],c=0,l=this.length;l>c;c++){a.push(n=[]);for(var t=this[c],s=0,f=t.length;f>s;s++)(e=t[s])&&(r=e[o][u],$o(e,s,o,i,{time:r.time,ease:r.ease,delay:r.delay+r.duration,duration:r.duration})),n.push(e)}return Yo(a,o,i)},ta.svg.axis=function(){function n(n){n.each(function(){var n,l=ta.select(this),s=this.__chart__||e,f=this.__chart__=e.copy(),h=null==c?f.ticks?f.ticks.apply(f,a):f.domain():c,g=null==t?f.tickFormat?f.tickFormat.apply(f,a):y:t,p=l.selectAll(".tick").data(h,f),v=p.enter().insert("g",".domain").attr("class","tick").style("opacity",Ca),d=ta.transition(p.exit()).style("opacity",Ca).remove(),m=ta.transition(p.order()).style("opacity",1),M=Math.max(u,0)+o,x=Ui(f),b=l.selectAll(".domain").data([0]),_=(b.enter().append("path").attr("class","domain"),ta.transition(b));v.append("line"),v.append("text");var w,S,k,E,A=v.select("line"),N=m.select("line"),C=p.select("text").text(g),z=v.select("text"),q=m.select("text"),L="top"===r||"left"===r?-1:1;if("bottom"===r||"top"===r?(n=Bo,w="x",k="y",S="x2",E="y2",C.attr("dy",0>L?"0em":".71em").style("text-anchor","middle"),_.attr("d","M"+x[0]+","+L*i+"V0H"+x[1]+"V"+L*i)):(n=Wo,w="y",k="x",S="y2",E="x2",C.attr("dy",".32em").style("text-anchor",0>L?"end":"start"),_.attr("d","M"+L*i+","+x[0]+"H0V"+x[1]+"H"+L*i)),A.attr(E,L*u),z.attr(k,L*M),N.attr(S,0).attr(E,L*u),q.attr(w,0).attr(k,L*M),f.rangeBand){var T=f,R=T.rangeBand()/2;s=f=function(n){return T(n)+R}}else s.rangeBand?s=f:d.call(n,f,s);v.call(n,s,f),m.call(n,f,f)})}var t,e=ta.scale.linear(),r=jl,u=6,i=6,o=3,a=[10],c=null;return n.scale=function(t){return arguments.length?(e=t,n):e},n.orient=function(t){return arguments.length?(r=t in Fl?t+"":jl,n):r},n.ticks=function(){return arguments.length?(a=arguments,n):a},n.tickValues=function(t){return arguments.length?(c=t,n):c},n.tickFormat=function(e){return arguments.length?(t=e,n):t},n.tickSize=function(t){var e=arguments.length;return e?(u=+t,i=+arguments[e-1],n):u},n.innerTickSize=function(t){return arguments.length?(u=+t,n):u},n.outerTickSize=function(t){return arguments.length?(i=+t,n):i},n.tickPadding=function(t){return arguments.length?(o=+t,n):o},n.tickSubdivide=function(){return arguments.length&&n},n};var jl="bottom",Fl={top:1,right:1,bottom:1,left:1};ta.svg.brush=function(){function n(t){t.each(function(){var t=ta.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",i).on("touchstart.brush",i),o=t.selectAll(".background").data([0]);o.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),t.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var a=t.selectAll(".resize").data(v,y);a.exit().remove(),a.enter().append("g").attr("class",function(n){return"resize "+n}).style("cursor",function(n){return Hl[n]}).append("rect").attr("x",function(n){return/[ew]$/.test(n)?-3:null}).attr("y",function(n){return/^[ns]/.test(n)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),a.style("display",n.empty()?"none":null);var c,f=ta.transition(t),h=ta.transition(o);l&&(c=Ui(l),h.attr("x",c[0]).attr("width",c[1]-c[0]),r(f)),s&&(c=Ui(s),h.attr("y",c[0]).attr("height",c[1]-c[0]),u(f)),e(f)})}function e(n){n.selectAll(".resize").attr("transform",function(n){return"translate("+f[+/e$/.test(n)]+","+h[+/^s/.test(n)]+")"})}function r(n){n.select(".extent").attr("x",f[0]),n.selectAll(".extent,.n>rect,.s>rect").attr("width",f[1]-f[0])}function u(n){n.select(".extent").attr("y",h[0]),n.selectAll(".extent,.e>rect,.w>rect").attr("height",h[1]-h[0])}function i(){function i(){32==ta.event.keyCode&&(C||(M=null,q[0]-=f[1],q[1]-=h[1],C=2),S())}function v(){32==ta.event.keyCode&&2==C&&(q[0]+=f[1],q[1]+=h[1],C=0,S())}function d(){var n=ta.mouse(b),t=!1;x&&(n[0]+=x[0],n[1]+=x[1]),C||(ta.event.altKey?(M||(M=[(f[0]+f[1])/2,(h[0]+h[1])/2]),q[0]=f[+(n[0]<M[0])],q[1]=h[+(n[1]<M[1])]):M=null),A&&m(n,l,0)&&(r(k),t=!0),N&&m(n,s,1)&&(u(k),t=!0),t&&(e(k),w({type:"brush",mode:C?"move":"resize"}))}function m(n,t,e){var r,u,i=Ui(t),c=i[0],l=i[1],s=q[e],v=e?h:f,d=v[1]-v[0];return C&&(c-=s,l-=d+s),r=(e?p:g)?Math.max(c,Math.min(l,n[e])):n[e],C?u=(r+=s)+d:(M&&(s=Math.max(c,Math.min(l,2*M[e]-r))),r>s?(u=r,r=s):u=s),v[0]!=r||v[1]!=u?(e?a=null:o=null,v[0]=r,v[1]=u,!0):void 0}function y(){d(),k.style("pointer-events","all").selectAll(".resize").style("display",n.empty()?"none":null),ta.select("body").style("cursor",null),L.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),z(),w({type:"brushend"})}var M,x,b=this,_=ta.select(ta.event.target),w=c.of(b,arguments),k=ta.select(b),E=_.datum(),A=!/^(n|s)$/.test(E)&&l,N=!/^(e|w)$/.test(E)&&s,C=_.classed("extent"),z=W(b),q=ta.mouse(b),L=ta.select(t(b)).on("keydown.brush",i).on("keyup.brush",v);if(ta.event.changedTouches?L.on("touchmove.brush",d).on("touchend.brush",y):L.on("mousemove.brush",d).on("mouseup.brush",y),k.interrupt().selectAll("*").interrupt(),C)q[0]=f[0]-q[0],q[1]=h[0]-q[1];else if(E){var T=+/w$/.test(E),R=+/^n/.test(E);x=[f[1-T]-q[0],h[1-R]-q[1]],q[0]=f[T],q[1]=h[R]}else ta.event.altKey&&(M=q.slice());k.style("pointer-events","none").selectAll(".resize").style("display",null),ta.select("body").style("cursor",_.style("cursor")),w({type:"brushstart"}),d()}var o,a,c=E(n,"brushstart","brush","brushend"),l=null,s=null,f=[0,0],h=[0,0],g=!0,p=!0,v=Ol[0];return n.event=function(n){n.each(function(){var n=c.of(this,arguments),t={x:f,y:h,i:o,j:a},e=this.__chart__||t;this.__chart__=t,Tl?ta.select(this).transition().each("start.brush",function(){o=e.i,a=e.j,f=e.x,h=e.y,n({type:"brushstart"})}).tween("brush:brush",function(){var e=yu(f,t.x),r=yu(h,t.y);return o=a=null,function(u){f=t.x=e(u),h=t.y=r(u),n({type:"brush",mode:"resize"})}}).each("end.brush",function(){o=t.i,a=t.j,n({type:"brush",mode:"resize"}),n({type:"brushend"})}):(n({type:"brushstart"}),n({type:"brush",mode:"resize"}),n({type:"brushend"}))})},n.x=function(t){return arguments.length?(l=t,v=Ol[!l<<1|!s],n):l},n.y=function(t){return arguments.length?(s=t,v=Ol[!l<<1|!s],n):s},n.clamp=function(t){return arguments.length?(l&&s?(g=!!t[0],p=!!t[1]):l?g=!!t:s&&(p=!!t),n):l&&s?[g,p]:l?g:s?p:null},n.extent=function(t){var e,r,u,i,c;return arguments.length?(l&&(e=t[0],r=t[1],s&&(e=e[0],r=r[0]),o=[e,r],l.invert&&(e=l(e),r=l(r)),e>r&&(c=e,e=r,r=c),(e!=f[0]||r!=f[1])&&(f=[e,r])),s&&(u=t[0],i=t[1],l&&(u=u[1],i=i[1]),a=[u,i],s.invert&&(u=s(u),i=s(i)),u>i&&(c=u,u=i,i=c),(u!=h[0]||i!=h[1])&&(h=[u,i])),n):(l&&(o?(e=o[0],r=o[1]):(e=f[0],r=f[1],l.invert&&(e=l.invert(e),r=l.invert(r)),e>r&&(c=e,e=r,r=c))),s&&(a?(u=a[0],i=a[1]):(u=h[0],i=h[1],s.invert&&(u=s.invert(u),i=s.invert(i)),u>i&&(c=u,u=i,i=c))),l&&s?[[e,u],[r,i]]:l?[e,r]:s&&[u,i])},n.clear=function(){return n.empty()||(f=[0,0],h=[0,0],o=a=null),n},n.empty=function(){return!!l&&f[0]==f[1]||!!s&&h[0]==h[1]},ta.rebind(n,c,"on")};var Hl={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ol=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],Il=ac.format=gc.timeFormat,Yl=Il.utc,Zl=Yl("%Y-%m-%dT%H:%M:%S.%LZ");Il.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?Jo:Zl,Jo.parse=function(n){var t=new Date(n);return isNaN(t)?null:t},Jo.toString=Zl.toString,ac.second=Ft(function(n){return new cc(1e3*Math.floor(n/1e3))},function(n,t){n.setTime(n.getTime()+1e3*Math.floor(t))},function(n){return n.getSeconds()}),ac.seconds=ac.second.range,ac.seconds.utc=ac.second.utc.range,ac.minute=Ft(function(n){return new cc(6e4*Math.floor(n/6e4))},function(n,t){n.setTime(n.getTime()+6e4*Math.floor(t))},function(n){return n.getMinutes()}),ac.minutes=ac.minute.range,ac.minutes.utc=ac.minute.utc.range,ac.hour=Ft(function(n){var t=n.getTimezoneOffset()/60;return new cc(36e5*(Math.floor(n/36e5-t)+t))},function(n,t){n.setTime(n.getTime()+36e5*Math.floor(t))},function(n){return n.getHours()}),ac.hours=ac.hour.range,ac.hours.utc=ac.hour.utc.range,ac.month=Ft(function(n){return n=ac.day(n),n.setDate(1),n},function(n,t){n.setMonth(n.getMonth()+t)},function(n){return n.getMonth()}),ac.months=ac.month.range,ac.months.utc=ac.month.utc.range;var Vl=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],Xl=[[ac.second,1],[ac.second,5],[ac.second,15],[ac.second,30],[ac.minute,1],[ac.minute,5],[ac.minute,15],[ac.minute,30],[ac.hour,1],[ac.hour,3],[ac.hour,6],[ac.hour,12],[ac.day,1],[ac.day,2],[ac.week,1],[ac.month,1],[ac.month,3],[ac.year,1]],$l=Il.multi([[".%L",function(n){return n.getMilliseconds()}],[":%S",function(n){return n.getSeconds()}],["%I:%M",function(n){return n.getMinutes()}],["%I %p",function(n){return n.getHours()}],["%a %d",function(n){return n.getDay()&&1!=n.getDate()}],["%b %d",function(n){return 1!=n.getDate()}],["%B",function(n){return n.getMonth()}],["%Y",Ne]]),Bl={range:function(n,t,e){return ta.range(Math.ceil(n/e)*e,+t,e).map(Ko)},floor:y,ceil:y};Xl.year=ac.year,ac.scale=function(){return Go(ta.scale.linear(),Xl,$l)};var Wl=Xl.map(function(n){return[n[0].utc,n[1]]}),Jl=Yl.multi([[".%L",function(n){return n.getUTCMilliseconds()}],[":%S",function(n){return n.getUTCSeconds()}],["%I:%M",function(n){return n.getUTCMinutes()}],["%I %p",function(n){return n.getUTCHours()}],["%a %d",function(n){return n.getUTCDay()&&1!=n.getUTCDate()}],["%b %d",function(n){return 1!=n.getUTCDate()}],["%B",function(n){return n.getUTCMonth()}],["%Y",Ne]]);Wl.year=ac.year.utc,ac.scale.utc=function(){return Go(ta.scale.linear(),Wl,Jl)},ta.text=At(function(n){return n.responseText}),ta.json=function(n,t){return Nt(n,"application/json",Qo,t)},ta.html=function(n,t){return Nt(n,"text/html",na,t)},ta.xml=At(function(n){return n.responseXML}),"function"==typeof define&&define.amd?define(ta):"object"==typeof module&&module.exports&&(module.exports=ta),this.d3=ta}();
/**
 * @license
 * lodash lodash.com/license | Underscore.js 1.8.3 underscorejs.org/LICENSE
 */
;(function(){function t(t,n){return t.set(n[0],n[1]),t}function n(t,n){return t.add(n),t}function r(t,n,r){switch(r.length){case 0:return t.call(n);case 1:return t.call(n,r[0]);case 2:return t.call(n,r[0],r[1]);case 3:return t.call(n,r[0],r[1],r[2])}return t.apply(n,r)}function e(t,n,r,e){for(var u=-1,i=t?t.length:0;++u<i;){var o=t[u];n(e,o,r(o),t)}return e}function u(t,n){for(var r=-1,e=t?t.length:0;++r<e&&false!==n(t[r],r,t););return t}function i(t,n){for(var r=t?t.length:0;r--&&false!==n(t[r],r,t););
return t}function o(t,n){for(var r=-1,e=t?t.length:0;++r<e;)if(!n(t[r],r,t))return false;return true}function f(t,n){for(var r=-1,e=t?t.length:0,u=0,i=[];++r<e;){var o=t[r];n(o,r,t)&&(i[u++]=o)}return i}function c(t,n){return!(!t||!t.length)&&-1<d(t,n,0)}function a(t,n,r){for(var e=-1,u=t?t.length:0;++e<u;)if(r(n,t[e]))return true;return false}function l(t,n){for(var r=-1,e=t?t.length:0,u=Array(e);++r<e;)u[r]=n(t[r],r,t);return u}function s(t,n){for(var r=-1,e=n.length,u=t.length;++r<e;)t[u+r]=n[r];return t}function h(t,n,r,e){
var u=-1,i=t?t.length:0;for(e&&i&&(r=t[++u]);++u<i;)r=n(r,t[u],u,t);return r}function p(t,n,r,e){var u=t?t.length:0;for(e&&u&&(r=t[--u]);u--;)r=n(r,t[u],u,t);return r}function _(t,n){for(var r=-1,e=t?t.length:0;++r<e;)if(n(t[r],r,t))return true;return false}function v(t,n,r){var e;return r(t,function(t,r,u){if(n(t,r,u))return e=r,false}),e}function g(t,n,r,e){var u=t.length;for(r+=e?1:-1;e?r--:++r<u;)if(n(t[r],r,t))return r;return-1}function d(t,n,r){if(n===n)t:{--r;for(var e=t.length;++r<e;)if(t[r]===n){t=r;
break t}t=-1}else t=g(t,b,r);return t}function y(t,n,r,e){--r;for(var u=t.length;++r<u;)if(e(t[r],n))return r;return-1}function b(t){return t!==t}function x(t,n){var r=t?t.length:0;return r?k(t,n)/r:P}function j(t){return function(n){return null==n?F:n[t]}}function w(t){return function(n){return null==t?F:t[n]}}function m(t,n,r,e,u){return u(t,function(t,u,i){r=e?(e=false,t):n(r,t,u,i)}),r}function A(t,n){var r=t.length;for(t.sort(n);r--;)t[r]=t[r].c;return t}function k(t,n){for(var r,e=-1,u=t.length;++e<u;){
var i=n(t[e]);i!==F&&(r=r===F?i:r+i)}return r}function E(t,n){for(var r=-1,e=Array(t);++r<t;)e[r]=n(r);return e}function O(t,n){return l(n,function(n){return[n,t[n]]})}function S(t){return function(n){return t(n)}}function I(t,n){return l(n,function(n){return t[n]})}function R(t,n){return t.has(n)}function z(t,n){for(var r=-1,e=t.length;++r<e&&-1<d(n,t[r],0););return r}function W(t,n){for(var r=t.length;r--&&-1<d(n,t[r],0););return r}function B(t){return"\\"+Dt[t]}function L(t){var n=-1,r=Array(t.size);
return t.forEach(function(t,e){r[++n]=[e,t]}),r}function U(t,n){return function(r){return t(n(r))}}function C(t,n){for(var r=-1,e=t.length,u=0,i=[];++r<e;){var o=t[r];o!==n&&"__lodash_placeholder__"!==o||(t[r]="__lodash_placeholder__",i[u++]=r)}return i}function M(t){var n=-1,r=Array(t.size);return t.forEach(function(t){r[++n]=t}),r}function D(t){var n=-1,r=Array(t.size);return t.forEach(function(t){r[++n]=[t,t]}),r}function T(t){if(Wt.test(t)){for(var n=Rt.lastIndex=0;Rt.test(t);)++n;t=n}else t=tn(t);
return t}function $(t){return Wt.test(t)?t.match(Rt)||[]:t.split("")}var F,N=1/0,P=NaN,Z=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],q=/\b__p\+='';/g,V=/\b(__p\+=)''\+/g,K=/(__e\(.*?\)|\b__t\))\+'';/g,G=/&(?:amp|lt|gt|quot|#39);/g,J=/[&<>"']/g,Y=RegExp(G.source),H=RegExp(J.source),Q=/<%-([\s\S]+?)%>/g,X=/<%([\s\S]+?)%>/g,tt=/<%=([\s\S]+?)%>/g,nt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,rt=/^\w*$/,et=/^\./,ut=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,it=/[\\^$.*+?()[\]{}|]/g,ot=RegExp(it.source),ft=/^\s+|\s+$/g,ct=/^\s+/,at=/\s+$/,lt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,st=/\{\n\/\* \[wrapped with (.+)\] \*/,ht=/,? & /,pt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,_t=/\\(\\)?/g,vt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,gt=/\w*$/,dt=/^[-+]0x[0-9a-f]+$/i,yt=/^0b[01]+$/i,bt=/^\[object .+?Constructor\]$/,xt=/^0o[0-7]+$/i,jt=/^(?:0|[1-9]\d*)$/,wt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,mt=/($^)/,At=/['\n\r\u2028\u2029\\]/g,kt="[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?(?:\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|\\ud83c[\\udffb-\\udfff])?)*",Et="(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])"+kt,Ot="(?:[^\\ud800-\\udfff][\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]?|[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff])",St=RegExp("['\u2019]","g"),It=RegExp("[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]","g"),Rt=RegExp("\\ud83c[\\udffb-\\udfff](?=\\ud83c[\\udffb-\\udfff])|"+Ot+kt,"g"),zt=RegExp(["[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+(?:['\u2019](?:d|ll|m|re|s|t|ve))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde]|$)|(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde](?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])|$)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:['\u2019](?:d|ll|m|re|s|t|ve))?|[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?|\\d+",Et].join("|"),"g"),Wt=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),Bt=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Lt="Array Buffer DataView Date Error Float32Array Float64Array Function Int8Array Int16Array Int32Array Map Math Object Promise RegExp Set String Symbol TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array WeakMap _ clearTimeout isFinite parseInt setTimeout".split(" "),Ut={};
Ut["[object Float32Array]"]=Ut["[object Float64Array]"]=Ut["[object Int8Array]"]=Ut["[object Int16Array]"]=Ut["[object Int32Array]"]=Ut["[object Uint8Array]"]=Ut["[object Uint8ClampedArray]"]=Ut["[object Uint16Array]"]=Ut["[object Uint32Array]"]=true,Ut["[object Arguments]"]=Ut["[object Array]"]=Ut["[object ArrayBuffer]"]=Ut["[object Boolean]"]=Ut["[object DataView]"]=Ut["[object Date]"]=Ut["[object Error]"]=Ut["[object Function]"]=Ut["[object Map]"]=Ut["[object Number]"]=Ut["[object Object]"]=Ut["[object RegExp]"]=Ut["[object Set]"]=Ut["[object String]"]=Ut["[object WeakMap]"]=false;
var Ct={};Ct["[object Arguments]"]=Ct["[object Array]"]=Ct["[object ArrayBuffer]"]=Ct["[object DataView]"]=Ct["[object Boolean]"]=Ct["[object Date]"]=Ct["[object Float32Array]"]=Ct["[object Float64Array]"]=Ct["[object Int8Array]"]=Ct["[object Int16Array]"]=Ct["[object Int32Array]"]=Ct["[object Map]"]=Ct["[object Number]"]=Ct["[object Object]"]=Ct["[object RegExp]"]=Ct["[object Set]"]=Ct["[object String]"]=Ct["[object Symbol]"]=Ct["[object Uint8Array]"]=Ct["[object Uint8ClampedArray]"]=Ct["[object Uint16Array]"]=Ct["[object Uint32Array]"]=true,
Ct["[object Error]"]=Ct["[object Function]"]=Ct["[object WeakMap]"]=false;var Mt,Dt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Tt=parseFloat,$t=parseInt,Ft=typeof global=="object"&&global&&global.Object===Object&&global,Nt=typeof self=="object"&&self&&self.Object===Object&&self,Pt=Ft||Nt||Function("return this")(),Zt=typeof exports=="object"&&exports&&!exports.nodeType&&exports,qt=Zt&&typeof module=="object"&&module&&!module.nodeType&&module,Vt=qt&&qt.exports===Zt,Kt=Vt&&Ft.h;
t:{try{Mt=Kt&&Kt.g("util");break t}catch(t){}Mt=void 0}var Gt=Mt&&Mt.isArrayBuffer,Jt=Mt&&Mt.isDate,Yt=Mt&&Mt.isMap,Ht=Mt&&Mt.isRegExp,Qt=Mt&&Mt.isSet,Xt=Mt&&Mt.isTypedArray,tn=j("length"),nn=w({"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A","\xe0":"a","\xe1":"a","\xe2":"a","\xe3":"a","\xe4":"a","\xe5":"a","\xc7":"C","\xe7":"c","\xd0":"D","\xf0":"d","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I",
"\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xd1":"N","\xf1":"n","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xf9":"u","\xfa":"u","\xfb":"u","\xfc":"u","\xdd":"Y","\xfd":"y","\xff":"y","\xc6":"Ae","\xe6":"ae","\xde":"Th","\xfe":"th","\xdf":"ss","\u0100":"A","\u0102":"A","\u0104":"A","\u0101":"a","\u0103":"a","\u0105":"a","\u0106":"C","\u0108":"C","\u010a":"C","\u010c":"C",
"\u0107":"c","\u0109":"c","\u010b":"c","\u010d":"c","\u010e":"D","\u0110":"D","\u010f":"d","\u0111":"d","\u0112":"E","\u0114":"E","\u0116":"E","\u0118":"E","\u011a":"E","\u0113":"e","\u0115":"e","\u0117":"e","\u0119":"e","\u011b":"e","\u011c":"G","\u011e":"G","\u0120":"G","\u0122":"G","\u011d":"g","\u011f":"g","\u0121":"g","\u0123":"g","\u0124":"H","\u0126":"H","\u0125":"h","\u0127":"h","\u0128":"I","\u012a":"I","\u012c":"I","\u012e":"I","\u0130":"I","\u0129":"i","\u012b":"i","\u012d":"i","\u012f":"i",
"\u0131":"i","\u0134":"J","\u0135":"j","\u0136":"K","\u0137":"k","\u0138":"k","\u0139":"L","\u013b":"L","\u013d":"L","\u013f":"L","\u0141":"L","\u013a":"l","\u013c":"l","\u013e":"l","\u0140":"l","\u0142":"l","\u0143":"N","\u0145":"N","\u0147":"N","\u014a":"N","\u0144":"n","\u0146":"n","\u0148":"n","\u014b":"n","\u014c":"O","\u014e":"O","\u0150":"O","\u014d":"o","\u014f":"o","\u0151":"o","\u0154":"R","\u0156":"R","\u0158":"R","\u0155":"r","\u0157":"r","\u0159":"r","\u015a":"S","\u015c":"S","\u015e":"S",
"\u0160":"S","\u015b":"s","\u015d":"s","\u015f":"s","\u0161":"s","\u0162":"T","\u0164":"T","\u0166":"T","\u0163":"t","\u0165":"t","\u0167":"t","\u0168":"U","\u016a":"U","\u016c":"U","\u016e":"U","\u0170":"U","\u0172":"U","\u0169":"u","\u016b":"u","\u016d":"u","\u016f":"u","\u0171":"u","\u0173":"u","\u0174":"W","\u0175":"w","\u0176":"Y","\u0177":"y","\u0178":"Y","\u0179":"Z","\u017b":"Z","\u017d":"Z","\u017a":"z","\u017c":"z","\u017e":"z","\u0132":"IJ","\u0133":"ij","\u0152":"Oe","\u0153":"oe","\u0149":"'n",
"\u017f":"s"}),rn=w({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"}),en=w({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),un=function w(kt){function Et(t){return oi.call(t)}function Ot(t){if(_u(t)&&!tf(t)&&!(t instanceof Dt)){if(t instanceof Mt)return t;if(ei.call(t,"__wrapped__"))return Ce(t)}return new Mt(t)}function Rt(){}function Mt(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=F}function Dt(t){this.__wrapped__=t,this.__actions__=[],
this.__dir__=1,this.__filtered__=false,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function Ft(t){var n=-1,r=t?t.length:0;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function Nt(t){var n=-1,r=t?t.length:0;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function Zt(t){var n=-1,r=t?t.length:0;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function qt(t){var n=-1,r=t?t.length:0;for(this.__data__=new Zt;++n<r;)this.add(t[n])}function Kt(t){this.size=(this.__data__=new Nt(t)).size;
}function tn(t,n){var r,e=tf(t)||ou(t)?E(t.length,Yu):[],u=e.length,i=!!u;for(r in t)!n&&!ei.call(t,r)||i&&("length"==r||je(r,u))||e.push(r);return e}function on(t){var n=t.length;return n?t[cr(0,n-1)]:F}function fn(t,n){return We(Ur(t),n)}function cn(t){return We(Ur(t))}function an(t,n,r,e){return t===F||iu(t,Xu[r])&&!ei.call(e,r)?n:t}function ln(t,n,r){(r===F||iu(t[n],r))&&(typeof n!="number"||r!==F||n in t)||vn(t,n,r)}function sn(t,n,r){var e=t[n];ei.call(t,n)&&iu(e,r)&&(r!==F||n in t)||vn(t,n,r);
}function hn(t,n){for(var r=t.length;r--;)if(iu(t[r][0],n))return r;return-1}function pn(t,n,r,e){return to(t,function(t,u,i){n(e,t,r(t),i)}),e}function _n(t,n){return t&&Cr(n,Su(n),t)}function vn(t,n,r){"__proto__"==n&&pi?pi(t,n,{configurable:true,enumerable:true,value:r,writable:true}):t[n]=r}function gn(t,n){for(var r=-1,e=null==t,u=n.length,i=Pu(u);++r<u;)i[r]=e?F:Eu(t,n[r]);return i}function dn(t,n,r){return t===t&&(r!==F&&(t=t<=r?t:r),n!==F&&(t=t>=n?t:n)),t}function yn(t,n,r,e,i,o,f){var c;if(e&&(c=o?e(t,i,o,f):e(t)),
c!==F)return c;if(!pu(t))return t;if(i=tf(t)){if(c=de(t),!n)return Ur(t,c)}else{var a=Et(t),l="[object Function]"==a||"[object GeneratorFunction]"==a;if(rf(t))return Rr(t,n);if("[object Object]"==a||"[object Arguments]"==a||l&&!o){if(c=ye(l?{}:t),!n)return Mr(t,_n(c,t))}else{if(!Ct[a])return o?t:{};c=be(t,a,yn,n)}}if(f||(f=new Kt),o=f.get(t))return o;if(f.set(t,c),!i)var s=r?zn(t,Su,ao):Su(t);return u(s||t,function(u,i){s&&(i=u,u=t[i]),sn(c,i,yn(u,n,r,e,i,t,f))}),c}function bn(t){var n=Su(t);return function(r){
return xn(r,t,n)}}function xn(t,n,r){var e=r.length;if(null==t)return!e;for(t=Gu(t);e--;){var u=r[e],i=n[u],o=t[u];if(o===F&&!(u in t)||!i(o))return false}return true}function jn(t,n,r){if(typeof t!="function")throw new Hu("Expected a function");return po(function(){t.apply(F,r)},n)}function wn(t,n,r,e){var u=-1,i=c,o=true,f=t.length,s=[],h=n.length;if(!f)return s;r&&(n=l(n,S(r))),e?(i=a,o=false):200<=n.length&&(i=R,o=false,n=new qt(n));t:for(;++u<f;){var p=t[u],_=r?r(p):p,p=e||0!==p?p:0;if(o&&_===_){for(var v=h;v--;)if(n[v]===_)continue t;
s.push(p)}else i(n,_,e)||s.push(p)}return s}function mn(t,n){var r=true;return to(t,function(t,e,u){return r=!!n(t,e,u)}),r}function An(t,n,r){for(var e=-1,u=t.length;++e<u;){var i=t[e],o=n(i);if(null!=o&&(f===F?o===o&&!yu(o):r(o,f)))var f=o,c=i}return c}function kn(t,n){var r=[];return to(t,function(t,e,u){n(t,e,u)&&r.push(t)}),r}function En(t,n,r,e,u){var i=-1,o=t.length;for(r||(r=xe),u||(u=[]);++i<o;){var f=t[i];0<n&&r(f)?1<n?En(f,n-1,r,e,u):s(u,f):e||(u[u.length]=f)}return u}function On(t,n){return t&&ro(t,n,Su);
}function Sn(t,n){return t&&eo(t,n,Su)}function In(t,n){return f(n,function(n){return lu(t[n])})}function Rn(t,n){n=me(n,t)?[n]:Sr(n);for(var r=0,e=n.length;null!=t&&r<e;)t=t[Be(n[r++])];return r&&r==e?t:F}function zn(t,n,r){return n=n(t),tf(t)?n:s(n,r(t))}function Wn(t,n){return t>n}function Bn(t,n){return null!=t&&ei.call(t,n)}function Ln(t,n){return null!=t&&n in Gu(t)}function Un(t,n,r){for(var e=r?a:c,u=t[0].length,i=t.length,o=i,f=Pu(i),s=1/0,h=[];o--;){var p=t[o];o&&n&&(p=l(p,S(n))),s=zi(p.length,s),
f[o]=!r&&(n||120<=u&&120<=p.length)?new qt(o&&p):F}var p=t[0],_=-1,v=f[0];t:for(;++_<u&&h.length<s;){var g=p[_],d=n?n(g):g,g=r||0!==g?g:0;if(v?!R(v,d):!e(h,d,r)){for(o=i;--o;){var y=f[o];if(y?!R(y,d):!e(t[o],d,r))continue t}v&&v.push(d),h.push(g)}}return h}function Cn(t,n,r){var e={};return On(t,function(t,u,i){n(e,r(t),u,i)}),e}function Mn(t,n,e){return me(n,t)||(n=Sr(n),t=Ie(t,n),n=Fe(n)),n=null==t?t:t[Be(n)],null==n?F:r(n,t,e)}function Dn(t){return _u(t)&&"[object ArrayBuffer]"==oi.call(t)}function Tn(t){
return _u(t)&&"[object Date]"==oi.call(t)}function $n(t,n,r,e,u){if(t===n)n=true;else if(null==t||null==n||!pu(t)&&!_u(n))n=t!==t&&n!==n;else t:{var i=tf(t),o=tf(n),f="[object Array]",c="[object Array]";i||(f=Et(t),f="[object Arguments]"==f?"[object Object]":f),o||(c=Et(n),c="[object Arguments]"==c?"[object Object]":c);var a="[object Object]"==f,o="[object Object]"==c;if((c=f==c)&&!a)u||(u=new Kt),n=i||cf(t)?fe(t,n,$n,r,e,u):ce(t,n,f,$n,r,e,u);else{if(!(2&e)&&(i=a&&ei.call(t,"__wrapped__"),f=o&&ei.call(n,"__wrapped__"),
i||f)){t=i?t.value():t,n=f?n.value():n,u||(u=new Kt),n=$n(t,n,r,e,u);break t}if(c)n:if(u||(u=new Kt),i=2&e,f=Su(t),o=f.length,c=Su(n).length,o==c||i){for(a=o;a--;){var l=f[a];if(!(i?l in n:ei.call(n,l))){n=false;break n}}if((c=u.get(t))&&u.get(n))n=c==n;else{c=true,u.set(t,n),u.set(n,t);for(var s=i;++a<o;){var l=f[a],h=t[l],p=n[l];if(r)var _=i?r(p,h,l,n,t,u):r(h,p,l,t,n,u);if(_===F?h!==p&&!$n(h,p,r,e,u):!_){c=false;break}s||(s="constructor"==l)}c&&!s&&(r=t.constructor,e=n.constructor,r!=e&&"constructor"in t&&"constructor"in n&&!(typeof r=="function"&&r instanceof r&&typeof e=="function"&&e instanceof e)&&(c=false)),
u.delete(t),u.delete(n),n=c}}else n=false;else n=false}}return n}function Fn(t){return _u(t)&&"[object Map]"==Et(t)}function Nn(t,n,r,e){var u=r.length,i=u,o=!e;if(null==t)return!i;for(t=Gu(t);u--;){var f=r[u];if(o&&f[2]?f[1]!==t[f[0]]:!(f[0]in t))return false}for(;++u<i;){var f=r[u],c=f[0],a=t[c],l=f[1];if(o&&f[2]){if(a===F&&!(c in t))return false}else{if(f=new Kt,e)var s=e(a,l,c,t,n,f);if(s===F?!$n(l,a,e,3,f):!s)return false}}return true}function Pn(t){return!(!pu(t)||ni&&ni in t)&&(lu(t)?ci:bt).test(Le(t))}function Zn(t){
return pu(t)&&"[object RegExp]"==oi.call(t)}function qn(t){return _u(t)&&"[object Set]"==Et(t)}function Vn(t){return _u(t)&&hu(t.length)&&!!Ut[oi.call(t)]}function Kn(t){return typeof t=="function"?t:null==t?Cu:typeof t=="object"?tf(t)?Xn(t[0],t[1]):Qn(t):$u(t)}function Gn(t){if(!ke(t))return Ii(t);var n,r=[];for(n in Gu(t))ei.call(t,n)&&"constructor"!=n&&r.push(n);return r}function Jn(t){if(!pu(t)){var n=[];if(null!=t)for(var r in Gu(t))n.push(r);return n}r=ke(t);var e=[];for(n in t)("constructor"!=n||!r&&ei.call(t,n))&&e.push(n);
return e}function Yn(t,n){return t<n}function Hn(t,n){var r=-1,e=fu(t)?Pu(t.length):[];return to(t,function(t,u,i){e[++r]=n(t,u,i)}),e}function Qn(t){var n=_e(t);return 1==n.length&&n[0][2]?Ee(n[0][0],n[0][1]):function(r){return r===t||Nn(r,t,n)}}function Xn(t,n){return me(t)&&n===n&&!pu(n)?Ee(Be(t),n):function(r){var e=Eu(r,t);return e===F&&e===n?Ou(r,t):$n(n,e,F,3)}}function tr(t,n,r,e,i){if(t!==n){if(!tf(n)&&!cf(n))var o=Jn(n);u(o||n,function(u,f){if(o&&(f=u,u=n[f]),pu(u)){i||(i=new Kt);var c=f,a=i,l=t[c],s=n[c],h=a.get(s);
if(h)ln(t,c,h);else{var h=e?e(l,s,c+"",t,n,a):F,p=h===F;p&&(h=s,tf(s)||cf(s)?tf(l)?h=l:cu(l)?h=Ur(l):(p=false,h=yn(s,true)):gu(s)||ou(s)?ou(l)?h=Au(l):!pu(l)||r&&lu(l)?(p=false,h=yn(s,true)):h=l:p=false),p&&(a.set(s,h),tr(h,s,r,e,a),a.delete(s)),ln(t,c,h)}}else c=e?e(t[f],u,f+"",t,n,i):F,c===F&&(c=u),ln(t,f,c)})}}function nr(t,n){var r=t.length;if(r)return n+=0>n?r:0,je(n,r)?t[n]:F}function rr(t,n,r){var e=-1;return n=l(n.length?n:[Cu],S(he())),t=Hn(t,function(t){return{a:l(n,function(n){return n(t)}),b:++e,c:t
}}),A(t,function(t,n){var e;t:{e=-1;for(var u=t.a,i=n.a,o=u.length,f=r.length;++e<o;){var c=Wr(u[e],i[e]);if(c){e=e>=f?c:c*("desc"==r[e]?-1:1);break t}}e=t.b-n.b}return e})}function er(t,n){return t=Gu(t),ur(t,n,function(n,r){return r in t})}function ur(t,n,r){for(var e=-1,u=n.length,i={};++e<u;){var o=n[e],f=t[o];r(f,o)&&vn(i,o,f)}return i}function ir(t){return function(n){return Rn(n,t)}}function or(t,n,r,e){var u=e?y:d,i=-1,o=n.length,f=t;for(t===n&&(n=Ur(n)),r&&(f=l(t,S(r)));++i<o;)for(var c=0,a=n[i],a=r?r(a):a;-1<(c=u(f,a,c,e));)f!==t&&yi.call(f,c,1),
yi.call(t,c,1);return t}function fr(t,n){for(var r=t?n.length:0,e=r-1;r--;){var u=n[r];if(r==e||u!==i){var i=u;if(je(u))yi.call(t,u,1);else if(me(u,t))delete t[Be(u)];else{var u=Sr(u),o=Ie(t,u);null!=o&&delete o[Be(Fe(u))]}}}}function cr(t,n){return t+Ai(Li()*(n-t+1))}function ar(t,n){var r="";if(!t||1>n||9007199254740991<n)return r;do n%2&&(r+=t),(n=Ai(n/2))&&(t+=t);while(n);return r}function lr(t,n){return _o(Se(t,n,Cu),t+"")}function sr(t){return on(zu(t))}function hr(t,n){return We(zu(t),n)}function pr(t,n,r,e){
if(!pu(t))return t;n=me(n,t)?[n]:Sr(n);for(var u=-1,i=n.length,o=i-1,f=t;null!=f&&++u<i;){var c=Be(n[u]),a=r;if(u!=o){var l=f[c],a=e?e(l,c,f):F;a===F&&(a=pu(l)?l:je(n[u+1])?[]:{})}sn(f,c,a),f=f[c]}return t}function _r(t){return We(zu(t))}function vr(t,n,r){var e=-1,u=t.length;for(0>n&&(n=-n>u?0:u+n),r=r>u?u:r,0>r&&(r+=u),u=n>r?0:r-n>>>0,n>>>=0,r=Pu(u);++e<u;)r[e]=t[e+n];return r}function gr(t,n){var r;return to(t,function(t,e,u){return r=n(t,e,u),!r}),!!r}function dr(t,n,r){var e=0,u=t?t.length:e;
if(typeof n=="number"&&n===n&&2147483647>=u){for(;e<u;){var i=e+u>>>1,o=t[i];null!==o&&!yu(o)&&(r?o<=n:o<n)?e=i+1:u=i}return u}return yr(t,n,Cu,r)}function yr(t,n,r,e){n=r(n);for(var u=0,i=t?t.length:0,o=n!==n,f=null===n,c=yu(n),a=n===F;u<i;){var l=Ai((u+i)/2),s=r(t[l]),h=s!==F,p=null===s,_=s===s,v=yu(s);(o?e||_:a?_&&(e||h):f?_&&h&&(e||!p):c?_&&h&&!p&&(e||!v):p||v?0:e?s<=n:s<n)?u=l+1:i=l}return zi(i,4294967294)}function br(t,n){for(var r=-1,e=t.length,u=0,i=[];++r<e;){var o=t[r],f=n?n(o):o;if(!r||!iu(f,c)){
var c=f;i[u++]=0===o?0:o}}return i}function xr(t){return typeof t=="number"?t:yu(t)?P:+t}function jr(t){if(typeof t=="string")return t;if(yu(t))return Qi?Qi.call(t):"";var n=t+"";return"0"==n&&1/t==-N?"-0":n}function wr(t,n,r){var e=-1,u=c,i=t.length,o=true,f=[],l=f;if(r)o=false,u=a;else if(200<=i){if(u=n?null:fo(t))return M(u);o=false,u=R,l=new qt}else l=n?[]:f;t:for(;++e<i;){var s=t[e],h=n?n(s):s,s=r||0!==s?s:0;if(o&&h===h){for(var p=l.length;p--;)if(l[p]===h)continue t;n&&l.push(h),f.push(s)}else u(l,h,r)||(l!==f&&l.push(h),
f.push(s))}return f}function mr(t,n,r,e){for(var u=t.length,i=e?u:-1;(e?i--:++i<u)&&n(t[i],i,t););return r?vr(t,e?0:i,e?i+1:u):vr(t,e?i+1:0,e?u:i)}function Ar(t,n){var r=t;return r instanceof Dt&&(r=r.value()),h(n,function(t,n){return n.func.apply(n.thisArg,s([t],n.args))},r)}function kr(t,n,r){for(var e=-1,u=t.length;++e<u;)var i=i?s(wn(i,t[e],n,r),wn(t[e],i,n,r)):t[e];return i&&i.length?wr(i,n,r):[]}function Er(t,n,r){for(var e=-1,u=t.length,i=n.length,o={};++e<u;)r(o,t[e],e<i?n[e]:F);return o}
function Or(t){return cu(t)?t:[]}function Sr(t){return tf(t)?t:vo(t)}function Ir(t,n,r){var e=t.length;return r=r===F?e:r,!n&&r>=e?t:vr(t,n,r)}function Rr(t,n){if(n)return t.slice();var r=t.length,r=hi?hi(r):new t.constructor(r);return t.copy(r),r}function zr(t){var n=new t.constructor(t.byteLength);return new si(n).set(new si(t)),n}function Wr(t,n){if(t!==n){var r=t!==F,e=null===t,u=t===t,i=yu(t),o=n!==F,f=null===n,c=n===n,a=yu(n);if(!f&&!a&&!i&&t>n||i&&o&&c&&!f&&!a||e&&o&&c||!r&&c||!u)return 1;if(!e&&!i&&!a&&t<n||a&&r&&u&&!e&&!i||f&&r&&u||!o&&u||!c)return-1;
}return 0}function Br(t,n,r,e){var u=-1,i=t.length,o=r.length,f=-1,c=n.length,a=Ri(i-o,0),l=Pu(c+a);for(e=!e;++f<c;)l[f]=n[f];for(;++u<o;)(e||u<i)&&(l[r[u]]=t[u]);for(;a--;)l[f++]=t[u++];return l}function Lr(t,n,r,e){var u=-1,i=t.length,o=-1,f=r.length,c=-1,a=n.length,l=Ri(i-f,0),s=Pu(l+a);for(e=!e;++u<l;)s[u]=t[u];for(l=u;++c<a;)s[l+c]=n[c];for(;++o<f;)(e||u<i)&&(s[l+r[o]]=t[u++]);return s}function Ur(t,n){var r=-1,e=t.length;for(n||(n=Pu(e));++r<e;)n[r]=t[r];return n}function Cr(t,n,r,e){var u=!r;
r||(r={});for(var i=-1,o=n.length;++i<o;){var f=n[i],c=e?e(r[f],t[f],f,r,t):F;c===F&&(c=t[f]),u?vn(r,f,c):sn(r,f,c)}return r}function Mr(t,n){return Cr(t,ao(t),n)}function Dr(t,n){return function(r,u){var i=tf(r)?e:pn,o=n?n():{};return i(r,t,he(u,2),o)}}function Tr(t){return lr(function(n,r){var e=-1,u=r.length,i=1<u?r[u-1]:F,o=2<u?r[2]:F,i=3<t.length&&typeof i=="function"?(u--,i):F;for(o&&we(r[0],r[1],o)&&(i=3>u?F:i,u=1),n=Gu(n);++e<u;)(o=r[e])&&t(n,o,e,i);return n})}function $r(t,n){return function(r,e){
if(null==r)return r;if(!fu(r))return t(r,e);for(var u=r.length,i=n?u:-1,o=Gu(r);(n?i--:++i<u)&&false!==e(o[i],i,o););return r}}function Fr(t){return function(n,r,e){var u=-1,i=Gu(n);e=e(n);for(var o=e.length;o--;){var f=e[t?o:++u];if(false===r(i[f],f,i))break}return n}}function Nr(t,n,r){function e(){return(this&&this!==Pt&&this instanceof e?i:t).apply(u?r:this,arguments)}var u=1&n,i=qr(t);return e}function Pr(t){return function(n){n=ku(n);var r=Wt.test(n)?$(n):F,e=r?r[0]:n.charAt(0);return n=r?Ir(r,1).join(""):n.slice(1),
e[t]()+n}}function Zr(t){return function(n){return h(Lu(Bu(n).replace(St,"")),t,"")}}function qr(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var r=Xi(t.prototype),n=t.apply(r,n);return pu(n)?n:r;
}}function Vr(t,n,e){function u(){for(var o=arguments.length,f=Pu(o),c=o,a=se(u);c--;)f[c]=arguments[c];return c=3>o&&f[0]!==a&&f[o-1]!==a?[]:C(f,a),o-=c.length,o<e?ee(t,n,Jr,u.placeholder,F,f,c,F,F,e-o):r(this&&this!==Pt&&this instanceof u?i:t,this,f)}var i=qr(t);return u}function Kr(t){return function(n,r,e){var u=Gu(n);if(!fu(n)){var i=he(r,3);n=Su(n),r=function(t){return i(u[t],t,u)}}return r=t(n,r,e),-1<r?u[i?n[r]:r]:F}}function Gr(t){return ae(function(n){var r=n.length,e=r,u=Mt.prototype.thru;
for(t&&n.reverse();e--;){var i=n[e];if(typeof i!="function")throw new Hu("Expected a function");if(u&&!o&&"wrapper"==le(i))var o=new Mt([],true)}for(e=o?e:r;++e<r;)var i=n[e],u=le(i),f="wrapper"==u?co(i):F,o=f&&Ae(f[0])&&424==f[1]&&!f[4].length&&1==f[9]?o[le(f[0])].apply(o,f[3]):1==i.length&&Ae(i)?o[u]():o.thru(i);return function(){var t=arguments,e=t[0];if(o&&1==t.length&&tf(e)&&200<=e.length)return o.plant(e).value();for(var u=0,t=r?n[u].apply(this,t):e;++u<r;)t=n[u].call(this,t);return t}})}function Jr(t,n,r,e,u,i,o,f,c,a){
function l(){for(var d=arguments.length,y=Pu(d),b=d;b--;)y[b]=arguments[b];if(_){var x,j=se(l),b=y.length;for(x=0;b--;)y[b]===j&&++x}if(e&&(y=Br(y,e,u,_)),i&&(y=Lr(y,i,o,_)),d-=x,_&&d<a)return j=C(y,j),ee(t,n,Jr,l.placeholder,r,y,j,f,c,a-d);if(j=h?r:this,b=p?j[t]:t,d=y.length,f){x=y.length;for(var w=zi(f.length,x),m=Ur(y);w--;){var A=f[w];y[w]=je(A,x)?m[A]:F}}else v&&1<d&&y.reverse();return s&&c<d&&(y.length=c),this&&this!==Pt&&this instanceof l&&(b=g||qr(b)),b.apply(j,y)}var s=128&n,h=1&n,p=2&n,_=24&n,v=512&n,g=p?F:qr(t);
return l}function Yr(t,n){return function(r,e){return Cn(r,t,n(e))}}function Hr(t,n){return function(r,e){var u;if(r===F&&e===F)return n;if(r!==F&&(u=r),e!==F){if(u===F)return e;typeof r=="string"||typeof e=="string"?(r=jr(r),e=jr(e)):(r=xr(r),e=xr(e)),u=t(r,e)}return u}}function Qr(t){return ae(function(n){return n=l(n,S(he())),lr(function(e){var u=this;return t(n,function(t){return r(t,u,e)})})})}function Xr(t,n){n=n===F?" ":jr(n);var r=n.length;return 2>r?r?ar(n,t):n:(r=ar(n,mi(t/T(n))),Wt.test(n)?Ir($(r),0,t).join(""):r.slice(0,t));
}function te(t,n,e,u){function i(){for(var n=-1,c=arguments.length,a=-1,l=u.length,s=Pu(l+c),h=this&&this!==Pt&&this instanceof i?f:t;++a<l;)s[a]=u[a];for(;c--;)s[a++]=arguments[++n];return r(h,o?e:this,s)}var o=1&n,f=qr(t);return i}function ne(t){return function(n,r,e){e&&typeof e!="number"&&we(n,r,e)&&(r=e=F),n=xu(n),r===F?(r=n,n=0):r=xu(r),e=e===F?n<r?1:-1:xu(e);var u=-1;r=Ri(mi((r-n)/(e||1)),0);for(var i=Pu(r);r--;)i[t?r:++u]=n,n+=e;return i}}function re(t){return function(n,r){return typeof n=="string"&&typeof r=="string"||(n=mu(n),
r=mu(r)),t(n,r)}}function ee(t,n,r,e,u,i,o,f,c,a){var l=8&n,s=l?o:F;o=l?F:o;var h=l?i:F;return i=l?F:i,n=(n|(l?32:64))&~(l?64:32),4&n||(n&=-4),u=[t,n,u,h,s,i,o,f,c,a],r=r.apply(F,u),Ae(t)&&ho(r,u),r.placeholder=e,Re(r,t,n)}function ue(t){var n=Ku[t];return function(t,r){if(t=mu(t),r=zi(ju(r),292)){var e=(ku(t)+"e").split("e"),e=n(e[0]+"e"+(+e[1]+r)),e=(ku(e)+"e").split("e");return+(e[0]+"e"+(+e[1]-r))}return n(t)}}function ie(t){return function(n){var r=Et(n);return"[object Map]"==r?L(n):"[object Set]"==r?D(n):O(n,t(n));
}}function oe(t,n,r,e,u,i,o,f){var c=2&n;if(!c&&typeof t!="function")throw new Hu("Expected a function");var a=e?e.length:0;if(a||(n&=-97,e=u=F),o=o===F?o:Ri(ju(o),0),f=f===F?f:ju(f),a-=u?u.length:0,64&n){var l=e,s=u;e=u=F}var h=c?F:co(t);return i=[t,n,r,e,u,l,s,i,o,f],h&&(r=i[1],t=h[1],n=r|t,e=128==t&&8==r||128==t&&256==r&&i[7].length<=h[8]||384==t&&h[7].length<=h[8]&&8==r,131>n||e)&&(1&t&&(i[2]=h[2],n|=1&r?0:4),(r=h[3])&&(e=i[3],i[3]=e?Br(e,r,h[4]):r,i[4]=e?C(i[3],"__lodash_placeholder__"):h[4]),
(r=h[5])&&(e=i[5],i[5]=e?Lr(e,r,h[6]):r,i[6]=e?C(i[5],"__lodash_placeholder__"):h[6]),(r=h[7])&&(i[7]=r),128&t&&(i[8]=null==i[8]?h[8]:zi(i[8],h[8])),null==i[9]&&(i[9]=h[9]),i[0]=h[0],i[1]=n),t=i[0],n=i[1],r=i[2],e=i[3],u=i[4],f=i[9]=null==i[9]?c?0:t.length:Ri(i[9]-a,0),!f&&24&n&&(n&=-25),Re((h?uo:ho)(n&&1!=n?8==n||16==n?Vr(t,n,f):32!=n&&33!=n||u.length?Jr.apply(F,i):te(t,n,r,e):Nr(t,n,r),i),t,n)}function fe(t,n,r,e,u,i){var o=2&u,f=t.length,c=n.length;if(f!=c&&!(o&&c>f))return false;if((c=i.get(t))&&i.get(n))return c==n;
var c=-1,a=true,l=1&u?new qt:F;for(i.set(t,n),i.set(n,t);++c<f;){var s=t[c],h=n[c];if(e)var p=o?e(h,s,c,n,t,i):e(s,h,c,t,n,i);if(p!==F){if(p)continue;a=false;break}if(l){if(!_(n,function(t,n){if(!R(l,n)&&(s===t||r(s,t,e,u,i)))return l.push(n)})){a=false;break}}else if(s!==h&&!r(s,h,e,u,i)){a=false;break}}return i.delete(t),i.delete(n),a}function ce(t,n,r,e,u,i,o){switch(r){case"[object DataView]":if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)break;t=t.buffer,n=n.buffer;case"[object ArrayBuffer]":
if(t.byteLength!=n.byteLength||!e(new si(t),new si(n)))break;return true;case"[object Boolean]":case"[object Date]":case"[object Number]":return iu(+t,+n);case"[object Error]":return t.name==n.name&&t.message==n.message;case"[object RegExp]":case"[object String]":return t==n+"";case"[object Map]":var f=L;case"[object Set]":if(f||(f=M),t.size!=n.size&&!(2&i))break;return(r=o.get(t))?r==n:(i|=1,o.set(t,n),n=fe(f(t),f(n),e,u,i,o),o.delete(t),n);case"[object Symbol]":if(Hi)return Hi.call(t)==Hi.call(n)}
return false}function ae(t){return _o(Se(t,F,Te),t+"")}function le(t){for(var n=t.name+"",r=Zi[n],e=ei.call(Zi,n)?r.length:0;e--;){var u=r[e],i=u.func;if(null==i||i==t)return u.name}return n}function se(t){return(ei.call(Ot,"placeholder")?Ot:t).placeholder}function he(){var t=Ot.iteratee||Mu,t=t===Mu?Kn:t;return arguments.length?t(arguments[0],arguments[1]):t}function pe(t,n){var r=t.__data__,e=typeof n;return("string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n)?r[typeof n=="string"?"string":"hash"]:r.map;
}function _e(t){for(var n=Su(t),r=n.length;r--;){var e=n[r],u=t[e];n[r]=[e,u,u===u&&!pu(u)]}return n}function ve(t,n){var r=null==t?F:t[n];return Pn(r)?r:F}function ge(t,n,r){n=me(n,t)?[n]:Sr(n);for(var e=-1,u=n.length,i=false;++e<u;){var o=Be(n[e]);if(!(i=null!=t&&r(t,o)))break;t=t[o]}return i||++e!=u?i:(u=t?t.length:0,!!u&&hu(u)&&je(o,u)&&(tf(t)||ou(t)))}function de(t){var n=t.length,r=t.constructor(n);return n&&"string"==typeof t[0]&&ei.call(t,"index")&&(r.index=t.index,r.input=t.input),r}function ye(t){
return typeof t.constructor!="function"||ke(t)?{}:Xi(_i(t))}function be(r,e,u,i){var o=r.constructor;switch(e){case"[object ArrayBuffer]":return zr(r);case"[object Boolean]":case"[object Date]":return new o(+r);case"[object DataView]":return e=i?zr(r.buffer):r.buffer,new r.constructor(e,r.byteOffset,r.byteLength);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":
case"[object Uint16Array]":case"[object Uint32Array]":return e=i?zr(r.buffer):r.buffer,new r.constructor(e,r.byteOffset,r.length);case"[object Map]":return e=i?u(L(r),true):L(r),h(e,t,new r.constructor);case"[object Number]":case"[object String]":return new o(r);case"[object RegExp]":return e=new r.constructor(r.source,gt.exec(r)),e.lastIndex=r.lastIndex,e;case"[object Set]":return e=i?u(M(r),true):M(r),h(e,n,new r.constructor);case"[object Symbol]":return Hi?Gu(Hi.call(r)):{}}}function xe(t){return tf(t)||ou(t)||!!(bi&&t&&t[bi]);
}function je(t,n){return n=null==n?9007199254740991:n,!!n&&(typeof t=="number"||jt.test(t))&&-1<t&&0==t%1&&t<n}function we(t,n,r){if(!pu(r))return false;var e=typeof n;return!!("number"==e?fu(r)&&je(n,r.length):"string"==e&&n in r)&&iu(r[n],t)}function me(t,n){if(tf(t))return false;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!yu(t))||(rt.test(t)||!nt.test(t)||null!=n&&t in Gu(n))}function Ae(t){var n=le(t),r=Ot[n];return typeof r=="function"&&n in Dt.prototype&&(t===r||(n=co(r),
!!n&&t===n[0]))}function ke(t){var n=t&&t.constructor;return t===(typeof n=="function"&&n.prototype||Xu)}function Ee(t,n){return function(r){return null!=r&&(r[t]===n&&(n!==F||t in Gu(r)))}}function Oe(t,n,r,e,u,i){return pu(t)&&pu(n)&&(i.set(n,t),tr(t,n,F,Oe,i),i.delete(n)),t}function Se(t,n,e){return n=Ri(n===F?t.length-1:n,0),function(){for(var u=arguments,i=-1,o=Ri(u.length-n,0),f=Pu(o);++i<o;)f[i]=u[n+i];for(i=-1,o=Pu(n+1);++i<n;)o[i]=u[i];return o[n]=e(f),r(t,this,o)}}function Ie(t,n){return 1==n.length?t:Rn(t,vr(n,0,-1));
}function Re(t,n,r){var e=n+"";n=_o;var u,i=Ue;return u=(u=e.match(st))?u[1].split(ht):[],r=i(u,r),(i=r.length)&&(u=i-1,r[u]=(1<i?"& ":"")+r[u],r=r.join(2<i?", ":" "),e=e.replace(lt,"{\n/* [wrapped with "+r+"] */\n")),n(t,e)}function ze(t){var n=0,r=0;return function(){var e=Wi(),u=16-(e-r);if(r=e,0<u){if(500<=++n)return arguments[0]}else n=0;return t.apply(F,arguments)}}function We(t,n){var r=-1,e=t.length,u=e-1;for(n=n===F?e:dn(n,0,e);++r<n;){var e=cr(r,u),i=t[e];t[e]=t[r],t[r]=i}return t.length=n,
t}function Be(t){if(typeof t=="string"||yu(t))return t;var n=t+"";return"0"==n&&1/t==-N?"-0":n}function Le(t){if(null!=t){try{return ri.call(t)}catch(t){}return t+""}return""}function Ue(t,n){return u(Z,function(r){var e="_."+r[0];n&r[1]&&!c(t,e)&&t.push(e)}),t.sort()}function Ce(t){if(t instanceof Dt)return t.clone();var n=new Mt(t.__wrapped__,t.__chain__);return n.__actions__=Ur(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}function Me(t,n,r){var e=t?t.length:0;return e?(r=null==r?0:ju(r),
0>r&&(r=Ri(e+r,0)),g(t,he(n,3),r)):-1}function De(t,n,r){var e=t?t.length:0;if(!e)return-1;var u=e-1;return r!==F&&(u=ju(r),u=0>r?Ri(e+u,0):zi(u,e-1)),g(t,he(n,3),u,true)}function Te(t){return t&&t.length?En(t,1):[]}function $e(t){return t&&t.length?t[0]:F}function Fe(t){var n=t?t.length:0;return n?t[n-1]:F}function Ne(t,n){return t&&t.length&&n&&n.length?or(t,n):t}function Pe(t){return t?Ui.call(t):t}function Ze(t){if(!t||!t.length)return[];var n=0;return t=f(t,function(t){if(cu(t))return n=Ri(t.length,n),
!0}),E(n,function(n){return l(t,j(n))})}function qe(t,n){if(!t||!t.length)return[];var e=Ze(t);return null==n?e:l(e,function(t){return r(n,F,t)})}function Ve(t){return t=Ot(t),t.__chain__=true,t}function Ke(t,n){return n(t)}function Ge(){return this}function Je(t,n){return(tf(t)?u:to)(t,he(n,3))}function Ye(t,n){return(tf(t)?i:no)(t,he(n,3))}function He(t,n){return(tf(t)?l:Hn)(t,he(n,3))}function Qe(t,n,r){return n=r?F:n,n=t&&null==n?t.length:n,oe(t,128,F,F,F,F,n)}function Xe(t,n){var r;if(typeof n!="function")throw new Hu("Expected a function");
return t=ju(t),function(){return 0<--t&&(r=n.apply(this,arguments)),1>=t&&(n=F),r}}function tu(t,n,r){return n=r?F:n,t=oe(t,8,F,F,F,F,F,n),t.placeholder=tu.placeholder,t}function nu(t,n,r){return n=r?F:n,t=oe(t,16,F,F,F,F,F,n),t.placeholder=nu.placeholder,t}function ru(t,n,r){function e(n){var r=c,e=a;return c=a=F,_=n,s=t.apply(e,r)}function u(t){var r=t-p;return t-=_,p===F||r>=n||0>r||g&&t>=l}function i(){var t=Po();if(u(t))return o(t);var r,e=po;r=t-_,t=n-(t-p),r=g?zi(t,l-r):t,h=e(i,r)}function o(t){
return h=F,d&&c?e(t):(c=a=F,s)}function f(){var t=Po(),r=u(t);if(c=arguments,a=this,p=t,r){if(h===F)return _=t=p,h=po(i,n),v?e(t):s;if(g)return h=po(i,n),e(p)}return h===F&&(h=po(i,n)),s}var c,a,l,s,h,p,_=0,v=false,g=false,d=true;if(typeof t!="function")throw new Hu("Expected a function");return n=mu(n)||0,pu(r)&&(v=!!r.leading,l=(g="maxWait"in r)?Ri(mu(r.maxWait)||0,n):l,d="trailing"in r?!!r.trailing:d),f.cancel=function(){h!==F&&oo(h),_=0,c=p=a=h=F},f.flush=function(){return h===F?s:o(Po())},f}function eu(t,n){
function r(){var e=arguments,u=n?n.apply(this,e):e[0],i=r.cache;return i.has(u)?i.get(u):(e=t.apply(this,e),r.cache=i.set(u,e)||i,e)}if(typeof t!="function"||n&&typeof n!="function")throw new Hu("Expected a function");return r.cache=new(eu.Cache||Zt),r}function uu(t){if(typeof t!="function")throw new Hu("Expected a function");return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2]);
}return!t.apply(this,n)}}function iu(t,n){return t===n||t!==t&&n!==n}function ou(t){return cu(t)&&ei.call(t,"callee")&&(!di.call(t,"callee")||"[object Arguments]"==oi.call(t))}function fu(t){return null!=t&&hu(t.length)&&!lu(t)}function cu(t){return _u(t)&&fu(t)}function au(t){return!!_u(t)&&("[object Error]"==oi.call(t)||typeof t.message=="string"&&typeof t.name=="string")}function lu(t){return t=pu(t)?oi.call(t):"","[object Function]"==t||"[object GeneratorFunction]"==t}function su(t){return typeof t=="number"&&t==ju(t);
}function hu(t){return typeof t=="number"&&-1<t&&0==t%1&&9007199254740991>=t}function pu(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function _u(t){return null!=t&&typeof t=="object"}function vu(t){return typeof t=="number"||_u(t)&&"[object Number]"==oi.call(t)}function gu(t){return!(!_u(t)||"[object Object]"!=oi.call(t))&&(t=_i(t),null===t||(t=ei.call(t,"constructor")&&t.constructor,typeof t=="function"&&t instanceof t&&ri.call(t)==ii))}function du(t){return typeof t=="string"||!tf(t)&&_u(t)&&"[object String]"==oi.call(t);
}function yu(t){return typeof t=="symbol"||_u(t)&&"[object Symbol]"==oi.call(t)}function bu(t){if(!t)return[];if(fu(t))return du(t)?$(t):Ur(t);if(vi&&t[vi]){t=t[vi]();for(var n,r=[];!(n=t.next()).done;)r.push(n.value);return r}return n=Et(t),("[object Map]"==n?L:"[object Set]"==n?M:zu)(t)}function xu(t){return t?(t=mu(t),t===N||t===-N?1.7976931348623157e308*(0>t?-1:1):t===t?t:0):0===t?t:0}function ju(t){t=xu(t);var n=t%1;return t===t?n?t-n:t:0}function wu(t){return t?dn(ju(t),0,4294967295):0}function mu(t){
if(typeof t=="number")return t;if(yu(t))return P;if(pu(t)&&(t=typeof t.valueOf=="function"?t.valueOf():t,t=pu(t)?t+"":t),typeof t!="string")return 0===t?t:+t;t=t.replace(ft,"");var n=yt.test(t);return n||xt.test(t)?$t(t.slice(2),n?2:8):dt.test(t)?P:+t}function Au(t){return Cr(t,Iu(t))}function ku(t){return null==t?"":jr(t)}function Eu(t,n,r){return t=null==t?F:Rn(t,n),t===F?r:t}function Ou(t,n){return null!=t&&ge(t,n,Ln)}function Su(t){return fu(t)?tn(t):Gn(t)}function Iu(t){return fu(t)?tn(t,true):Jn(t);
}function Ru(t,n){return null==t?{}:ur(t,zn(t,Iu,lo),he(n))}function zu(t){return t?I(t,Su(t)):[]}function Wu(t){return Lf(ku(t).toLowerCase())}function Bu(t){return(t=ku(t))&&t.replace(wt,nn).replace(It,"")}function Lu(t,n,r){return t=ku(t),n=r?F:n,n===F?Bt.test(t)?t.match(zt)||[]:t.match(pt)||[]:t.match(n)||[]}function Uu(t){return function(){return t}}function Cu(t){return t}function Mu(t){return Kn(typeof t=="function"?t:yn(t,true))}function Du(t,n,r){var e=Su(n),i=In(n,e);null!=r||pu(n)&&(i.length||!e.length)||(r=n,
n=t,t=this,i=In(n,Su(n)));var o=!(pu(r)&&"chain"in r&&!r.chain),f=lu(t);return u(i,function(r){var e=n[r];t[r]=e,f&&(t.prototype[r]=function(){var n=this.__chain__;if(o||n){var r=t(this.__wrapped__);return(r.__actions__=Ur(this.__actions__)).push({func:e,args:arguments,thisArg:t}),r.__chain__=n,r}return e.apply(t,s([this.value()],arguments))})}),t}function Tu(){}function $u(t){return me(t)?j(Be(t)):ir(t)}function Fu(){return[]}function Nu(){return false}kt=kt?un.defaults(Pt.Object(),kt,un.pick(Pt,Lt)):Pt;
var Pu=kt.Array,Zu=kt.Date,qu=kt.Error,Vu=kt.Function,Ku=kt.Math,Gu=kt.Object,Ju=kt.RegExp,Yu=kt.String,Hu=kt.TypeError,Qu=Pu.prototype,Xu=Gu.prototype,ti=kt["__core-js_shared__"],ni=function(){var t=/[^.]+$/.exec(ti&&ti.keys&&ti.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),ri=Vu.prototype.toString,ei=Xu.hasOwnProperty,ui=0,ii=ri.call(Gu),oi=Xu.toString,fi=Pt._,ci=Ju("^"+ri.call(ei).replace(it,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ai=Vt?kt.Buffer:F,li=kt.Symbol,si=kt.Uint8Array,hi=ai?ai.f:F,pi=Gu.defineProperty,_i=U(Gu.getPrototypeOf,Gu),vi=li?li.iterator:F,gi=Gu.create,di=Xu.propertyIsEnumerable,yi=Qu.splice,bi=li?li.isConcatSpreadable:F,xi=kt.clearTimeout!==Pt.clearTimeout&&kt.clearTimeout,ji=Zu&&Zu.now!==Pt.Date.now&&Zu.now,wi=kt.setTimeout!==Pt.setTimeout&&kt.setTimeout,mi=Ku.ceil,Ai=Ku.floor,ki=Gu.getOwnPropertySymbols,Ei=ai?ai.isBuffer:F,Oi=kt.isFinite,Si=Qu.join,Ii=U(Gu.keys,Gu),Ri=Ku.max,zi=Ku.min,Wi=Zu.now,Bi=kt.parseInt,Li=Ku.random,Ui=Qu.reverse,Ci=ve(kt,"DataView"),Mi=ve(kt,"Map"),Di=ve(kt,"Promise"),Ti=ve(kt,"Set"),$i=ve(kt,"WeakMap"),Fi=ve(Gu,"create"),Ni=ve(Gu,"defineProperty"),Pi=$i&&new $i,Zi={},qi=Le(Ci),Vi=Le(Mi),Ki=Le(Di),Gi=Le(Ti),Ji=Le($i),Yi=li?li.prototype:F,Hi=Yi?Yi.valueOf:F,Qi=Yi?Yi.toString:F,Xi=function(){
function t(){}return function(n){return pu(n)?gi?gi(n):(t.prototype=prototype,n=new t,t.prototype=F,n):{}}}();Ot.templateSettings={escape:Q,evaluate:X,interpolate:tt,variable:"",imports:{_:Ot}},Ot.prototype=Rt.prototype,Ot.prototype.constructor=Ot,Mt.prototype=Xi(Rt.prototype),Mt.prototype.constructor=Mt,Dt.prototype=Xi(Rt.prototype),Dt.prototype.constructor=Dt,Ft.prototype.clear=function(){this.__data__=Fi?Fi(null):{},this.size=0},Ft.prototype.delete=function(t){return t=this.has(t)&&delete this.__data__[t],
this.size-=t?1:0,t},Ft.prototype.get=function(t){var n=this.__data__;return Fi?(t=n[t],"__lodash_hash_undefined__"===t?F:t):ei.call(n,t)?n[t]:F},Ft.prototype.has=function(t){var n=this.__data__;return Fi?n[t]!==F:ei.call(n,t)},Ft.prototype.set=function(t,n){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=Fi&&n===F?"__lodash_hash_undefined__":n,this},Nt.prototype.clear=function(){this.__data__=[],this.size=0},Nt.prototype.delete=function(t){var n=this.__data__;return t=hn(n,t),!(0>t)&&(t==n.length-1?n.pop():yi.call(n,t,1),
--this.size,true)},Nt.prototype.get=function(t){var n=this.__data__;return t=hn(n,t),0>t?F:n[t][1]},Nt.prototype.has=function(t){return-1<hn(this.__data__,t)},Nt.prototype.set=function(t,n){var r=this.__data__,e=hn(r,t);return 0>e?(++this.size,r.push([t,n])):r[e][1]=n,this},Zt.prototype.clear=function(){this.size=0,this.__data__={hash:new Ft,map:new(Mi||Nt),string:new Ft}},Zt.prototype.delete=function(t){return t=pe(this,t).delete(t),this.size-=t?1:0,t},Zt.prototype.get=function(t){return pe(this,t).get(t);
},Zt.prototype.has=function(t){return pe(this,t).has(t)},Zt.prototype.set=function(t,n){var r=pe(this,t),e=r.size;return r.set(t,n),this.size+=r.size==e?0:1,this},qt.prototype.add=qt.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},qt.prototype.has=function(t){return this.__data__.has(t)},Kt.prototype.clear=function(){this.__data__=new Nt,this.size=0},Kt.prototype.delete=function(t){var n=this.__data__;return t=n.delete(t),this.size=n.size,t},Kt.prototype.get=function(t){
return this.__data__.get(t)},Kt.prototype.has=function(t){return this.__data__.has(t)},Kt.prototype.set=function(t,n){var r=this.__data__;if(r instanceof Nt){var e=r.__data__;if(!Mi||199>e.length)return e.push([t,n]),this.size=++r.size,this;r=this.__data__=new Zt(e)}return r.set(t,n),this.size=r.size,this};var to=$r(On),no=$r(Sn,true),ro=Fr(),eo=Fr(true),uo=Pi?function(t,n){return Pi.set(t,n),t}:Cu,io=Ni?function(t,n){return Ni(t,"toString",{configurable:true,enumerable:false,value:Uu(n),writable:true})}:Cu,oo=xi||function(t){
return Pt.clearTimeout(t)},fo=Ti&&1/M(new Ti([,-0]))[1]==N?function(t){return new Ti(t)}:Tu,co=Pi?function(t){return Pi.get(t)}:Tu,ao=ki?U(ki,Gu):Fu,lo=ki?function(t){for(var n=[];t;)s(n,ao(t)),t=_i(t);return n}:Fu;(Ci&&"[object DataView]"!=Et(new Ci(new ArrayBuffer(1)))||Mi&&"[object Map]"!=Et(new Mi)||Di&&"[object Promise]"!=Et(Di.resolve())||Ti&&"[object Set]"!=Et(new Ti)||$i&&"[object WeakMap]"!=Et(new $i))&&(Et=function(t){var n=oi.call(t);if(t=(t="[object Object]"==n?t.constructor:F)?Le(t):F)switch(t){
case qi:return"[object DataView]";case Vi:return"[object Map]";case Ki:return"[object Promise]";case Gi:return"[object Set]";case Ji:return"[object WeakMap]"}return n});var so=ti?lu:Nu,ho=ze(uo),po=wi||function(t,n){return Pt.setTimeout(t,n)},_o=ze(io),vo=function(t){t=eu(t,function(t){return 500===n.size&&n.clear(),t});var n=t.cache;return t}(function(t){t=ku(t);var n=[];return et.test(t)&&n.push(""),t.replace(ut,function(t,r,e,u){n.push(e?u.replace(_t,"$1"):r||t)}),n}),go=lr(function(t,n){return cu(t)?wn(t,En(n,1,cu,true)):[];
}),yo=lr(function(t,n){var r=Fe(n);return cu(r)&&(r=F),cu(t)?wn(t,En(n,1,cu,true),he(r,2)):[]}),bo=lr(function(t,n){var r=Fe(n);return cu(r)&&(r=F),cu(t)?wn(t,En(n,1,cu,true),F,r):[]}),xo=lr(function(t){var n=l(t,Or);return n.length&&n[0]===t[0]?Un(n):[]}),jo=lr(function(t){var n=Fe(t),r=l(t,Or);return n===Fe(r)?n=F:r.pop(),r.length&&r[0]===t[0]?Un(r,he(n,2)):[]}),wo=lr(function(t){var n=Fe(t),r=l(t,Or);return n===Fe(r)?n=F:r.pop(),r.length&&r[0]===t[0]?Un(r,F,n):[]}),mo=lr(Ne),Ao=ae(function(t,n){var r=t?t.length:0,e=gn(t,n);
return fr(t,l(n,function(t){return je(t,r)?+t:t}).sort(Wr)),e}),ko=lr(function(t){return wr(En(t,1,cu,true))}),Eo=lr(function(t){var n=Fe(t);return cu(n)&&(n=F),wr(En(t,1,cu,true),he(n,2))}),Oo=lr(function(t){var n=Fe(t);return cu(n)&&(n=F),wr(En(t,1,cu,true),F,n)}),So=lr(function(t,n){return cu(t)?wn(t,n):[]}),Io=lr(function(t){return kr(f(t,cu))}),Ro=lr(function(t){var n=Fe(t);return cu(n)&&(n=F),kr(f(t,cu),he(n,2))}),zo=lr(function(t){var n=Fe(t);return cu(n)&&(n=F),kr(f(t,cu),F,n)}),Wo=lr(Ze),Bo=lr(function(t){
var n=t.length,n=1<n?t[n-1]:F,n=typeof n=="function"?(t.pop(),n):F;return qe(t,n)}),Lo=ae(function(t){function n(n){return gn(n,t)}var r=t.length,e=r?t[0]:0,u=this.__wrapped__;return!(1<r||this.__actions__.length)&&u instanceof Dt&&je(e)?(u=u.slice(e,+e+(r?1:0)),u.__actions__.push({func:Ke,args:[n],thisArg:F}),new Mt(u,this.__chain__).thru(function(t){return r&&!t.length&&t.push(F),t})):this.thru(n)}),Uo=Dr(function(t,n,r){ei.call(t,r)?++t[r]:vn(t,r,1)}),Co=Kr(Me),Mo=Kr(De),Do=Dr(function(t,n,r){
ei.call(t,r)?t[r].push(n):vn(t,r,[n])}),To=lr(function(t,n,e){var u=-1,i=typeof n=="function",o=me(n),f=fu(t)?Pu(t.length):[];return to(t,function(t){var c=i?n:o&&null!=t?t[n]:F;f[++u]=c?r(c,t,e):Mn(t,n,e)}),f}),$o=Dr(function(t,n,r){vn(t,r,n)}),Fo=Dr(function(t,n,r){t[r?0:1].push(n)},function(){return[[],[]]}),No=lr(function(t,n){if(null==t)return[];var r=n.length;return 1<r&&we(t,n[0],n[1])?n=[]:2<r&&we(n[0],n[1],n[2])&&(n=[n[0]]),rr(t,En(n,1),[])}),Po=ji||function(){return Pt.Date.now()},Zo=lr(function(t,n,r){
var e=1;if(r.length)var u=C(r,se(Zo)),e=32|e;return oe(t,e,n,r,u)}),qo=lr(function(t,n,r){var e=3;if(r.length)var u=C(r,se(qo)),e=32|e;return oe(n,e,t,r,u)}),Vo=lr(function(t,n){return jn(t,1,n)}),Ko=lr(function(t,n,r){return jn(t,mu(n)||0,r)});eu.Cache=Zt;var Go=lr(function(t,n){n=1==n.length&&tf(n[0])?l(n[0],S(he())):l(En(n,1),S(he()));var e=n.length;return lr(function(u){for(var i=-1,o=zi(u.length,e);++i<o;)u[i]=n[i].call(this,u[i]);return r(t,this,u)})}),Jo=lr(function(t,n){return oe(t,32,F,n,C(n,se(Jo)));
}),Yo=lr(function(t,n){return oe(t,64,F,n,C(n,se(Yo)))}),Ho=ae(function(t,n){return oe(t,256,F,F,F,n)}),Qo=re(Wn),Xo=re(function(t,n){return t>=n}),tf=Pu.isArray,nf=Gt?S(Gt):Dn,rf=Ei||Nu,ef=Jt?S(Jt):Tn,uf=Yt?S(Yt):Fn,of=Ht?S(Ht):Zn,ff=Qt?S(Qt):qn,cf=Xt?S(Xt):Vn,af=re(Yn),lf=re(function(t,n){return t<=n}),sf=Tr(function(t,n){if(ke(n)||fu(n))Cr(n,Su(n),t);else for(var r in n)ei.call(n,r)&&sn(t,r,n[r])}),hf=Tr(function(t,n){Cr(n,Iu(n),t)}),pf=Tr(function(t,n,r,e){Cr(n,Iu(n),t,e)}),_f=Tr(function(t,n,r,e){
Cr(n,Su(n),t,e)}),vf=ae(gn),gf=lr(function(t){return t.push(F,an),r(pf,F,t)}),df=lr(function(t){return t.push(F,Oe),r(wf,F,t)}),yf=Yr(function(t,n,r){t[n]=r},Uu(Cu)),bf=Yr(function(t,n,r){ei.call(t,n)?t[n].push(r):t[n]=[r]},he),xf=lr(Mn),jf=Tr(function(t,n,r){tr(t,n,r)}),wf=Tr(function(t,n,r,e){tr(t,n,r,e)}),mf=ae(function(t,n){return null==t?{}:(n=l(n,Be),er(t,wn(zn(t,Iu,lo),n)))}),Af=ae(function(t,n){return null==t?{}:er(t,l(n,Be))}),kf=ie(Su),Ef=ie(Iu),Of=Zr(function(t,n,r){return n=n.toLowerCase(),
t+(r?Wu(n):n)}),Sf=Zr(function(t,n,r){return t+(r?"-":"")+n.toLowerCase()}),If=Zr(function(t,n,r){return t+(r?" ":"")+n.toLowerCase()}),Rf=Pr("toLowerCase"),zf=Zr(function(t,n,r){return t+(r?"_":"")+n.toLowerCase()}),Wf=Zr(function(t,n,r){return t+(r?" ":"")+Lf(n)}),Bf=Zr(function(t,n,r){return t+(r?" ":"")+n.toUpperCase()}),Lf=Pr("toUpperCase"),Uf=lr(function(t,n){try{return r(t,F,n)}catch(t){return au(t)?t:new qu(t)}}),Cf=ae(function(t,n){return u(n,function(n){n=Be(n),vn(t,n,Zo(t[n],t))}),t}),Mf=Gr(),Df=Gr(true),Tf=lr(function(t,n){
return function(r){return Mn(r,t,n)}}),$f=lr(function(t,n){return function(r){return Mn(t,r,n)}}),Ff=Qr(l),Nf=Qr(o),Pf=Qr(_),Zf=ne(),qf=ne(true),Vf=Hr(function(t,n){return t+n},0),Kf=ue("ceil"),Gf=Hr(function(t,n){return t/n},1),Jf=ue("floor"),Yf=Hr(function(t,n){return t*n},1),Hf=ue("round"),Qf=Hr(function(t,n){return t-n},0);return Ot.after=function(t,n){if(typeof n!="function")throw new Hu("Expected a function");return t=ju(t),function(){if(1>--t)return n.apply(this,arguments)}},Ot.ary=Qe,Ot.assign=sf,
Ot.assignIn=hf,Ot.assignInWith=pf,Ot.assignWith=_f,Ot.at=vf,Ot.before=Xe,Ot.bind=Zo,Ot.bindAll=Cf,Ot.bindKey=qo,Ot.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return tf(t)?t:[t]},Ot.chain=Ve,Ot.chunk=function(t,n,r){if(n=(r?we(t,n,r):n===F)?1:Ri(ju(n),0),r=t?t.length:0,!r||1>n)return[];for(var e=0,u=0,i=Pu(mi(r/n));e<r;)i[u++]=vr(t,e,e+=n);return i},Ot.compact=function(t){for(var n=-1,r=t?t.length:0,e=0,u=[];++n<r;){var i=t[n];i&&(u[e++]=i)}return u},Ot.concat=function(){
var t=arguments.length;if(!t)return[];for(var n=Pu(t-1),r=arguments[0];t--;)n[t-1]=arguments[t];return s(tf(r)?Ur(r):[r],En(n,1))},Ot.cond=function(t){var n=t?t.length:0,e=he();return t=n?l(t,function(t){if("function"!=typeof t[1])throw new Hu("Expected a function");return[e(t[0]),t[1]]}):[],lr(function(e){for(var u=-1;++u<n;){var i=t[u];if(r(i[0],this,e))return r(i[1],this,e)}})},Ot.conforms=function(t){return bn(yn(t,true))},Ot.constant=Uu,Ot.countBy=Uo,Ot.create=function(t,n){var r=Xi(t);return n?_n(r,n):r;
},Ot.curry=tu,Ot.curryRight=nu,Ot.debounce=ru,Ot.defaults=gf,Ot.defaultsDeep=df,Ot.defer=Vo,Ot.delay=Ko,Ot.difference=go,Ot.differenceBy=yo,Ot.differenceWith=bo,Ot.drop=function(t,n,r){var e=t?t.length:0;return e?(n=r||n===F?1:ju(n),vr(t,0>n?0:n,e)):[]},Ot.dropRight=function(t,n,r){var e=t?t.length:0;return e?(n=r||n===F?1:ju(n),n=e-n,vr(t,0,0>n?0:n)):[]},Ot.dropRightWhile=function(t,n){return t&&t.length?mr(t,he(n,3),true,true):[]},Ot.dropWhile=function(t,n){return t&&t.length?mr(t,he(n,3),true):[]},Ot.fill=function(t,n,r,e){
var u=t?t.length:0;if(!u)return[];for(r&&typeof r!="number"&&we(t,n,r)&&(r=0,e=u),u=t.length,r=ju(r),0>r&&(r=-r>u?0:u+r),e=e===F||e>u?u:ju(e),0>e&&(e+=u),e=r>e?0:wu(e);r<e;)t[r++]=n;return t},Ot.filter=function(t,n){return(tf(t)?f:kn)(t,he(n,3))},Ot.flatMap=function(t,n){return En(He(t,n),1)},Ot.flatMapDeep=function(t,n){return En(He(t,n),N)},Ot.flatMapDepth=function(t,n,r){return r=r===F?1:ju(r),En(He(t,n),r)},Ot.flatten=Te,Ot.flattenDeep=function(t){return t&&t.length?En(t,N):[]},Ot.flattenDepth=function(t,n){
return t&&t.length?(n=n===F?1:ju(n),En(t,n)):[]},Ot.flip=function(t){return oe(t,512)},Ot.flow=Mf,Ot.flowRight=Df,Ot.fromPairs=function(t){for(var n=-1,r=t?t.length:0,e={};++n<r;){var u=t[n];e[u[0]]=u[1]}return e},Ot.functions=function(t){return null==t?[]:In(t,Su(t))},Ot.functionsIn=function(t){return null==t?[]:In(t,Iu(t))},Ot.groupBy=Do,Ot.initial=function(t){return t&&t.length?vr(t,0,-1):[]},Ot.intersection=xo,Ot.intersectionBy=jo,Ot.intersectionWith=wo,Ot.invert=yf,Ot.invertBy=bf,Ot.invokeMap=To,
Ot.iteratee=Mu,Ot.keyBy=$o,Ot.keys=Su,Ot.keysIn=Iu,Ot.map=He,Ot.mapKeys=function(t,n){var r={};return n=he(n,3),On(t,function(t,e,u){vn(r,n(t,e,u),t)}),r},Ot.mapValues=function(t,n){var r={};return n=he(n,3),On(t,function(t,e,u){vn(r,e,n(t,e,u))}),r},Ot.matches=function(t){return Qn(yn(t,true))},Ot.matchesProperty=function(t,n){return Xn(t,yn(n,true))},Ot.memoize=eu,Ot.merge=jf,Ot.mergeWith=wf,Ot.method=Tf,Ot.methodOf=$f,Ot.mixin=Du,Ot.negate=uu,Ot.nthArg=function(t){return t=ju(t),lr(function(n){return nr(n,t);
})},Ot.omit=mf,Ot.omitBy=function(t,n){return Ru(t,uu(he(n)))},Ot.once=function(t){return Xe(2,t)},Ot.orderBy=function(t,n,r,e){return null==t?[]:(tf(n)||(n=null==n?[]:[n]),r=e?F:r,tf(r)||(r=null==r?[]:[r]),rr(t,n,r))},Ot.over=Ff,Ot.overArgs=Go,Ot.overEvery=Nf,Ot.overSome=Pf,Ot.partial=Jo,Ot.partialRight=Yo,Ot.partition=Fo,Ot.pick=Af,Ot.pickBy=Ru,Ot.property=$u,Ot.propertyOf=function(t){return function(n){return null==t?F:Rn(t,n)}},Ot.pull=mo,Ot.pullAll=Ne,Ot.pullAllBy=function(t,n,r){return t&&t.length&&n&&n.length?or(t,n,he(r,2)):t;
},Ot.pullAllWith=function(t,n,r){return t&&t.length&&n&&n.length?or(t,n,F,r):t},Ot.pullAt=Ao,Ot.range=Zf,Ot.rangeRight=qf,Ot.rearg=Ho,Ot.reject=function(t,n){return(tf(t)?f:kn)(t,uu(he(n,3)))},Ot.remove=function(t,n){var r=[];if(!t||!t.length)return r;var e=-1,u=[],i=t.length;for(n=he(n,3);++e<i;){var o=t[e];n(o,e,t)&&(r.push(o),u.push(e))}return fr(t,u),r},Ot.rest=function(t,n){if(typeof t!="function")throw new Hu("Expected a function");return n=n===F?n:ju(n),lr(t,n)},Ot.reverse=Pe,Ot.sampleSize=function(t,n,r){
return n=(r?we(t,n,r):n===F)?1:ju(n),(tf(t)?fn:hr)(t,n)},Ot.set=function(t,n,r){return null==t?t:pr(t,n,r)},Ot.setWith=function(t,n,r,e){return e=typeof e=="function"?e:F,null==t?t:pr(t,n,r,e)},Ot.shuffle=function(t){return(tf(t)?cn:_r)(t)},Ot.slice=function(t,n,r){var e=t?t.length:0;return e?(r&&typeof r!="number"&&we(t,n,r)?(n=0,r=e):(n=null==n?0:ju(n),r=r===F?e:ju(r)),vr(t,n,r)):[]},Ot.sortBy=No,Ot.sortedUniq=function(t){return t&&t.length?br(t):[]},Ot.sortedUniqBy=function(t,n){return t&&t.length?br(t,he(n,2)):[];
},Ot.split=function(t,n,r){return r&&typeof r!="number"&&we(t,n,r)&&(n=r=F),r=r===F?4294967295:r>>>0,r?(t=ku(t))&&(typeof n=="string"||null!=n&&!of(n))&&(n=jr(n),!n&&Wt.test(t))?Ir($(t),0,r):t.split(n,r):[]},Ot.spread=function(t,n){if(typeof t!="function")throw new Hu("Expected a function");return n=n===F?0:Ri(ju(n),0),lr(function(e){var u=e[n];return e=Ir(e,0,n),u&&s(e,u),r(t,this,e)})},Ot.tail=function(t){var n=t?t.length:0;return n?vr(t,1,n):[]},Ot.take=function(t,n,r){return t&&t.length?(n=r||n===F?1:ju(n),
vr(t,0,0>n?0:n)):[]},Ot.takeRight=function(t,n,r){var e=t?t.length:0;return e?(n=r||n===F?1:ju(n),n=e-n,vr(t,0>n?0:n,e)):[]},Ot.takeRightWhile=function(t,n){return t&&t.length?mr(t,he(n,3),false,true):[]},Ot.takeWhile=function(t,n){return t&&t.length?mr(t,he(n,3)):[]},Ot.tap=function(t,n){return n(t),t},Ot.throttle=function(t,n,r){var e=true,u=true;if(typeof t!="function")throw new Hu("Expected a function");return pu(r)&&(e="leading"in r?!!r.leading:e,u="trailing"in r?!!r.trailing:u),ru(t,n,{leading:e,maxWait:n,
trailing:u})},Ot.thru=Ke,Ot.toArray=bu,Ot.toPairs=kf,Ot.toPairsIn=Ef,Ot.toPath=function(t){return tf(t)?l(t,Be):yu(t)?[t]:Ur(vo(t))},Ot.toPlainObject=Au,Ot.transform=function(t,n,r){var e=tf(t)||cf(t);if(n=he(n,4),null==r)if(e||pu(t)){var i=t.constructor;r=e?tf(t)?new i:[]:lu(i)?Xi(_i(t)):{}}else r={};return(e?u:On)(t,function(t,e,u){return n(r,t,e,u)}),r},Ot.unary=function(t){return Qe(t,1)},Ot.union=ko,Ot.unionBy=Eo,Ot.unionWith=Oo,Ot.uniq=function(t){return t&&t.length?wr(t):[]},Ot.uniqBy=function(t,n){
return t&&t.length?wr(t,he(n,2)):[]},Ot.uniqWith=function(t,n){return t&&t.length?wr(t,F,n):[]},Ot.unset=function(t,n){var r;if(null==t)r=true;else{r=t;var e=n,e=me(e,r)?[e]:Sr(e);r=Ie(r,e),e=Be(Fe(e)),r=!(null!=r&&ei.call(r,e))||delete r[e]}return r},Ot.unzip=Ze,Ot.unzipWith=qe,Ot.update=function(t,n,r){return null==t?t:pr(t,n,(typeof r=="function"?r:Cu)(Rn(t,n)),void 0)},Ot.updateWith=function(t,n,r,e){return e=typeof e=="function"?e:F,null!=t&&(t=pr(t,n,(typeof r=="function"?r:Cu)(Rn(t,n)),e)),t;
},Ot.values=zu,Ot.valuesIn=function(t){return null==t?[]:I(t,Iu(t))},Ot.without=So,Ot.words=Lu,Ot.wrap=function(t,n){return n=null==n?Cu:n,Jo(n,t)},Ot.xor=Io,Ot.xorBy=Ro,Ot.xorWith=zo,Ot.zip=Wo,Ot.zipObject=function(t,n){return Er(t||[],n||[],sn)},Ot.zipObjectDeep=function(t,n){return Er(t||[],n||[],pr)},Ot.zipWith=Bo,Ot.entries=kf,Ot.entriesIn=Ef,Ot.extend=hf,Ot.extendWith=pf,Du(Ot,Ot),Ot.add=Vf,Ot.attempt=Uf,Ot.camelCase=Of,Ot.capitalize=Wu,Ot.ceil=Kf,Ot.clamp=function(t,n,r){return r===F&&(r=n,
n=F),r!==F&&(r=mu(r),r=r===r?r:0),n!==F&&(n=mu(n),n=n===n?n:0),dn(mu(t),n,r)},Ot.clone=function(t){return yn(t,false,true)},Ot.cloneDeep=function(t){return yn(t,true,true)},Ot.cloneDeepWith=function(t,n){return yn(t,true,true,n)},Ot.cloneWith=function(t,n){return yn(t,false,true,n)},Ot.conformsTo=function(t,n){return null==n||xn(t,n,Su(n))},Ot.deburr=Bu,Ot.defaultTo=function(t,n){return null==t||t!==t?n:t},Ot.divide=Gf,Ot.endsWith=function(t,n,r){t=ku(t),n=jr(n);var e=t.length,e=r=r===F?e:dn(ju(r),0,e);return r-=n.length,
0<=r&&t.slice(r,e)==n},Ot.eq=iu,Ot.escape=function(t){return(t=ku(t))&&H.test(t)?t.replace(J,rn):t},Ot.escapeRegExp=function(t){return(t=ku(t))&&ot.test(t)?t.replace(it,"\\$&"):t},Ot.every=function(t,n,r){var e=tf(t)?o:mn;return r&&we(t,n,r)&&(n=F),e(t,he(n,3))},Ot.find=Co,Ot.findIndex=Me,Ot.findKey=function(t,n){return v(t,he(n,3),On)},Ot.findLast=Mo,Ot.findLastIndex=De,Ot.findLastKey=function(t,n){return v(t,he(n,3),Sn)},Ot.floor=Jf,Ot.forEach=Je,Ot.forEachRight=Ye,Ot.forIn=function(t,n){return null==t?t:ro(t,he(n,3),Iu);
},Ot.forInRight=function(t,n){return null==t?t:eo(t,he(n,3),Iu)},Ot.forOwn=function(t,n){return t&&On(t,he(n,3))},Ot.forOwnRight=function(t,n){return t&&Sn(t,he(n,3))},Ot.get=Eu,Ot.gt=Qo,Ot.gte=Xo,Ot.has=function(t,n){return null!=t&&ge(t,n,Bn)},Ot.hasIn=Ou,Ot.head=$e,Ot.identity=Cu,Ot.includes=function(t,n,r,e){return t=fu(t)?t:zu(t),r=r&&!e?ju(r):0,e=t.length,0>r&&(r=Ri(e+r,0)),du(t)?r<=e&&-1<t.indexOf(n,r):!!e&&-1<d(t,n,r)},Ot.indexOf=function(t,n,r){var e=t?t.length:0;return e?(r=null==r?0:ju(r),
0>r&&(r=Ri(e+r,0)),d(t,n,r)):-1},Ot.inRange=function(t,n,r){return n=xu(n),r===F?(r=n,n=0):r=xu(r),t=mu(t),t>=zi(n,r)&&t<Ri(n,r)},Ot.invoke=xf,Ot.isArguments=ou,Ot.isArray=tf,Ot.isArrayBuffer=nf,Ot.isArrayLike=fu,Ot.isArrayLikeObject=cu,Ot.isBoolean=function(t){return true===t||false===t||_u(t)&&"[object Boolean]"==oi.call(t)},Ot.isBuffer=rf,Ot.isDate=ef,Ot.isElement=function(t){return null!=t&&1===t.nodeType&&_u(t)&&!gu(t)},Ot.isEmpty=function(t){if(fu(t)&&(tf(t)||typeof t=="string"||typeof t.splice=="function"||rf(t)||ou(t)))return!t.length;
var n=Et(t);if("[object Map]"==n||"[object Set]"==n)return!t.size;if(ke(t))return!Ii(t).length;for(var r in t)if(ei.call(t,r))return false;return true},Ot.isEqual=function(t,n){return $n(t,n)},Ot.isEqualWith=function(t,n,r){var e=(r=typeof r=="function"?r:F)?r(t,n):F;return e===F?$n(t,n,r):!!e},Ot.isError=au,Ot.isFinite=function(t){return typeof t=="number"&&Oi(t)},Ot.isFunction=lu,Ot.isInteger=su,Ot.isLength=hu,Ot.isMap=uf,Ot.isMatch=function(t,n){return t===n||Nn(t,n,_e(n))},Ot.isMatchWith=function(t,n,r){
return r=typeof r=="function"?r:F,Nn(t,n,_e(n),r)},Ot.isNaN=function(t){return vu(t)&&t!=+t},Ot.isNative=function(t){if(so(t))throw new qu("Unsupported core-js use. Try https://github.com/es-shims.");return Pn(t)},Ot.isNil=function(t){return null==t},Ot.isNull=function(t){return null===t},Ot.isNumber=vu,Ot.isObject=pu,Ot.isObjectLike=_u,Ot.isPlainObject=gu,Ot.isRegExp=of,Ot.isSafeInteger=function(t){return su(t)&&-9007199254740991<=t&&9007199254740991>=t},Ot.isSet=ff,Ot.isString=du,Ot.isSymbol=yu,
Ot.isTypedArray=cf,Ot.isUndefined=function(t){return t===F},Ot.isWeakMap=function(t){return _u(t)&&"[object WeakMap]"==Et(t)},Ot.isWeakSet=function(t){return _u(t)&&"[object WeakSet]"==oi.call(t)},Ot.join=function(t,n){return t?Si.call(t,n):""},Ot.kebabCase=Sf,Ot.last=Fe,Ot.lastIndexOf=function(t,n,r){var e=t?t.length:0;if(!e)return-1;var u=e;if(r!==F&&(u=ju(r),u=0>u?Ri(e+u,0):zi(u,e-1)),n===n){for(r=u+1;r--&&t[r]!==n;);t=r}else t=g(t,b,u,true);return t},Ot.lowerCase=If,Ot.lowerFirst=Rf,Ot.lt=af,Ot.lte=lf,
Ot.max=function(t){return t&&t.length?An(t,Cu,Wn):F},Ot.maxBy=function(t,n){return t&&t.length?An(t,he(n,2),Wn):F},Ot.mean=function(t){return x(t,Cu)},Ot.meanBy=function(t,n){return x(t,he(n,2))},Ot.min=function(t){return t&&t.length?An(t,Cu,Yn):F},Ot.minBy=function(t,n){return t&&t.length?An(t,he(n,2),Yn):F},Ot.stubArray=Fu,Ot.stubFalse=Nu,Ot.stubObject=function(){return{}},Ot.stubString=function(){return""},Ot.stubTrue=function(){return true},Ot.multiply=Yf,Ot.nth=function(t,n){return t&&t.length?nr(t,ju(n)):F;
},Ot.noConflict=function(){return Pt._===this&&(Pt._=fi),this},Ot.noop=Tu,Ot.now=Po,Ot.pad=function(t,n,r){t=ku(t);var e=(n=ju(n))?T(t):0;return!n||e>=n?t:(n=(n-e)/2,Xr(Ai(n),r)+t+Xr(mi(n),r))},Ot.padEnd=function(t,n,r){t=ku(t);var e=(n=ju(n))?T(t):0;return n&&e<n?t+Xr(n-e,r):t},Ot.padStart=function(t,n,r){t=ku(t);var e=(n=ju(n))?T(t):0;return n&&e<n?Xr(n-e,r)+t:t},Ot.parseInt=function(t,n,r){return r||null==n?n=0:n&&(n=+n),Bi(ku(t).replace(ct,""),n||0)},Ot.random=function(t,n,r){if(r&&typeof r!="boolean"&&we(t,n,r)&&(n=r=F),
r===F&&(typeof n=="boolean"?(r=n,n=F):typeof t=="boolean"&&(r=t,t=F)),t===F&&n===F?(t=0,n=1):(t=xu(t),n===F?(n=t,t=0):n=xu(n)),t>n){var e=t;t=n,n=e}return r||t%1||n%1?(r=Li(),zi(t+r*(n-t+Tt("1e-"+((r+"").length-1))),n)):cr(t,n)},Ot.reduce=function(t,n,r){var e=tf(t)?h:m,u=3>arguments.length;return e(t,he(n,4),r,u,to)},Ot.reduceRight=function(t,n,r){var e=tf(t)?p:m,u=3>arguments.length;return e(t,he(n,4),r,u,no)},Ot.repeat=function(t,n,r){return n=(r?we(t,n,r):n===F)?1:ju(n),ar(ku(t),n)},Ot.replace=function(){
var t=arguments,n=ku(t[0]);return 3>t.length?n:n.replace(t[1],t[2])},Ot.result=function(t,n,r){n=me(n,t)?[n]:Sr(n);var e=-1,u=n.length;for(u||(t=F,u=1);++e<u;){var i=null==t?F:t[Be(n[e])];i===F&&(e=u,i=r),t=lu(i)?i.call(t):i}return t},Ot.round=Hf,Ot.runInContext=w,Ot.sample=function(t){return(tf(t)?on:sr)(t)},Ot.size=function(t){if(null==t)return 0;if(fu(t))return du(t)?T(t):t.length;var n=Et(t);return"[object Map]"==n||"[object Set]"==n?t.size:Gn(t).length},Ot.snakeCase=zf,Ot.some=function(t,n,r){
var e=tf(t)?_:gr;return r&&we(t,n,r)&&(n=F),e(t,he(n,3))},Ot.sortedIndex=function(t,n){return dr(t,n)},Ot.sortedIndexBy=function(t,n,r){return yr(t,n,he(r,2))},Ot.sortedIndexOf=function(t,n){var r=t?t.length:0;if(r){var e=dr(t,n);if(e<r&&iu(t[e],n))return e}return-1},Ot.sortedLastIndex=function(t,n){return dr(t,n,true)},Ot.sortedLastIndexBy=function(t,n,r){return yr(t,n,he(r,2),true)},Ot.sortedLastIndexOf=function(t,n){if(t&&t.length){var r=dr(t,n,true)-1;if(iu(t[r],n))return r}return-1},Ot.startCase=Wf,
Ot.startsWith=function(t,n,r){return t=ku(t),r=dn(ju(r),0,t.length),n=jr(n),t.slice(r,r+n.length)==n},Ot.subtract=Qf,Ot.sum=function(t){return t&&t.length?k(t,Cu):0},Ot.sumBy=function(t,n){return t&&t.length?k(t,he(n,2)):0},Ot.template=function(t,n,r){var e=Ot.templateSettings;r&&we(t,n,r)&&(n=F),t=ku(t),n=pf({},n,e,an),r=pf({},n.imports,e.imports,an);var u,i,o=Su(r),f=I(r,o),c=0;r=n.interpolate||mt;var a="__p+='";r=Ju((n.escape||mt).source+"|"+r.source+"|"+(r===tt?vt:mt).source+"|"+(n.evaluate||mt).source+"|$","g");
var l="sourceURL"in n?"//# sourceURL="+n.sourceURL+"\n":"";if(t.replace(r,function(n,r,e,o,f,l){return e||(e=o),a+=t.slice(c,l).replace(At,B),r&&(u=true,a+="'+__e("+r+")+'"),f&&(i=true,a+="';"+f+";\n__p+='"),e&&(a+="'+((__t=("+e+"))==null?'':__t)+'"),c=l+n.length,n}),a+="';",(n=n.variable)||(a="with(obj){"+a+"}"),a=(i?a.replace(q,""):a).replace(V,"$1").replace(K,"$1;"),a="function("+(n||"obj")+"){"+(n?"":"obj||(obj={});")+"var __t,__p=''"+(u?",__e=_.escape":"")+(i?",__j=Array.prototype.join;function print(){__p+=__j.call(arguments,'')}":";")+a+"return __p}",
n=Uf(function(){return Vu(o,l+"return "+a).apply(F,f)}),n.source=a,au(n))throw n;return n},Ot.times=function(t,n){if(t=ju(t),1>t||9007199254740991<t)return[];var r=4294967295,e=zi(t,4294967295);for(n=he(n),t-=4294967295,e=E(e,n);++r<t;)n(r);return e},Ot.toFinite=xu,Ot.toInteger=ju,Ot.toLength=wu,Ot.toLower=function(t){return ku(t).toLowerCase()},Ot.toNumber=mu,Ot.toSafeInteger=function(t){return dn(ju(t),-9007199254740991,9007199254740991)},Ot.toString=ku,Ot.toUpper=function(t){return ku(t).toUpperCase();
},Ot.trim=function(t,n,r){return(t=ku(t))&&(r||n===F)?t.replace(ft,""):t&&(n=jr(n))?(t=$(t),r=$(n),n=z(t,r),r=W(t,r)+1,Ir(t,n,r).join("")):t},Ot.trimEnd=function(t,n,r){return(t=ku(t))&&(r||n===F)?t.replace(at,""):t&&(n=jr(n))?(t=$(t),n=W(t,$(n))+1,Ir(t,0,n).join("")):t},Ot.trimStart=function(t,n,r){return(t=ku(t))&&(r||n===F)?t.replace(ct,""):t&&(n=jr(n))?(t=$(t),n=z(t,$(n)),Ir(t,n).join("")):t},Ot.truncate=function(t,n){var r=30,e="...";if(pu(n))var u="separator"in n?n.separator:u,r="length"in n?ju(n.length):r,e="omission"in n?jr(n.omission):e;
t=ku(t);var i=t.length;if(Wt.test(t))var o=$(t),i=o.length;if(r>=i)return t;if(i=r-T(e),1>i)return e;if(r=o?Ir(o,0,i).join(""):t.slice(0,i),u===F)return r+e;if(o&&(i+=r.length-i),of(u)){if(t.slice(i).search(u)){var f=r;for(u.global||(u=Ju(u.source,ku(gt.exec(u))+"g")),u.lastIndex=0;o=u.exec(f);)var c=o.index;r=r.slice(0,c===F?i:c)}}else t.indexOf(jr(u),i)!=i&&(u=r.lastIndexOf(u),-1<u&&(r=r.slice(0,u)));return r+e},Ot.unescape=function(t){return(t=ku(t))&&Y.test(t)?t.replace(G,en):t},Ot.uniqueId=function(t){
var n=++ui;return ku(t)+n},Ot.upperCase=Bf,Ot.upperFirst=Lf,Ot.each=Je,Ot.eachRight=Ye,Ot.first=$e,Du(Ot,function(){var t={};return On(Ot,function(n,r){ei.call(Ot.prototype,r)||(t[r]=n)}),t}(),{chain:false}),Ot.VERSION="4.16.2",u("bind bindKey curry curryRight partial partialRight".split(" "),function(t){Ot[t].placeholder=Ot}),u(["drop","take"],function(t,n){Dt.prototype[t]=function(r){var e=this.__filtered__;if(e&&!n)return new Dt(this);r=r===F?1:Ri(ju(r),0);var u=this.clone();return e?u.__takeCount__=zi(r,u.__takeCount__):u.__views__.push({
size:zi(r,4294967295),type:t+(0>u.__dir__?"Right":"")}),u},Dt.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}}),u(["filter","map","takeWhile"],function(t,n){var r=n+1,e=1==r||3==r;Dt.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:he(t,3),type:r}),n.__filtered__=n.__filtered__||e,n}}),u(["head","last"],function(t,n){var r="take"+(n?"Right":"");Dt.prototype[t]=function(){return this[r](1).value()[0]}}),u(["initial","tail"],function(t,n){var r="drop"+(n?"":"Right");
Dt.prototype[t]=function(){return this.__filtered__?new Dt(this):this[r](1)}}),Dt.prototype.compact=function(){return this.filter(Cu)},Dt.prototype.find=function(t){return this.filter(t).head()},Dt.prototype.findLast=function(t){return this.reverse().find(t)},Dt.prototype.invokeMap=lr(function(t,n){return typeof t=="function"?new Dt(this):this.map(function(r){return Mn(r,t,n)})}),Dt.prototype.reject=function(t){return this.filter(uu(he(t)))},Dt.prototype.slice=function(t,n){t=ju(t);var r=this;return r.__filtered__&&(0<t||0>n)?new Dt(r):(0>t?r=r.takeRight(-t):t&&(r=r.drop(t)),
n!==F&&(n=ju(n),r=0>n?r.dropRight(-n):r.take(n-t)),r)},Dt.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Dt.prototype.toArray=function(){return this.take(4294967295)},On(Dt.prototype,function(t,n){var r=/^(?:filter|find|map|reject)|While$/.test(n),e=/^(?:head|last)$/.test(n),u=Ot[e?"take"+("last"==n?"Right":""):n],i=e||/^find/.test(n);u&&(Ot.prototype[n]=function(){function n(t){return t=u.apply(Ot,s([t],f)),e&&h?t[0]:t}var o=this.__wrapped__,f=e?[1]:arguments,c=o instanceof Dt,a=f[0],l=c||tf(o);
l&&r&&typeof a=="function"&&1!=a.length&&(c=l=false);var h=this.__chain__,p=!!this.__actions__.length,a=i&&!h,c=c&&!p;return!i&&l?(o=c?o:new Dt(this),o=t.apply(o,f),o.__actions__.push({func:Ke,args:[n],thisArg:F}),new Mt(o,h)):a&&c?t.apply(this,f):(o=this.thru(n),a?e?o.value()[0]:o.value():o)})}),u("pop push shift sort splice unshift".split(" "),function(t){var n=Qu[t],r=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",e=/^(?:pop|shift)$/.test(t);Ot.prototype[t]=function(){var t=arguments;if(e&&!this.__chain__){
var u=this.value();return n.apply(tf(u)?u:[],t)}return this[r](function(r){return n.apply(tf(r)?r:[],t)})}}),On(Dt.prototype,function(t,n){var r=Ot[n];if(r){var e=r.name+"";(Zi[e]||(Zi[e]=[])).push({name:n,func:r})}}),Zi[Jr(F,2).name]=[{name:"wrapper",func:F}],Dt.prototype.clone=function(){var t=new Dt(this.__wrapped__);return t.__actions__=Ur(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Ur(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Ur(this.__views__),
t},Dt.prototype.reverse=function(){if(this.__filtered__){var t=new Dt(this);t.__dir__=-1,t.__filtered__=true}else t=this.clone(),t.__dir__*=-1;return t},Dt.prototype.value=function(){var t,n=this.__wrapped__.value(),r=this.__dir__,e=tf(n),u=0>r,i=e?n.length:0;t=i;for(var o=this.__views__,f=0,c=-1,a=o.length;++c<a;){var l=o[c],s=l.size;switch(l.type){case"drop":f+=s;break;case"dropRight":t-=s;break;case"take":t=zi(t,f+s);break;case"takeRight":f=Ri(f,t-s)}}if(t={start:f,end:t},o=t.start,f=t.end,t=f-o,
u=u?f:o-1,o=this.__iteratees__,f=o.length,c=0,a=zi(t,this.__takeCount__),!e||200>i||i==t&&a==t)return Ar(n,this.__actions__);e=[];t:for(;t--&&c<a;){for(u+=r,i=-1,l=n[u];++i<f;){var h=o[i],s=h.type,h=(0,h.iteratee)(l);if(2==s)l=h;else if(!h){if(1==s)continue t;break t}}e[c++]=l}return e},Ot.prototype.at=Lo,Ot.prototype.chain=function(){return Ve(this)},Ot.prototype.commit=function(){return new Mt(this.value(),this.__chain__)},Ot.prototype.next=function(){this.__values__===F&&(this.__values__=bu(this.value()));
var t=this.__index__>=this.__values__.length;return{done:t,value:t?F:this.__values__[this.__index__++]}},Ot.prototype.plant=function(t){for(var n,r=this;r instanceof Rt;){var e=Ce(r);e.__index__=0,e.__values__=F,n?u.__wrapped__=e:n=e;var u=e,r=r.__wrapped__}return u.__wrapped__=t,n},Ot.prototype.reverse=function(){var t=this.__wrapped__;return t instanceof Dt?(this.__actions__.length&&(t=new Dt(this)),t=t.reverse(),t.__actions__.push({func:Ke,args:[Pe],thisArg:F}),new Mt(t,this.__chain__)):this.thru(Pe);
},Ot.prototype.toJSON=Ot.prototype.valueOf=Ot.prototype.value=function(){return Ar(this.__wrapped__,this.__actions__)},Ot.prototype.first=Ot.prototype.head,vi&&(Ot.prototype[vi]=Ge),Ot}();typeof define=="function"&&typeof define.amd=="object"&&define.amd?(Pt._=un, define(function(){return un})):qt?((qt.exports=un)._=un,Zt._=un):Pt._=un}).call(this);
/*!
 * Globalize
 *
 * http://github.com/jquery/globalize
 *
 * Copyright Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 */

(function( window, undefined ) {

var Globalize,
	// private variables
	regexHex,
	regexInfinity,
	regexParseFloat,
	regexTrim,
	// private JavaScript utility functions
	arrayIndexOf,
	endsWith,
	extend,
	isArray,
	isFunction,
	isObject,
	startsWith,
	trim,
	zeroPad,
	// private Globalization utility functions
	appendPreOrPostMatch,
	expandFormat,
	formatDate,
	formatNumber,
	getTokenRegExp,
	getEra,
	getEraYear,
	parseExact,
	parseNegativePattern;

// Global variable (Globalize) or CommonJS module (globalize)
Globalize = function( cultureSelector ) {
	return new Globalize.prototype.init( cultureSelector );
};

if ( typeof require !== "undefined"
	&& typeof exports !== "undefined"
	&& typeof module !== "undefined" ) {
	// Assume CommonJS
	module.exports = Globalize;
} else {
	// Export as global variable
	window.Globalize = Globalize;
}

Globalize.cultures = {};

Globalize.prototype = {
	constructor: Globalize,
	init: function( cultureSelector ) {
		this.cultures = Globalize.cultures;
		this.cultureSelector = cultureSelector;

		return this;
	}
};
Globalize.prototype.init.prototype = Globalize.prototype;

// 1.	 When defining a culture, all fields are required except the ones stated as optional.
// 2.	 Each culture should have a ".calendars" object with at least one calendar named "standard"
//		 which serves as the default calendar in use by that culture.
// 3.	 Each culture should have a ".calendar" object which is the current calendar being used,
//		 it may be dynamically changed at any time to one of the calendars in ".calendars".
Globalize.cultures[ "default" ] = {
	// A unique name for the culture in the form <language code>-<country/region code>
	name: "en",
	// the name of the culture in the english language
	englishName: "English",
	// the name of the culture in its own language
	nativeName: "English",
	// whether the culture uses right-to-left text
	isRTL: false,
	// "language" is used for so-called "specific" cultures.
	// For example, the culture "es-CL" means "Spanish, in Chili".
	// It represents the Spanish-speaking culture as it is in Chili,
	// which might have different formatting rules or even translations
	// than Spanish in Spain. A "neutral" culture is one that is not
	// specific to a region. For example, the culture "es" is the generic
	// Spanish culture, which may be a more generalized version of the language
	// that may or may not be what a specific culture expects.
	// For a specific culture like "es-CL", the "language" field refers to the
	// neutral, generic culture information for the language it is using.
	// This is not always a simple matter of the string before the dash.
	// For example, the "zh-Hans" culture is netural (Simplified Chinese).
	// And the "zh-SG" culture is Simplified Chinese in Singapore, whose lanugage
	// field is "zh-CHS", not "zh".
	// This field should be used to navigate from a specific culture to it's
	// more general, neutral culture. If a culture is already as general as it
	// can get, the language may refer to itself.
	language: "en",
	// numberFormat defines general number formatting rules, like the digits in
	// each grouping, the group separator, and how negative numbers are displayed.
	numberFormat: {
		// [negativePattern]
		// Note, numberFormat.pattern has no "positivePattern" unlike percent and currency,
		// but is still defined as an array for consistency with them.
		//   negativePattern: one of "(n)|-n|- n|n-|n -"
		pattern: [ "-n" ],
		// number of decimal places normally shown
		decimals: 2,
		// string that separates number groups, as in 1,000,000
		",": ",",
		// string that separates a number from the fractional portion, as in 1.99
		".": ".",
		// array of numbers indicating the size of each number group.
		// TODO: more detailed description and example
		groupSizes: [ 3 ],
		// symbol used for positive numbers
		"+": "+",
		// symbol used for negative numbers
		"-": "-",
		percent: {
			// [negativePattern, positivePattern]
			//   negativePattern: one of "-n %|-n%|-%n|%-n|%n-|n-%|n%-|-% n|n %-|% n-|% -n|n- %"
			//   positivePattern: one of "n %|n%|%n|% n"
			pattern: [ "-n %", "n %" ],
			// number of decimal places normally shown
			decimals: 2,
			// array of numbers indicating the size of each number group.
			// TODO: more detailed description and example
			groupSizes: [ 3 ],
			// string that separates number groups, as in 1,000,000
			",": ",",
			// string that separates a number from the fractional portion, as in 1.99
			".": ".",
			// symbol used to represent a percentage
			symbol: "%"
		},
		currency: {
			// [negativePattern, positivePattern]
			//   negativePattern: one of "($n)|-$n|$-n|$n-|(n$)|-n$|n-$|n$-|-n $|-$ n|n $-|$ n-|$ -n|n- $|($ n)|(n $)"
			//   positivePattern: one of "$n|n$|$ n|n $"
			pattern: [ "($n)", "$n" ],
			// number of decimal places normally shown
			decimals: 2,
			// array of numbers indicating the size of each number group.
			// TODO: more detailed description and example
			groupSizes: [ 3 ],
			// string that separates number groups, as in 1,000,000
			",": ",",
			// string that separates a number from the fractional portion, as in 1.99
			".": ".",
			// symbol used to represent currency
			symbol: "$"
		}
	},
	// calendars defines all the possible calendars used by this culture.
	// There should be at least one defined with name "standard", and is the default
	// calendar used by the culture.
	// A calendar contains information about how dates are formatted, information about
	// the calendar's eras, a standard set of the date formats,
	// translations for day and month names, and if the calendar is not based on the Gregorian
	// calendar, conversion functions to and from the Gregorian calendar.
	calendars: {
		standard: {
			// name that identifies the type of calendar this is
			name: "Gregorian_USEnglish",
			// separator of parts of a date (e.g. "/" in 11/05/1955)
			"/": "/",
			// separator of parts of a time (e.g. ":" in 05:44 PM)
			":": ":",
			// the first day of the week (0 = Sunday, 1 = Monday, etc)
			firstDay: 0,
			days: {
				// full day names
				names: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
				// abbreviated day names
				namesAbbr: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
				// shortest day names
				namesShort: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ]
			},
			months: {
				// full month names (13 months for lunar calendards -- 13th month should be "" if not lunar)
				names: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "" ],
				// abbreviated month names
				namesAbbr: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "" ]
			},
			// AM and PM designators in one of these forms:
			// The usual view, and the upper and lower case versions
			//   [ standard, lowercase, uppercase ]
			// The culture does not use AM or PM (likely all standard date formats use 24 hour time)
			//   null
			AM: [ "AM", "am", "AM" ],
			PM: [ "PM", "pm", "PM" ],
			eras: [
				// eras in reverse chronological order.
				// name: the name of the era in this culture (e.g. A.D., C.E.)
				// start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.
				// offset: offset in years from gregorian calendar
				{
					"name": "A.D.",
					"start": null,
					"offset": 0
				}
			],
			// when a two digit year is given, it will never be parsed as a four digit
			// year greater than this year (in the appropriate era for the culture)
			// Set it as a full year (e.g. 2029) or use an offset format starting from
			// the current year: "+19" would correspond to 2029 if the current year 2010.
			twoDigitYearMax: 2029,
			// set of predefined date and time patterns used by the culture
			// these represent the format someone in this culture would expect
			// to see given the portions of the date that are shown.
			patterns: {
				// short date pattern
				d: "M/d/yyyy",
				// long date pattern
				D: "dddd, MMMM dd, yyyy",
				// short time pattern
				t: "h:mm tt",
				// long time pattern
				T: "h:mm:ss tt",
				// long date, short time pattern
				f: "dddd, MMMM dd, yyyy h:mm tt",
				// long date, long time pattern
				F: "dddd, MMMM dd, yyyy h:mm:ss tt",
				// month/day pattern
				M: "MMMM dd",
				// month/year pattern
				Y: "yyyy MMMM",
				// S is a sortable format that does not vary by culture
				S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss"
			}
			// optional fields for each calendar:
			/*
			monthsGenitive:
				Same as months but used when the day preceeds the month.
				Omit if the culture has no genitive distinction in month names.
				For an explaination of genitive months, see http://blogs.msdn.com/michkap/archive/2004/12/25/332259.aspx
			convert:
				Allows for the support of non-gregorian based calendars. This convert object is used to
				to convert a date to and from a gregorian calendar date to handle parsing and formatting.
				The two functions:
					fromGregorian( date )
						Given the date as a parameter, return an array with parts [ year, month, day ]
						corresponding to the non-gregorian based year, month, and day for the calendar.
					toGregorian( year, month, day )
						Given the non-gregorian year, month, and day, return a new Date() object
						set to the corresponding date in the gregorian calendar.
			*/
		}
	},
	// For localized strings
	messages: {}
};

Globalize.cultures[ "default" ].calendar = Globalize.cultures[ "default" ].calendars.standard;

Globalize.cultures[ "en" ] = Globalize.cultures[ "default" ];

Globalize.cultureSelector = "en";

//
// private variables
//

regexHex = /^0x[a-f0-9]+$/i;
regexInfinity = /^[+-]?infinity$/i;
regexParseFloat = /^[+-]?\d*\.?\d*(e[+-]?\d+)?$/;
regexTrim = /^\s+|\s+$/g;

//
// private JavaScript utility functions
//

arrayIndexOf = function( array, item ) {
	if ( array.indexOf ) {
		return array.indexOf( item );
	}
	for ( var i = 0, length = array.length; i < length; i++ ) {
		if ( array[i] === item ) {
			return i;
		}
	}
	return -1;
};

endsWith = function( value, pattern ) {
	return value.substr( value.length - pattern.length ) === pattern;
};

extend = function( deep ) {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction(target) ) {
		target = {};
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( isObject(copy) || (copyIsArray = isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && isArray(src) ? src : [];

					} else {
						clone = src && isObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

isArray = Array.isArray || function( obj ) {
	return Object.prototype.toString.call( obj ) === "[object Array]";
};

isFunction = function( obj ) {
	return Object.prototype.toString.call( obj ) === "[object Function]"
}

isObject = function( obj ) {
	return Object.prototype.toString.call( obj ) === "[object Object]";
};

startsWith = function( value, pattern ) {
	return value.indexOf( pattern ) === 0;
};

trim = function( value ) {
	return ( value + "" ).replace( regexTrim, "" );
};

zeroPad = function( str, count, left ) {
	var l;
	for ( l = str.length; l < count; l += 1 ) {
		str = ( left ? ("0" + str) : (str + "0") );
	}
	return str;
};

//
// private Globalization utility functions
//

appendPreOrPostMatch = function( preMatch, strings ) {
	// appends pre- and post- token match strings while removing escaped characters.
	// Returns a single quote count which is used to determine if the token occurs
	// in a string literal.
	var quoteCount = 0,
		escaped = false;
	for ( var i = 0, il = preMatch.length; i < il; i++ ) {
		var c = preMatch.charAt( i );
		switch ( c ) {
			case "\'":
				if ( escaped ) {
					strings.push( "\'" );
				}
				else {
					quoteCount++;
				}
				escaped = false;
				break;
			case "\\":
				if ( escaped ) {
					strings.push( "\\" );
				}
				escaped = !escaped;
				break;
			default:
				strings.push( c );
				escaped = false;
				break;
		}
	}
	return quoteCount;
};

expandFormat = function( cal, format ) {
	// expands unspecified or single character date formats into the full pattern.
	format = format || "F";
	var pattern,
		patterns = cal.patterns,
		len = format.length;
	if ( len === 1 ) {
		pattern = patterns[ format ];
		if ( !pattern ) {
			throw "Invalid date format string \'" + format + "\'.";
		}
		format = pattern;
	}
	else if ( len === 2 && format.charAt(0) === "%" ) {
		// %X escape format -- intended as a custom format string that is only one character, not a built-in format.
		format = format.charAt( 1 );
	}
	return format;
};

formatDate = function( value, format, culture ) {
	var cal = culture.calendar,
		convert = cal.convert;

	if ( !format || !format.length || format === "i" ) {
		var ret;
		if ( culture && culture.name.length ) {
			if ( convert ) {
				// non-gregorian calendar, so we cannot use built-in toLocaleString()
				ret = formatDate( value, cal.patterns.F, culture );
			}
			else {
				var eraDate = new Date( value.getTime() ),
					era = getEra( value, cal.eras );
				eraDate.setFullYear( getEraYear(value, cal, era) );
				ret = eraDate.toLocaleString();
			}
		}
		else {
			ret = value.toString();
		}
		return ret;
	}

	var eras = cal.eras,
		sortable = format === "s";
	format = expandFormat( cal, format );

	// Start with an empty string
	ret = [];
	var hour,
		zeros = [ "0", "00", "000" ],
		foundDay,
		checkedDay,
		dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g,
		quoteCount = 0,
		tokenRegExp = getTokenRegExp(),
		converted;

	function padZeros( num, c ) {
		var r, s = num + "";
		if ( c > 1 && s.length < c ) {
			r = ( zeros[c - 2] + s);
			return r.substr( r.length - c, c );
		}
		else {
			r = s;
		}
		return r;
	}

	function hasDay() {
		if ( foundDay || checkedDay ) {
			return foundDay;
		}
		foundDay = dayPartRegExp.test( format );
		checkedDay = true;
		return foundDay;
	}

	function getPart( date, part ) {
		if ( converted ) {
			return converted[ part ];
		}
		switch ( part ) {
			case 0: return date.getFullYear();
			case 1: return date.getMonth();
			case 2: return date.getDate();
		}
	}

	if ( !sortable && convert ) {
		converted = convert.fromGregorian( value );
	}

	for ( ; ; ) {
		// Save the current index
		var index = tokenRegExp.lastIndex,
			// Look for the next pattern
			ar = tokenRegExp.exec( format );

		// Append the text before the pattern (or the end of the string if not found)
		var preMatch = format.slice( index, ar ? ar.index : format.length );
		quoteCount += appendPreOrPostMatch( preMatch, ret );

		if ( !ar ) {
			break;
		}

		// do not replace any matches that occur inside a string literal.
		if ( quoteCount % 2 ) {
			ret.push( ar[0] );
			continue;
		}

		var current = ar[ 0 ],
			clength = current.length;

		switch ( current ) {
			case "ddd":
				//Day of the week, as a three-letter abbreviation
			case "dddd":
				// Day of the week, using the full name
				var names = ( clength === 3 ) ? cal.days.namesAbbr : cal.days.names;
				ret.push( names[value.getDay()] );
				break;
			case "d":
				// Day of month, without leading zero for single-digit days
			case "dd":
				// Day of month, with leading zero for single-digit days
				foundDay = true;
				ret.push(
					padZeros( getPart(value, 2), clength )
				);
				break;
			case "MMM":
				// Month, as a three-letter abbreviation
			case "MMMM":
				// Month, using the full name
				var part = getPart( value, 1 );
				ret.push(
					( cal.monthsGenitive && hasDay() )
					?
					cal.monthsGenitive[ clength === 3 ? "namesAbbr" : "names" ][ part ]
					:
					cal.months[ clength === 3 ? "namesAbbr" : "names" ][ part ]
				);
				break;
			case "M":
				// Month, as digits, with no leading zero for single-digit months
			case "MM":
				// Month, as digits, with leading zero for single-digit months
				ret.push(
					padZeros( getPart(value, 1) + 1, clength )
				);
				break;
			case "y":
				// Year, as two digits, but with no leading zero for years less than 10
			case "yy":
				// Year, as two digits, with leading zero for years less than 10
			case "yyyy":
				// Year represented by four full digits
				part = converted ? converted[ 0 ] : getEraYear( value, cal, getEra(value, eras), sortable );
				if ( clength < 4 ) {
					part = part % 100;
				}
				ret.push(
					padZeros( part, clength )
				);
				break;
			case "h":
				// Hours with no leading zero for single-digit hours, using 12-hour clock
			case "hh":
				// Hours with leading zero for single-digit hours, using 12-hour clock
				hour = value.getHours() % 12;
				if ( hour === 0 ) hour = 12;
				ret.push(
					padZeros( hour, clength )
				);
				break;
			case "H":
				// Hours with no leading zero for single-digit hours, using 24-hour clock
			case "HH":
				// Hours with leading zero for single-digit hours, using 24-hour clock
				ret.push(
					padZeros( value.getHours(), clength )
				);
				break;
			case "m":
				// Minutes with no leading zero for single-digit minutes
			case "mm":
				// Minutes with leading zero for single-digit minutes
				ret.push(
					padZeros( value.getMinutes(), clength )
				);
				break;
			case "s":
				// Seconds with no leading zero for single-digit seconds
			case "ss":
				// Seconds with leading zero for single-digit seconds
				ret.push(
					padZeros( value.getSeconds(), clength )
				);
				break;
			case "t":
				// One character am/pm indicator ("a" or "p")
			case "tt":
				// Multicharacter am/pm indicator
				part = value.getHours() < 12 ? ( cal.AM ? cal.AM[0] : " " ) : ( cal.PM ? cal.PM[0] : " " );
				ret.push( clength === 1 ? part.charAt(0) : part );
				break;
			case "f":
				// Deciseconds
			case "ff":
				// Centiseconds
			case "fff":
				// Milliseconds
				ret.push(
					padZeros( value.getMilliseconds(), 3 ).substr( 0, clength )
				);
				break;
			case "z":
				// Time zone offset, no leading zero
			case "zz":
				// Time zone offset with leading zero
				hour = value.getTimezoneOffset() / 60;
				ret.push(
					( hour <= 0 ? "+" : "-" ) + padZeros( Math.floor(Math.abs(hour)), clength )
				);
				break;
			case "zzz":
				// Time zone offset with leading zero
				hour = value.getTimezoneOffset() / 60;
				ret.push(
					( hour <= 0 ? "+" : "-" ) + padZeros( Math.floor(Math.abs(hour)), 2 )
					// Hard coded ":" separator, rather than using cal.TimeSeparator
					// Repeated here for consistency, plus ":" was already assumed in date parsing.
					+ ":" + padZeros( Math.abs(value.getTimezoneOffset() % 60), 2 )
				);
				break;
			case "g":
			case "gg":
				if ( cal.eras ) {
					ret.push(
						cal.eras[ getEra(value, eras) ].name
					);
				}
				break;
		case "/":
			ret.push( cal["/"] );
			break;
		default:
			throw "Invalid date format pattern \'" + current + "\'.";
			break;
		}
	}
	return ret.join( "" );
};

// formatNumber
(function() {
	var expandNumber;

	expandNumber = function( number, precision, formatInfo ) {
		var groupSizes = formatInfo.groupSizes,
			curSize = groupSizes[ 0 ],
			curGroupIndex = 1,
			factor = Math.pow( 10, precision ),
			rounded = Math.round( number * factor ) / factor;

		if ( !isFinite(rounded) ) {
			rounded = number;
		}
		number = rounded;

		var numberString = number+"",
			right = "",
			split = numberString.split( /e/i ),
			exponent = split.length > 1 ? parseInt( split[1], 10 ) : 0;
		numberString = split[ 0 ];
		split = numberString.split( "." );
		numberString = split[ 0 ];
		right = split.length > 1 ? split[ 1 ] : "";

		var l;
		if ( exponent > 0 ) {
			right = zeroPad( right, exponent, false );
			numberString += right.slice( 0, exponent );
			right = right.substr( exponent );
		}
		else if ( exponent < 0 ) {
			exponent = -exponent;
			numberString = zeroPad( numberString, exponent + 1 );
			right = numberString.slice( -exponent, numberString.length ) + right;
			numberString = numberString.slice( 0, -exponent );
		}

		if ( precision > 0 ) {
			right = formatInfo[ "." ] +
				( (right.length > precision) ? right.slice(0, precision) : zeroPad(right, precision) );
		}
		else {
			right = "";
		}

		var stringIndex = numberString.length - 1,
			sep = formatInfo[ "," ],
			ret = "";

		while ( stringIndex >= 0 ) {
			if ( curSize === 0 || curSize > stringIndex ) {
				return numberString.slice( 0, stringIndex + 1 ) + ( ret.length ? (sep + ret + right) : right );
			}
			ret = numberString.slice( stringIndex - curSize + 1, stringIndex + 1 ) + ( ret.length ? (sep + ret) : "" );

			stringIndex -= curSize;

			if ( curGroupIndex < groupSizes.length ) {
				curSize = groupSizes[ curGroupIndex ];
				curGroupIndex++;
			}
		}

		return numberString.slice( 0, stringIndex + 1 ) + sep + ret + right;
	};

	formatNumber = function( value, format, culture ) {
		if ( !format || format === "i" ) {
			return culture.name.length ? value.toLocaleString() : value.toString();
		}
		format = format || "D";

		var nf = culture.numberFormat,
			number = Math.abs( value ),
			precision = -1,
			pattern;
		if ( format.length > 1 ) precision = parseInt( format.slice(1), 10 );

		var current = format.charAt( 0 ).toUpperCase(),
			formatInfo;

		switch ( current ) {
			case "D":
				pattern = "n";
				if ( precision !== -1 ) {
					number = zeroPad( "" + number, precision, true );
				}
				if ( value < 0 ) number = -number;
				break;
			case "N":
				formatInfo = nf;
				// fall through
			case "C":
				formatInfo = formatInfo || nf.currency;
				// fall through
			case "P":
				formatInfo = formatInfo || nf.percent;
				pattern = value < 0 ? formatInfo.pattern[ 0 ] : ( formatInfo.pattern[1] || "n" );
				if ( precision === -1 ) precision = formatInfo.decimals;
				number = expandNumber( number * (current === "P" ? 100 : 1), precision, formatInfo );
				break;
			default:
				throw "Bad number format specifier: " + current;
		}

		var patternParts = /n|\$|-|%/g,
			ret = "";
		for ( ; ; ) {
			var index = patternParts.lastIndex,
				ar = patternParts.exec( pattern );

			ret += pattern.slice( index, ar ? ar.index : pattern.length );

			if ( !ar ) {
				break;
			}

			switch ( ar[0] ) {
				case "n":
					ret += number;
					break;
				case "$":
					ret += nf.currency.symbol;
					break;
				case "-":
					// don't make 0 negative
					if ( /[1-9]/.test(number) ) {
						ret += nf[ "-" ];
					}
					break;
				case "%":
					ret += nf.percent.symbol;
					break;
			}
		}

		return ret;
	};

}());

getTokenRegExp = function() {
	// regular expression for matching date and time tokens in format strings.
	return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;
};

getEra = function( date, eras ) {
	if ( !eras ) return 0;
	var start, ticks = date.getTime();
	for ( var i = 0, l = eras.length; i < l; i++ ) {
		start = eras[ i ].start;
		if ( start === null || ticks >= start ) {
			return i;
		}
	}
	return 0;
};

getEraYear = function( date, cal, era, sortable ) {
	var year = date.getFullYear();
	if ( !sortable && cal.eras ) {
		// convert normal gregorian year to era-shifted gregorian
		// year by subtracting the era offset
		year -= cal.eras[ era ].offset;
	}
	return year;
};

// parseExact
(function() {
	var expandYear,
		getDayIndex,
		getMonthIndex,
		getParseRegExp,
		outOfRange,
		toUpper,
		toUpperArray;

	expandYear = function( cal, year ) {
		// expands 2-digit year into 4 digits.
		var now = new Date(),
			era = getEra( now );
		if ( year < 100 ) {
			var twoDigitYearMax = cal.twoDigitYearMax;
			twoDigitYearMax = typeof twoDigitYearMax === "string" ? new Date().getFullYear() % 100 + parseInt( twoDigitYearMax, 10 ) : twoDigitYearMax;
			var curr = getEraYear( now, cal, era );
			year += curr - ( curr % 100 );
			if ( year > twoDigitYearMax ) {
				year -= 100;
			}
		}
		return year;
	};

	getDayIndex = function	( cal, value, abbr ) {
		var ret,
			days = cal.days,
			upperDays = cal._upperDays;
		if ( !upperDays ) {
			cal._upperDays = upperDays = [
				toUpperArray( days.names ),
				toUpperArray( days.namesAbbr ),
				toUpperArray( days.namesShort )
			];
		}
		value = toUpper( value );
		if ( abbr ) {
			ret = arrayIndexOf( upperDays[1], value );
			if ( ret === -1 ) {
				ret = arrayIndexOf( upperDays[2], value );
			}
		}
		else {
			ret = arrayIndexOf( upperDays[0], value );
		}
		return ret;
	};

	getMonthIndex = function( cal, value, abbr ) {
		var months = cal.months,
			monthsGen = cal.monthsGenitive || cal.months,
			upperMonths = cal._upperMonths,
			upperMonthsGen = cal._upperMonthsGen;
		if ( !upperMonths ) {
			cal._upperMonths = upperMonths = [
				toUpperArray( months.names ),
				toUpperArray( months.namesAbbr )
			];
			cal._upperMonthsGen = upperMonthsGen = [
				toUpperArray( monthsGen.names ),
				toUpperArray( monthsGen.namesAbbr )
			];
		}
		value = toUpper( value );
		var i = arrayIndexOf( abbr ? upperMonths[1] : upperMonths[0], value );
		if ( i < 0 ) {
			i = arrayIndexOf( abbr ? upperMonthsGen[1] : upperMonthsGen[0], value );
		}
		return i;
	};

	getParseRegExp = function( cal, format ) {
		// converts a format string into a regular expression with groups that
		// can be used to extract date fields from a date string.
		// check for a cached parse regex.
		var re = cal._parseRegExp;
		if ( !re ) {
			cal._parseRegExp = re = {};
		}
		else {
			var reFormat = re[ format ];
			if ( reFormat ) {
				return reFormat;
			}
		}

		// expand single digit formats, then escape regular expression characters.
		var expFormat = expandFormat( cal, format ).replace( /([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1" ),
			regexp = [ "^" ],
			groups = [],
			index = 0,
			quoteCount = 0,
			tokenRegExp = getTokenRegExp(),
			match;

		// iterate through each date token found.
		while ( (match = tokenRegExp.exec(expFormat)) !== null ) {
			var preMatch = expFormat.slice( index, match.index );
			index = tokenRegExp.lastIndex;

			// don't replace any matches that occur inside a string literal.
			quoteCount += appendPreOrPostMatch( preMatch, regexp );
			if ( quoteCount % 2 ) {
				regexp.push( match[0] );
				continue;
			}

			// add a regex group for the token.
			var m = match[ 0 ],
				len = m.length,
				add;
			switch ( m ) {
				case "dddd": case "ddd":
				case "MMMM": case "MMM":
				case "gg": case "g":
					add = "(\\D+)";
					break;
				case "tt": case "t":
					add = "(\\D*)";
					break;
				case "yyyy":
				case "fff":
				case "ff":
				case "f":
					add = "(\\d{" + len + "})";
					break;
				case "dd": case "d":
				case "MM": case "M":
				case "yy": case "y":
				case "HH": case "H":
				case "hh": case "h":
				case "mm": case "m":
				case "ss": case "s":
					add = "(\\d\\d?)";
					break;
				case "zzz":
					add = "([+-]?\\d\\d?:\\d{2})";
					break;
				case "zz": case "z":
					add = "([+-]?\\d\\d?)";
					break;
				case "/":
					add = "(\\" + cal[ "/" ] + ")";
					break;
				default:
					throw "Invalid date format pattern \'" + m + "\'.";
					break;
			}
			if ( add ) {
				regexp.push( add );
			}
			groups.push( match[0] );
		}
		appendPreOrPostMatch( expFormat.slice(index), regexp );
		regexp.push( "$" );

		// allow whitespace to differ when matching formats.
		var regexpStr = regexp.join( "" ).replace( /\s+/g, "\\s+" ),
			parseRegExp = { "regExp": regexpStr, "groups": groups };

		// cache the regex for this format.
		return re[ format ] = parseRegExp;
	};

	outOfRange = function( value, low, high ) {
		return value < low || value > high;
	};

	toUpper = function( value ) {
		// "he-IL" has non-breaking space in weekday names.
		return value.split( "\u00A0" ).join( " " ).toUpperCase();
	};

	toUpperArray = function( arr ) {
		var results = [];
		for ( var i = 0, l = arr.length; i < l; i++ ) {
			results[ i ] = toUpper( arr[i] );
		}
		return results;
	};

	parseExact = function( value, format, culture ) {
		// try to parse the date string by matching against the format string
		// while using the specified culture for date field names.
		value = trim( value );
		var cal = culture.calendar,
			// convert date formats into regular expressions with groupings.
			// use the regexp to determine the input format and extract the date fields.
			parseInfo = getParseRegExp( cal, format ),
			match = new RegExp( parseInfo.regExp ).exec( value );
		if ( match === null ) {
			return null;
		}
		// found a date format that matches the input.
		var groups = parseInfo.groups,
			era = null, year = null, month = null, date = null, weekDay = null,
			hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null,
			pmHour = false;
		// iterate the format groups to extract and set the date fields.
		for ( var j = 0, jl = groups.length; j < jl; j++ ) {
			var matchGroup = match[ j + 1 ];
			if ( matchGroup ) {
				var current = groups[ j ],
					clength = current.length,
					matchInt = parseInt( matchGroup, 10 );
				switch ( current ) {
					case "dd": case "d":
						// Day of month.
						date = matchInt;
						// check that date is generally in valid range, also checking overflow below.
						if ( outOfRange(date, 1, 31) ) return null;
						break;
					case "MMM": case "MMMM":
						month = getMonthIndex( cal, matchGroup, clength === 3 );
						if ( outOfRange(month, 0, 11) ) return null;
						break;
					case "M": case "MM":
						// Month.
						month = matchInt - 1;
						if ( outOfRange(month, 0, 11) ) return null;
						break;
					case "y": case "yy":
					case "yyyy":
						year = clength < 4 ? expandYear( cal, matchInt ) : matchInt;
						if ( outOfRange(year, 0, 9999) ) return null;
						break;
					case "h": case "hh":
						// Hours (12-hour clock).
						hour = matchInt;
						if ( hour === 12 ) hour = 0;
						if ( outOfRange(hour, 0, 11) ) return null;
						break;
					case "H": case "HH":
						// Hours (24-hour clock).
						hour = matchInt;
						if ( outOfRange(hour, 0, 23) ) return null;
						break;
					case "m": case "mm":
						// Minutes.
						min = matchInt;
						if ( outOfRange(min, 0, 59) ) return null;
						break;
					case "s": case "ss":
						// Seconds.
						sec = matchInt;
						if ( outOfRange(sec, 0, 59) ) return null;
						break;
					case "tt": case "t":
						// AM/PM designator.
						// see if it is standard, upper, or lower case PM. If not, ensure it is at least one of
						// the AM tokens. If not, fail the parse for this format.
						pmHour = cal.PM && ( matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2] );
						if (
							!pmHour && (
								!cal.AM || ( matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2] )
							)
						) return null;
						break;
					case "f":
						// Deciseconds.
					case "ff":
						// Centiseconds.
					case "fff":
						// Milliseconds.
						msec = matchInt * Math.pow( 10, 3 - clength );
						if ( outOfRange(msec, 0, 999) ) return null;
						break;
					case "ddd":
						// Day of week.
					case "dddd":
						// Day of week.
						weekDay = getDayIndex( cal, matchGroup, clength === 3 );
						if ( outOfRange(weekDay, 0, 6) ) return null;
						break;
					case "zzz":
						// Time zone offset in +/- hours:min.
						var offsets = matchGroup.split( /:/ );
						if ( offsets.length !== 2 ) return null;
						hourOffset = parseInt( offsets[0], 10 );
						if ( outOfRange(hourOffset, -12, 13) ) return null;
						var minOffset = parseInt( offsets[1], 10 );
						if ( outOfRange(minOffset, 0, 59) ) return null;
						tzMinOffset = ( hourOffset * 60 ) + ( startsWith(matchGroup, "-") ? -minOffset : minOffset );
						break;
					case "z": case "zz":
						// Time zone offset in +/- hours.
						hourOffset = matchInt;
						if ( outOfRange(hourOffset, -12, 13) ) return null;
						tzMinOffset = hourOffset * 60;
						break;
					case "g": case "gg":
						var eraName = matchGroup;
						if ( !eraName || !cal.eras ) return null;
						eraName = trim( eraName.toLowerCase() );
						for ( var i = 0, l = cal.eras.length; i < l; i++ ) {
							if ( eraName === cal.eras[i].name.toLowerCase() ) {
								era = i;
								break;
							}
						}
						// could not find an era with that name
						if ( era === null ) return null;
						break;
				}
			}
		}
		var result = new Date(), defaultYear, convert = cal.convert;
		defaultYear = convert ? convert.fromGregorian( result )[ 0 ] : result.getFullYear();
		if ( year === null ) {
			year = defaultYear;
		}
		else if ( cal.eras ) {
			// year must be shifted to normal gregorian year
			// but not if year was not specified, its already normal gregorian
			// per the main if clause above.
			year += cal.eras[( era || 0 )].offset;
		}
		// set default day and month to 1 and January, so if unspecified, these are the defaults
		// instead of the current day/month.
		if ( month === null ) {
			month = 0;
		}
		if ( date === null ) {
			date = 1;
		}
		// now have year, month, and date, but in the culture's calendar.
		// convert to gregorian if necessary
		if ( convert ) {
			result = convert.toGregorian( year, month, date );
			// conversion failed, must be an invalid match
			if ( result === null ) return null;
		}
		else {
			// have to set year, month and date together to avoid overflow based on current date.
			result.setFullYear( year, month, date );
			// check to see if date overflowed for specified month (only checked 1-31 above).
			if ( result.getDate() !== date ) return null;
			// invalid day of week.
			if ( weekDay !== null && result.getDay() !== weekDay ) {
				return null;
			}
		}
		// if pm designator token was found make sure the hours fit the 24-hour clock.
		if ( pmHour && hour < 12 ) {
			hour += 12;
		}
		result.setHours( hour, min, sec, msec );
		if ( tzMinOffset !== null ) {
			// adjust timezone to utc before applying local offset.
			var adjustedMin = result.getMinutes() - ( tzMinOffset + result.getTimezoneOffset() );
			// Safari limits hours and minutes to the range of -127 to 127.	 We need to use setHours
			// to ensure both these fields will not exceed this range.	adjustedMin will range
			// somewhere between -1440 and 1500, so we only need to split this into hours.
			result.setHours( result.getHours() + parseInt(adjustedMin / 60, 10), adjustedMin % 60 );
		}
		return result;
	};
}());

parseNegativePattern = function( value, nf, negativePattern ) {
	var neg = nf[ "-" ],
		pos = nf[ "+" ],
		ret;
	switch ( negativePattern ) {
		case "n -":
			neg = " " + neg;
			pos = " " + pos;
			// fall through
		case "n-":
			if ( endsWith(value, neg) ) {
				ret = [ "-", value.substr(0, value.length - neg.length) ];
			}
			else if ( endsWith(value, pos) ) {
				ret = [ "+", value.substr(0, value.length - pos.length) ];
			}
			break;
		case "- n":
			neg += " ";
			pos += " ";
			// fall through
		case "-n":
			if ( startsWith(value, neg) ) {
				ret = [ "-", value.substr(neg.length) ];
			}
			else if ( startsWith(value, pos) ) {
				ret = [ "+", value.substr(pos.length) ];
			}
			break;
		case "(n)":
			if ( startsWith(value, "(") && endsWith(value, ")") ) {
				ret = [ "-", value.substr(1, value.length - 2) ];
			}
			break;
	}
	return ret || [ "", value ];
};

//
// public instance functions
//

Globalize.prototype.findClosestCulture = function( cultureSelector ) {
	return Globalize.findClosestCulture.call( this, cultureSelector );
};

Globalize.prototype.format = function( value, format, cultureSelector ) {
	return Globalize.format.call( this, value, format, cultureSelector );
};

Globalize.prototype.localize = function( key, cultureSelector ) {
	return Globalize.localize.call( this, key, cultureSelector );
};

Globalize.prototype.parseInt = function( value, radix, cultureSelector ) {
	return Globalize.parseInt.call( this, value, radix, cultureSelector );
};

Globalize.prototype.parseFloat = function( value, radix, cultureSelector ) {
	return Globalize.parseFloat.call( this, value, radix, cultureSelector );
};

Globalize.prototype.culture = function( cultureSelector ) {
	return Globalize.culture.call( this, cultureSelector );
};

//
// public singleton functions
//

Globalize.addCultureInfo = function( cultureName, baseCultureName, info ) {

	var base = {},
		isNew = false;

	if ( typeof cultureName !== "string" ) {
		// cultureName argument is optional string. If not specified, assume info is first
		// and only argument. Specified info deep-extends current culture.
		info = cultureName;
		cultureName = this.culture().name;
		base = this.cultures[ cultureName ];
	} else if ( typeof baseCultureName !== "string" ) {
		// baseCultureName argument is optional string. If not specified, assume info is second
		// argument. Specified info deep-extends specified culture.
		// If specified culture does not exist, create by deep-extending default
		info = baseCultureName;
		isNew = ( this.cultures[ cultureName ] == null );
		base = this.cultures[ cultureName ] || this.cultures[ "default" ];
	} else {
		// cultureName and baseCultureName specified. Assume a new culture is being created
		// by deep-extending an specified base culture
		isNew = true;
		base = this.cultures[ baseCultureName ];
	}

	this.cultures[ cultureName ] = extend(true, {},
		base,
		info
	);
	// Make the standard calendar the current culture if it's a new culture
	if ( isNew ) {
		this.cultures[ cultureName ].calendar = this.cultures[ cultureName ].calendars.standard;
	}
};

Globalize.findClosestCulture = function( name ) {
	var match;
	if ( !name ) {
		return this.cultures[ this.cultureSelector ] || this.cultures[ "default" ];
	}
	if ( typeof name === "string" ) {
		name = name.split( "," );
	}
	if ( isArray(name) ) {
		var lang,
			cultures = this.cultures,
			list = name,
			i, l = list.length,
			prioritized = [];
		for ( i = 0; i < l; i++ ) {
			name = trim( list[i] );
			var pri, parts = name.split( ";" );
			lang = trim( parts[0] );
			if ( parts.length === 1 ) {
				pri = 1;
			}
			else {
				name = trim( parts[1] );
				if ( name.indexOf("q=") === 0 ) {
					name = name.substr( 2 );
					pri = parseFloat( name );
					pri = isNaN( pri ) ? 0 : pri;
				}
				else {
					pri = 1;
				}
			}
			prioritized.push({ lang: lang, pri: pri });
		}
		prioritized.sort(function( a, b ) {
			return a.pri < b.pri ? 1 : -1;
		});

		// exact match
		for ( i = 0; i < l; i++ ) {
			lang = prioritized[ i ].lang;
			match = cultures[ lang ];
			if ( match ) {
				return match;
			}
		}

		// neutral language match
		for ( i = 0; i < l; i++ ) {
			lang = prioritized[ i ].lang;
			do {
				var index = lang.lastIndexOf( "-" );
				if ( index === -1 ) {
					break;
				}
				// strip off the last part. e.g. en-US => en
				lang = lang.substr( 0, index );
				match = cultures[ lang ];
				if ( match ) {
					return match;
				}
			}
			while ( 1 );
		}

		// last resort: match first culture using that language
		for ( i = 0; i < l; i++ ) {
			lang = prioritized[ i ].lang;
			for ( var cultureKey in cultures ) {
				var culture = cultures[ cultureKey ];
				if ( culture.language == lang ) {
					return culture;
				}
			}
		}
	}
	else if ( typeof name === "object" ) {
		return name;
	}
	return match || null;
};

Globalize.format = function( value, format, cultureSelector ) {
	culture = this.findClosestCulture( cultureSelector );
	if ( value instanceof Date ) {
		value = formatDate( value, format, culture );
	}
	else if ( typeof value === "number" ) {
		value = formatNumber( value, format, culture );
	}
	return value;
};

Globalize.localize = function( key, cultureSelector ) {
	return (
		this.findClosestCulture( cultureSelector ).messages[ key ]
		||
		this.cultures[ "default" ].messages[ "key" ]
	);
};

Globalize.parseDate = function( value, formats, culture ) {
	culture = this.findClosestCulture( culture );

	var date, prop, patterns;
	if ( formats ) {
		if ( typeof formats === "string" ) {
			formats = [ formats ];
		}
		if ( formats.length ) {
			for ( var i = 0, l = formats.length; i < l; i++ ) {
				var format = formats[ i ];
				if ( format ) {
					date = parseExact( value, format, culture );
					if ( date ) {
						break;
					}
				}
			}
		}
	} else {
		patterns = culture.calendar.patterns;
		for ( prop in patterns ) {
			date = parseExact( value, patterns[prop], culture );
			if ( date ) {
				break;
			}
		}
	}

	return date || null;
};

Globalize.parseInt = function( value, radix, cultureSelector ) {
	return Math.floor( Globalize.parseFloat(value, radix, cultureSelector) );
};

Globalize.parseFloat = function( value, radix, cultureSelector ) {
	// radix argument is optional
	if ( typeof radix !== "number" ) {
		cultureSelector = radix;
		radix = 10;
	}

	var culture = this.findClosestCulture( cultureSelector );
	var ret = NaN,
		nf = culture.numberFormat;

	if ( value.indexOf(culture.numberFormat.currency.symbol) > -1 ) {
		// remove currency symbol
		value = value.replace( culture.numberFormat.currency.symbol, "" );
		// replace decimal seperator
		value = value.replace( culture.numberFormat.currency["."], culture.numberFormat["."] );
	}

	// trim leading and trailing whitespace
	value = trim( value );

	// allow infinity or hexidecimal
	if ( regexInfinity.test(value) ) {
		ret = parseFloat( value );
	}
	else if ( !radix && regexHex.test(value) ) {
		ret = parseInt( value, 16 );
	}
	else {
		var signInfo = parseNegativePattern( value, nf, nf.pattern[0] ),
			sign = signInfo[ 0 ],
			num = signInfo[ 1 ];
		// determine sign and number
		if ( sign === "" && nf.pattern[0] !== "-n" ) {
			signInfo = parseNegativePattern( value, nf, "-n" );
			sign = signInfo[ 0 ];
			num = signInfo[ 1 ];
		}
		sign = sign || "+";
		// determine exponent and number
		var exponent,
			intAndFraction,
			exponentPos = num.indexOf( "e" );
		if ( exponentPos < 0 ) exponentPos = num.indexOf( "E" );
		if ( exponentPos < 0 ) {
			intAndFraction = num;
			exponent = null;
		}
		else {
			intAndFraction = num.substr( 0, exponentPos );
			exponent = num.substr( exponentPos + 1 );
		}
		// determine decimal position
		var integer,
			fraction,
			decSep = nf[ "." ],
			decimalPos = intAndFraction.indexOf( decSep );
		if ( decimalPos < 0 ) {
			integer = intAndFraction;
			fraction = null;
		}
		else {
			integer = intAndFraction.substr( 0, decimalPos );
			fraction = intAndFraction.substr( decimalPos + decSep.length );
		}
		// handle groups (e.g. 1,000,000)
		var groupSep = nf[ "," ];
		integer = integer.split( groupSep ).join( "" );
		var altGroupSep = groupSep.replace( /\u00A0/g, " " );
		if ( groupSep !== altGroupSep ) {
			integer = integer.split( altGroupSep ).join( "" );
		}
		// build a natively parsable number string
		var p = sign + integer;
		if ( fraction !== null ) {
			p += "." + fraction;
		}
		if ( exponent !== null ) {
			// exponent itself may have a number patternd
			var expSignInfo = parseNegativePattern( exponent, nf, "-n" );
			p += "e" + ( expSignInfo[0] || "+" ) + expSignInfo[ 1 ];
		}
		if ( regexParseFloat.test(p) ) {
			ret = parseFloat( p );
		}
	}
	return ret;
};

Globalize.culture = function( cultureSelector ) {
	// setter
	if ( typeof cultureSelector !== "undefined" ) {
		this.cultureSelector = cultureSelector;
	}
	// getter
	return this.findClosestCulture( cultureSelector ) || this.culture[ "default" ];
};

}( this ));

/*
 * Globalize Culture en-US
 *
 * http://github.com/jquery/globalize
 *
 * Copyright Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * This file was generated by the Globalize Culture Generator
 * Translation: bugs found in this file need to be fixed in the generator
 */

(function( window, undefined ) {

var Globalize;

if ( typeof require !== "undefined"
	&& typeof exports !== "undefined"
	&& typeof module !== "undefined" ) {
	// Assume CommonJS
	Globalize = require( "globalize" );
} else {
	// Global variable
	Globalize = window.Globalize;
}

Globalize.addCultureInfo( "en-US", "default", {
	englishName: "English (United States)"
});

}( this ));

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var type;
            (function (type) {
                /**
                 * Module Double contains a set of constants and precision based utility methods
                 * for dealing with doubles and their decimal garbage in the javascript.
                 */
                var Double;
                (function (Double) {
                    // Constants.
                    Double.MIN_VALUE = -Number.MAX_VALUE;
                    Double.MAX_VALUE = Number.MAX_VALUE;
                    Double.MIN_EXP = -308;
                    Double.MAX_EXP = 308;
                    Double.EPSILON = 1E-323;
                    Double.DEFAULT_PRECISION = 0.0001;
                    Double.DEFAULT_PRECISION_IN_DECIMAL_DIGITS = 12;
                    Double.LOG_E_10 = Math.log(10);
                    Double.POSITIVE_POWERS = [
                        1E0, 1E1, 1E2, 1E3, 1E4, 1E5, 1E6, 1E7, 1E8, 1E9, 1E10, 1E11, 1E12, 1E13, 1E14, 1E15, 1E16, 1E17, 1E18, 1E19, 1E20, 1E21, 1E22, 1E23, 1E24, 1E25, 1E26, 1E27, 1E28, 1E29, 1E30, 1E31, 1E32, 1E33, 1E34, 1E35, 1E36, 1E37, 1E38, 1E39, 1E40, 1E41, 1E42, 1E43, 1E44, 1E45, 1E46, 1E47, 1E48, 1E49, 1E50, 1E51, 1E52, 1E53, 1E54, 1E55, 1E56, 1E57, 1E58, 1E59, 1E60, 1E61, 1E62, 1E63, 1E64, 1E65, 1E66, 1E67, 1E68, 1E69, 1E70, 1E71, 1E72, 1E73, 1E74, 1E75, 1E76, 1E77, 1E78, 1E79, 1E80, 1E81, 1E82, 1E83, 1E84, 1E85, 1E86, 1E87, 1E88, 1E89, 1E90, 1E91, 1E92, 1E93, 1E94, 1E95, 1E96, 1E97, 1E98, 1E99,
                        1E100, 1E101, 1E102, 1E103, 1E104, 1E105, 1E106, 1E107, 1E108, 1E109, 1E110, 1E111, 1E112, 1E113, 1E114, 1E115, 1E116, 1E117, 1E118, 1E119, 1E120, 1E121, 1E122, 1E123, 1E124, 1E125, 1E126, 1E127, 1E128, 1E129, 1E130, 1E131, 1E132, 1E133, 1E134, 1E135, 1E136, 1E137, 1E138, 1E139, 1E140, 1E141, 1E142, 1E143, 1E144, 1E145, 1E146, 1E147, 1E148, 1E149, 1E150, 1E151, 1E152, 1E153, 1E154, 1E155, 1E156, 1E157, 1E158, 1E159, 1E160, 1E161, 1E162, 1E163, 1E164, 1E165, 1E166, 1E167, 1E168, 1E169, 1E170, 1E171, 1E172, 1E173, 1E174, 1E175, 1E176, 1E177, 1E178, 1E179, 1E180, 1E181, 1E182, 1E183, 1E184, 1E185, 1E186, 1E187, 1E188, 1E189, 1E190, 1E191, 1E192, 1E193, 1E194, 1E195, 1E196, 1E197, 1E198, 1E199,
                        1E200, 1E201, 1E202, 1E203, 1E204, 1E205, 1E206, 1E207, 1E208, 1E209, 1E210, 1E211, 1E212, 1E213, 1E214, 1E215, 1E216, 1E217, 1E218, 1E219, 1E220, 1E221, 1E222, 1E223, 1E224, 1E225, 1E226, 1E227, 1E228, 1E229, 1E230, 1E231, 1E232, 1E233, 1E234, 1E235, 1E236, 1E237, 1E238, 1E239, 1E240, 1E241, 1E242, 1E243, 1E244, 1E245, 1E246, 1E247, 1E248, 1E249, 1E250, 1E251, 1E252, 1E253, 1E254, 1E255, 1E256, 1E257, 1E258, 1E259, 1E260, 1E261, 1E262, 1E263, 1E264, 1E265, 1E266, 1E267, 1E268, 1E269, 1E270, 1E271, 1E272, 1E273, 1E274, 1E275, 1E276, 1E277, 1E278, 1E279, 1E280, 1E281, 1E282, 1E283, 1E284, 1E285, 1E286, 1E287, 1E288, 1E289, 1E290, 1E291, 1E292, 1E293, 1E294, 1E295, 1E296, 1E297, 1E298, 1E299,
                        1E300, 1E301, 1E302, 1E303, 1E304, 1E305, 1E306, 1E307, 1E308];
                    Double.NEGATIVE_POWERS = [
                        1E0, 1E-1, 1E-2, 1E-3, 1E-4, 1E-5, 1E-6, 1E-7, 1E-8, 1E-9, 1E-10, 1E-11, 1E-12, 1E-13, 1E-14, 1E-15, 1E-16, 1E-17, 1E-18, 1E-19, 1E-20, 1E-21, 1E-22, 1E-23, 1E-24, 1E-25, 1E-26, 1E-27, 1E-28, 1E-29, 1E-30, 1E-31, 1E-32, 1E-33, 1E-34, 1E-35, 1E-36, 1E-37, 1E-38, 1E-39, 1E-40, 1E-41, 1E-42, 1E-43, 1E-44, 1E-45, 1E-46, 1E-47, 1E-48, 1E-49, 1E-50, 1E-51, 1E-52, 1E-53, 1E-54, 1E-55, 1E-56, 1E-57, 1E-58, 1E-59, 1E-60, 1E-61, 1E-62, 1E-63, 1E-64, 1E-65, 1E-66, 1E-67, 1E-68, 1E-69, 1E-70, 1E-71, 1E-72, 1E-73, 1E-74, 1E-75, 1E-76, 1E-77, 1E-78, 1E-79, 1E-80, 1E-81, 1E-82, 1E-83, 1E-84, 1E-85, 1E-86, 1E-87, 1E-88, 1E-89, 1E-90, 1E-91, 1E-92, 1E-93, 1E-94, 1E-95, 1E-96, 1E-97, 1E-98, 1E-99,
                        1E-100, 1E-101, 1E-102, 1E-103, 1E-104, 1E-105, 1E-106, 1E-107, 1E-108, 1E-109, 1E-110, 1E-111, 1E-112, 1E-113, 1E-114, 1E-115, 1E-116, 1E-117, 1E-118, 1E-119, 1E-120, 1E-121, 1E-122, 1E-123, 1E-124, 1E-125, 1E-126, 1E-127, 1E-128, 1E-129, 1E-130, 1E-131, 1E-132, 1E-133, 1E-134, 1E-135, 1E-136, 1E-137, 1E-138, 1E-139, 1E-140, 1E-141, 1E-142, 1E-143, 1E-144, 1E-145, 1E-146, 1E-147, 1E-148, 1E-149, 1E-150, 1E-151, 1E-152, 1E-153, 1E-154, 1E-155, 1E-156, 1E-157, 1E-158, 1E-159, 1E-160, 1E-161, 1E-162, 1E-163, 1E-164, 1E-165, 1E-166, 1E-167, 1E-168, 1E-169, 1E-170, 1E-171, 1E-172, 1E-173, 1E-174, 1E-175, 1E-176, 1E-177, 1E-178, 1E-179, 1E-180, 1E-181, 1E-182, 1E-183, 1E-184, 1E-185, 1E-186, 1E-187, 1E-188, 1E-189, 1E-190, 1E-191, 1E-192, 1E-193, 1E-194, 1E-195, 1E-196, 1E-197, 1E-198, 1E-199,
                        1E-200, 1E-201, 1E-202, 1E-203, 1E-204, 1E-205, 1E-206, 1E-207, 1E-208, 1E-209, 1E-210, 1E-211, 1E-212, 1E-213, 1E-214, 1E-215, 1E-216, 1E-217, 1E-218, 1E-219, 1E-220, 1E-221, 1E-222, 1E-223, 1E-224, 1E-225, 1E-226, 1E-227, 1E-228, 1E-229, 1E-230, 1E-231, 1E-232, 1E-233, 1E-234, 1E-235, 1E-236, 1E-237, 1E-238, 1E-239, 1E-240, 1E-241, 1E-242, 1E-243, 1E-244, 1E-245, 1E-246, 1E-247, 1E-248, 1E-249, 1E-250, 1E-251, 1E-252, 1E-253, 1E-254, 1E-255, 1E-256, 1E-257, 1E-258, 1E-259, 1E-260, 1E-261, 1E-262, 1E-263, 1E-264, 1E-265, 1E-266, 1E-267, 1E-268, 1E-269, 1E-270, 1E-271, 1E-272, 1E-273, 1E-274, 1E-275, 1E-276, 1E-277, 1E-278, 1E-279, 1E-280, 1E-281, 1E-282, 1E-283, 1E-284, 1E-285, 1E-286, 1E-287, 1E-288, 1E-289, 1E-290, 1E-291, 1E-292, 1E-293, 1E-294, 1E-295, 1E-296, 1E-297, 1E-298, 1E-299,
                        1E-300, 1E-301, 1E-302, 1E-303, 1E-304, 1E-305, 1E-306, 1E-307, 1E-308, 1E-309, 1E-310, 1E-311, 1E-312, 1E-313, 1E-314, 1E-315, 1E-316, 1E-317, 1E-318, 1E-319, 1E-320, 1E-321, 1E-322, 1E-323, 1E-324];
                    /**
                     * Returns powers of 10.
                     * Unlike the Math.pow this function produces no decimal garbage.
                     * @param exp Exponent.
                     */
                    function pow10(exp) {
                        // Positive & zero
                        if (exp >= 0) {
                            if (exp < Double.POSITIVE_POWERS.length) {
                                return Double.POSITIVE_POWERS[exp];
                            }
                            else {
                                return Infinity;
                            }
                        }
                        // Negative
                        exp = -exp;
                        if (exp > 0 && exp < Double.NEGATIVE_POWERS.length) {
                            return Double.NEGATIVE_POWERS[exp];
                        }
                        else {
                            return 0;
                        }
                    }
                    Double.pow10 = pow10;
                    /**
                     * Returns the 10 base logarithm of the number.
                     * Unlike Math.log function this produces integer results with no decimal garbage.
                     * @param val Positive value or zero.
                     */
                    function log10(val) {
                        // Fast Log10() algorithm 
                        if (val > 1 && val < 1E16) {
                            if (val < 1E8) {
                                if (val < 1E4) {
                                    if (val < 1E2) {
                                        if (val < 1E1) {
                                            return 0;
                                        }
                                        else {
                                            return 1;
                                        }
                                    }
                                    else {
                                        if (val < 1E3) {
                                            return 2;
                                        }
                                        else {
                                            return 3;
                                        }
                                    }
                                }
                                else {
                                    if (val < 1E6) {
                                        if (val < 1E5) {
                                            return 4;
                                        }
                                        else {
                                            return 5;
                                        }
                                    }
                                    else {
                                        if (val < 1E7) {
                                            return 6;
                                        }
                                        else {
                                            return 7;
                                        }
                                    }
                                }
                            }
                            else {
                                if (val < 1E12) {
                                    if (val < 1E10) {
                                        if (val < 1E9) {
                                            return 8;
                                        }
                                        else {
                                            return 9;
                                        }
                                    }
                                    else {
                                        if (val < 1E11) {
                                            return 10;
                                        }
                                        else {
                                            return 11;
                                        }
                                    }
                                }
                                else {
                                    if (val < 1E14) {
                                        if (val < 1E13) {
                                            return 12;
                                        }
                                        else {
                                            return 13;
                                        }
                                    }
                                    else {
                                        if (val < 1E15) {
                                            return 14;
                                        }
                                        else {
                                            return 15;
                                        }
                                    }
                                }
                            }
                        }
                        if (val > 1E-16 && val < 1) {
                            if (val < 1E-8) {
                                if (val < 1E-12) {
                                    if (val < 1E-14) {
                                        if (val < 1E-15) {
                                            return -16;
                                        }
                                        else {
                                            return -15;
                                        }
                                    }
                                    else {
                                        if (val < 1E-13) {
                                            return -14;
                                        }
                                        else {
                                            return -13;
                                        }
                                    }
                                }
                                else {
                                    if (val < 1E-10) {
                                        if (val < 1E-11) {
                                            return -12;
                                        }
                                        else {
                                            return -11;
                                        }
                                    }
                                    else {
                                        if (val < 1E-9) {
                                            return -10;
                                        }
                                        else {
                                            return -9;
                                        }
                                    }
                                }
                            }
                            else {
                                if (val < 1E-4) {
                                    if (val < 1E-6) {
                                        if (val < 1E-7) {
                                            return -8;
                                        }
                                        else {
                                            return -7;
                                        }
                                    }
                                    else {
                                        if (val < 1E-5) {
                                            return -6;
                                        }
                                        else {
                                            return -5;
                                        }
                                    }
                                }
                                else {
                                    if (val < 1E-2) {
                                        if (val < 1E-3) {
                                            return -4;
                                        }
                                        else {
                                            return -3;
                                        }
                                    }
                                    else {
                                        if (val < 1E-1) {
                                            return -2;
                                        }
                                        else {
                                            return -1;
                                        }
                                    }
                                }
                            }
                        }
                        // JS Math provides only natural log function so we need to calc the 10 base logarithm:
                        // logb(x) = logk(x)/logk(b); 
                        var log10 = Math.log(val) / Double.LOG_E_10;
                        return Double.floorWithPrecision(log10);
                    }
                    Double.log10 = log10;
                    /**
                     * Returns a power of 10 representing precision of the number based on the number of meaningful decimal digits.
                     * For example the precision of 56,263.3767 with the 6 meaningful decimal digit is 0.1.
                     * @param x Value.
                     * @param decimalDigits How many decimal digits are meaningfull.
                     */
                    function getPrecision(x, decimalDigits) {
                        if (decimalDigits === undefined) {
                            decimalDigits = Double.DEFAULT_PRECISION_IN_DECIMAL_DIGITS;
                        }
                        if (!x || !isFinite(x)) {
                            return undefined;
                        }
                        var exp = Double.log10(Math.abs(x));
                        if (exp < Double.MIN_EXP) {
                            return 0;
                        }
                        var precisionExp = Math.max(exp - decimalDigits, -Double.NEGATIVE_POWERS.length + 1);
                        return Double.pow10(precisionExp);
                    }
                    Double.getPrecision = getPrecision;
                    /**
                     * Checks if a delta between 2 numbers is less than provided precision.
                     * @param x One value.
                     * @param y Another value.
                     * @param precision Precision value.
                     */
                    function equalWithPrecision(x, y, precision) {
                        precision = detectPrecision(precision, x, y);
                        return x === y || Math.abs(x - y) < precision;
                    }
                    Double.equalWithPrecision = equalWithPrecision;
                    /**
                     * Checks if a first value is less than another taking
                     * into account the loose precision based equality.
                     * @param x One value.
                     * @param y Another value.
                     * @param precision Precision value.
                     */
                    function lessWithPrecision(x, y, precision) {
                        precision = detectPrecision(precision, x, y);
                        return x < y && Math.abs(x - y) > precision;
                    }
                    Double.lessWithPrecision = lessWithPrecision;
                    /**
                     * Checks if a first value is less or equal than another taking
                     * into account the loose precision based equality.
                     * @param x One value.
                     * @param y Another value.
                     * @param precision Precision value.
                     */
                    function lessOrEqualWithPrecision(x, y, precision) {
                        precision = detectPrecision(precision, x, y);
                        return x < y || Math.abs(x - y) < precision;
                    }
                    Double.lessOrEqualWithPrecision = lessOrEqualWithPrecision;
                    /**
                     * Checks if a first value is greater than another taking
                     * into account the loose precision based equality.
                     * @param x One value.
                     * @param y Another value.
                     * @param precision Precision value.
                     */
                    function greaterWithPrecision(x, y, precision) {
                        precision = detectPrecision(precision, x, y);
                        return x > y && Math.abs(x - y) > precision;
                    }
                    Double.greaterWithPrecision = greaterWithPrecision;
                    /**
                     * Checks if a first value is greater or equal to another taking
                     * into account the loose precision based equality.
                     * @param x One value.
                     * @param y Another value.
                     * @param precision Precision value.
                     */
                    function greaterOrEqualWithPrecision(x, y, precision) {
                        precision = detectPrecision(precision, x, y);
                        return x > y || Math.abs(x - y) < precision;
                    }
                    Double.greaterOrEqualWithPrecision = greaterOrEqualWithPrecision;
                    /**
                     * Floors the number unless it's withing the precision distance from the higher int.
                     * @param x One value.
                     * @param precision Precision value.
                     */
                    function floorWithPrecision(x, precision) {
                        precision = precision != null ? precision : Double.DEFAULT_PRECISION;
                        var roundX = Math.round(x);
                        if (Math.abs(x - roundX) < precision) {
                            return roundX;
                        }
                        else {
                            return Math.floor(x);
                        }
                    }
                    Double.floorWithPrecision = floorWithPrecision;
                    /**
                     * Ceils the number unless it's withing the precision distance from the lower int.
                     * @param x One value.
                     * @param precision Precision value.
                     */
                    function ceilWithPrecision(x, precision) {
                        precision = detectPrecision(precision, Double.DEFAULT_PRECISION);
                        var roundX = Math.round(x);
                        if (Math.abs(x - roundX) < precision) {
                            return roundX;
                        }
                        else {
                            return Math.ceil(x);
                        }
                    }
                    Double.ceilWithPrecision = ceilWithPrecision;
                    /**
                     * Floors the number to the provided precision.
                     * For example 234,578 floored to 1,000 precision is 234,000.
                     * @param x One value.
                     * @param precision Precision value.
                     */
                    function floorToPrecision(x, precision) {
                        precision = detectPrecision(precision, Double.DEFAULT_PRECISION);
                        if (precision === 0 || x === 0) {
                            return x;
                        }
                        // Precision must be a Power of 10
                        return Math.floor(x / precision) * precision;
                    }
                    Double.floorToPrecision = floorToPrecision;
                    /**
                     * Ceils the number to the provided precision.
                     * For example 234,578 floored to 1,000 precision is 235,000.
                     * @param x One value.
                     * @param precision Precision value.
                     */
                    function ceilToPrecision(x, precision) {
                        precision = detectPrecision(precision, Double.DEFAULT_PRECISION);
                        if (precision === 0 || x === 0) {
                            return x;
                        }
                        // Precision must be a Power of 10
                        return Math.ceil(x / precision) * precision;
                    }
                    Double.ceilToPrecision = ceilToPrecision;
                    /**
                     * Rounds the number to the provided precision.
                     * For example 234,578 floored to 1,000 precision is 235,000.
                     * @param x One value.
                     * @param precision Precision value.
                     */
                    function roundToPrecision(x, precision) {
                        precision = detectPrecision(precision, Double.DEFAULT_PRECISION);
                        if (precision === 0 || x === 0) {
                            return x;
                        }
                        // Precision must be a Power of 10
                        var result = Math.round(x / precision) * precision;
                        var decimalDigits = Math.round(Double.log10(Math.abs(x)) - Double.log10(precision)) + 1;
                        if (decimalDigits > 0 && decimalDigits < 16) {
                            result = parseFloat(result.toPrecision(decimalDigits));
                        }
                        return result;
                    }
                    Double.roundToPrecision = roundToPrecision;
                    /**
                     * Returns the value making sure that it's restricted to the provided range.
                     * @param x One value.
                     * @param min Range min boundary.
                     * @param max Range max boundary.
                     */
                    function ensureInRange(x, min, max) {
                        if (x === undefined || x === null) {
                            return x;
                        }
                        if (x < min) {
                            return min;
                        }
                        if (x > max) {
                            return max;
                        }
                        return x;
                    }
                    Double.ensureInRange = ensureInRange;
                    /**
                     * Rounds the value - this method is actually faster than Math.round - used in the graphics utils.
                     * @param x Value to round.
                     */
                    function round(x) {
                        return (0.5 + x) << 0;
                    }
                    Double.round = round;
                    /**
                     * Projects the value from the source range into the target range.
                     * @param value Value to project.
                     * @param fromMin Minimum of the source range.
                     * @param toMin Minimum of the target range.
                     * @param toMax Maximum of the target range.
                     */
                    function project(value, fromMin, fromSize, toMin, toSize) {
                        if (fromSize === 0 || toSize === 0) {
                            if (fromMin <= value && value <= fromMin + fromSize) {
                                return toMin;
                            }
                            else {
                                return NaN;
                            }
                        }
                        var relativeX = (value - fromMin) / fromSize;
                        var projectedX = toMin + relativeX * toSize;
                        return projectedX;
                    }
                    Double.project = project;
                    /**
                     * Removes decimal noise.
                     * @param value Value to be processed.
                     */
                    function removeDecimalNoise(value) {
                        return roundToPrecision(value, getPrecision(value));
                    }
                    Double.removeDecimalNoise = removeDecimalNoise;
                    /**
                     * Checks whether the number is integer.
                     * @param value Value to be checked.
                     */
                    function isInteger(value) {
                        return value !== null && value % 1 === 0;
                    }
                    Double.isInteger = isInteger;
                    /**
                     * Dividing by increment will give us count of increments
                     * Round out the rough edges into even integer
                     * Multiply back by increment to get rounded value
                     * e.g. Rounder.toIncrement(0.647291, 0.05) => 0.65
                     * @param value - value to round to nearest increment
                     * @param increment - smallest increment to round toward
                     */
                    function toIncrement(value, increment) {
                        return Math.round(value / increment) * increment;
                    }
                    Double.toIncrement = toIncrement;
                    /**
                     * Overrides the given precision with defaults if necessary. Exported only for tests
                     *
                     * precision defined returns precision
                     * x defined with y undefined returns twelve digits of precision based on x
                     * x defined but zero with y defined; returns twelve digits of precision based on y
                     * x and y defined retursn twelve digits of precision based on the minimum of the two
                     * if no applicable precision is found based on those (such as x and y being zero), the default precision is used
                     */
                    function detectPrecision(precision, x, y) {
                        if (precision !== undefined) {
                            return precision;
                        }
                        var calculatedPrecision;
                        if (!y) {
                            calculatedPrecision = Double.getPrecision(x);
                        }
                        else if (!x) {
                            calculatedPrecision = Double.getPrecision(y);
                        }
                        else {
                            calculatedPrecision = Double.getPrecision(Math.min(Math.abs(x), Math.abs(y)));
                        }
                        return calculatedPrecision || Double.DEFAULT_PRECISION;
                    }
                    Double.detectPrecision = detectPrecision;
                })(Double = type.Double || (type.Double = {}));
            })(type = utils.type || (utils.type = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var type;
            (function (type) {
                var Prototype;
                (function (Prototype) {
                    /**
                     * Returns a new object with the provided obj as its prototype.
                     */
                    function inherit(obj, extension) {
                        function wrapCtor() { }
                        ;
                        wrapCtor.prototype = obj;
                        var inherited = new wrapCtor();
                        if (extension)
                            extension(inherited);
                        return inherited;
                    }
                    Prototype.inherit = inherit;
                    /**
                     * Returns a new object with the provided obj as its prototype
                     * if, and only if, the prototype has not been previously set
                     */
                    function inheritSingle(obj) {
                        var proto = Object.getPrototypeOf(obj);
                        if (proto === Object.prototype || proto === Array.prototype)
                            obj = inherit(obj);
                        return obj;
                    }
                    Prototype.inheritSingle = inheritSingle;
                    /**
                     * Uses the provided callback function to selectively replace contents in the provided array.
                     * @return A new array with those values overriden
                     * or undefined if no overrides are necessary.
                     */
                    function overrideArray(prototype, override) {
                        if (!prototype)
                            return;
                        var overwritten;
                        for (var i = 0, len = prototype.length; i < len; i++) {
                            var value = override(prototype[i]);
                            if (value) {
                                if (!overwritten)
                                    overwritten = inherit(prototype);
                                overwritten[i] = value;
                            }
                        }
                        return overwritten;
                    }
                    Prototype.overrideArray = overrideArray;
                })(Prototype = type.Prototype || (type.Prototype = {}));
            })(type = utils.type || (utils.type = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var type;
            (function (type) {
                var ArrayExtensions;
                (function (ArrayExtensions) {
                    /**
                     * Returns items that exist in target and other.
                     */
                    function intersect(target, other) {
                        var result = [];
                        for (var i = target.length - 1; i >= 0; --i) {
                            if (other.indexOf(target[i]) !== -1) {
                                result.push(target[i]);
                            }
                        }
                        return result;
                    }
                    ArrayExtensions.intersect = intersect;
                    /**
                     * Return elements exists in target but not exists in other.
                     */
                    function diff(target, other) {
                        var result = [];
                        for (var i = target.length - 1; i >= 0; --i) {
                            var value = target[i];
                            if (other.indexOf(value) === -1) {
                                result.push(value);
                            }
                        }
                        return result;
                    }
                    ArrayExtensions.diff = diff;
                    /**
                     * Return an array with only the distinct items in the source.
                     */
                    function distinct(source) {
                        var result = [];
                        for (var i = 0, len = source.length; i < len; i++) {
                            var value = source[i];
                            if (result.indexOf(value) === -1) {
                                result.push(value);
                            }
                        }
                        return result;
                    }
                    ArrayExtensions.distinct = distinct;
                    /**
                     * Pushes content of source onto target,
                     * for parts of course that do not already exist in target.
                     */
                    function union(target, source) {
                        for (var i = 0, len = source.length; i < len; ++i) {
                            unionSingle(target, source[i]);
                        }
                    }
                    ArrayExtensions.union = union;
                    /**
                     * Pushes value onto target, if value does not already exist in target.
                     */
                    function unionSingle(target, value) {
                        if (target.indexOf(value) < 0) {
                            target.push(value);
                        }
                    }
                    ArrayExtensions.unionSingle = unionSingle;
                    /**
                     * Returns an array with a range of items from source,
                     * including the startIndex & endIndex.
                     */
                    function range(source, startIndex, endIndex) {
                        var result = [];
                        for (var i = startIndex; i <= endIndex; ++i) {
                            result.push(source[i]);
                        }
                        return result;
                    }
                    ArrayExtensions.range = range;
                    /**
                     * Returns an array that includes items from source, up to the specified count.
                     */
                    function take(source, count) {
                        var result = [];
                        for (var i = 0; i < count; ++i) {
                            result.push(source[i]);
                        }
                        return result;
                    }
                    ArrayExtensions.take = take;
                    function copy(source) {
                        return take(source, source.length);
                    }
                    ArrayExtensions.copy = copy;
                    /**
                      * Returns a value indicating whether the arrays have the same values in the same sequence.
                      */
                    function sequenceEqual(left, right, comparison) {
                        // Normalize falsy to null
                        if (!left) {
                            left = null;
                        }
                        if (!right) {
                            right = null;
                        }
                        // T can be same as U, and it is possible for left and right to be the same array object...
                        if (left === right) {
                            return true;
                        }
                        if (!!left !== !!right) {
                            return false;
                        }
                        var len = left.length;
                        if (len !== right.length) {
                            return false;
                        }
                        var i = 0;
                        while (i < len && comparison(left[i], right[i])) {
                            ++i;
                        }
                        return i === len;
                    }
                    ArrayExtensions.sequenceEqual = sequenceEqual;
                    /**
                     * Returns null if the specified array is empty.
                     * Otherwise returns the specified array.
                     */
                    function emptyToNull(array) {
                        if (array && array.length === 0) {
                            return null;
                        }
                        return array;
                    }
                    ArrayExtensions.emptyToNull = emptyToNull;
                    function indexOf(array, predicate) {
                        for (var i = 0, len = array.length; i < len; ++i) {
                            if (predicate(array[i])) {
                                return i;
                            }
                        }
                        return -1;
                    }
                    ArrayExtensions.indexOf = indexOf;
                    /**
                     * Returns a copy of the array rotated by the specified offset.
                     */
                    function rotate(array, offset) {
                        if (offset === 0)
                            return array.slice();
                        var rotated = array.slice(offset);
                        Array.prototype.push.apply(rotated, array.slice(0, offset));
                        return rotated;
                    }
                    ArrayExtensions.rotate = rotate;
                    function createWithId() {
                        return extendWithId([]);
                    }
                    ArrayExtensions.createWithId = createWithId;
                    function extendWithId(array) {
                        var extended = array;
                        extended.withId = withId;
                        return extended;
                    }
                    ArrayExtensions.extendWithId = extendWithId;
                    /**
                     * Finds and returns the first item with a matching ID.
                     */
                    function findWithId(array, id) {
                        for (var i = 0, len = array.length; i < len; i++) {
                            var item = array[i];
                            if (item.id === id)
                                return item;
                        }
                    }
                    ArrayExtensions.findWithId = findWithId;
                    function withId(id) {
                        return ArrayExtensions.findWithId(this, id);
                    }
                    function createWithName() {
                        return extendWithName([]);
                    }
                    ArrayExtensions.createWithName = createWithName;
                    function extendWithName(array) {
                        var extended = array;
                        extended.withName = withName;
                        return extended;
                    }
                    ArrayExtensions.extendWithName = extendWithName;
                    function findItemWithName(array, name) {
                        var index = indexWithName(array, name);
                        if (index >= 0)
                            return array[index];
                    }
                    ArrayExtensions.findItemWithName = findItemWithName;
                    function indexWithName(array, name) {
                        for (var i = 0, len = array.length; i < len; i++) {
                            var item = array[i];
                            if (item.name === name)
                                return i;
                        }
                        return -1;
                    }
                    ArrayExtensions.indexWithName = indexWithName;
                    /**
                     * Inserts a number in sorted order into a list of numbers already in sorted order.
                     * @returns True if the item was added, false if it already existed.
                     */
                    function insertSorted(list, value) {
                        var len = list.length;
                        // NOTE: iterate backwards because incoming values tend to be sorted already.
                        for (var i = len - 1; i >= 0; i--) {
                            var diff_1 = list[i] - value;
                            if (diff_1 === 0)
                                return false;
                            if (diff_1 > 0)
                                continue;
                            // diff < 0
                            list.splice(i + 1, 0, value);
                            return true;
                        }
                        list.unshift(value);
                        return true;
                    }
                    ArrayExtensions.insertSorted = insertSorted;
                    /**
                     * Removes the first occurrence of a value from a list if it exists.
                     * @returns True if the value was removed, false if it did not exist in the list.
                     */
                    function removeFirst(list, value) {
                        var index = list.indexOf(value);
                        if (index < 0)
                            return false;
                        list.splice(index, 1);
                        return true;
                    }
                    ArrayExtensions.removeFirst = removeFirst;
                    /**
                     * Finds and returns the first item with a matching name.
                     */
                    function withName(name) {
                        var array = this;
                        return findItemWithName(array, name);
                    }
                    /**
                     * Deletes all items from the array.
                     */
                    function clear(array) {
                        if (!array)
                            return;
                        while (array.length > 0)
                            array.pop();
                    }
                    ArrayExtensions.clear = clear;
                    function isUndefinedOrEmpty(array) {
                        if (!array || array.length === 0) {
                            return true;
                        }
                        return false;
                    }
                    ArrayExtensions.isUndefinedOrEmpty = isUndefinedOrEmpty;
                    function swap(array, firstIndex, secondIndex) {
                        var temp = array[firstIndex];
                        array[firstIndex] = array[secondIndex];
                        array[secondIndex] = temp;
                    }
                    ArrayExtensions.swap = swap;
                    function isInArray(array, lookupItem, compareCallback) {
                        return array.some(function (item) { return compareCallback(item, lookupItem); });
                    }
                    ArrayExtensions.isInArray = isInArray;
                    /** Checks if the given object is an Array, and looking all the way up the prototype chain. */
                    function isArrayOrInheritedArray(obj) {
                        var nextPrototype = obj;
                        while (nextPrototype != null) {
                            if (Array.isArray(nextPrototype))
                                return true;
                            nextPrototype = Object.getPrototypeOf(nextPrototype);
                        }
                        return false;
                    }
                    ArrayExtensions.isArrayOrInheritedArray = isArrayOrInheritedArray;
                    /**
                     * Returns true if the specified values array is sorted in an order as determined by the specified compareFunction.
                     */
                    function isSorted(values, compareFunction) {
                        var ilen = values.length;
                        if (ilen >= 2) {
                            for (var i = 1; i < ilen; i++) {
                                if (compareFunction(values[i - 1], values[i]) > 0) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    }
                    ArrayExtensions.isSorted = isSorted;
                    /**
                     * Returns true if the specified number values array is sorted in ascending order
                     * (or descending order if the specified descendingOrder is truthy).
                     */
                    function isSortedNumeric(values, descendingOrder) {
                        var compareFunction = descendingOrder ?
                            function (a, b) { return b - a; } :
                            function (a, b) { return a - b; };
                        return isSorted(values, compareFunction);
                    }
                    ArrayExtensions.isSortedNumeric = isSortedNumeric;
                    /**
                     * Ensures that the given T || T[] is in array form, either returning the array or
                     * converting single items into an array of length one.
                     */
                    function ensureArray(value) {
                        if (Array.isArray(value)) {
                            return value;
                        }
                        return [value];
                    }
                    ArrayExtensions.ensureArray = ensureArray;
                })(ArrayExtensions = type.ArrayExtensions || (type.ArrayExtensions = {}));
            })(type = utils.type || (utils.type = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var type;
            (function (type) {
                // NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
                var Double = powerbi.extensibility.utils.type.Double;
                /**
                 * Extensions for Enumerations.
                 */
                var EnumExtensions;
                (function (EnumExtensions) {
                    /**
                     * Gets a value indicating whether the value has the bit flags set.
                     */
                    function hasFlag(value, flag) {
                        return (value & flag) === flag;
                    }
                    EnumExtensions.hasFlag = hasFlag;
                    /**
                     * Sets a value of a flag without modifying any other flags.
                     */
                    function setFlag(value, flag) {
                        return value |= flag;
                    }
                    EnumExtensions.setFlag = setFlag;
                    /**
                     * Resets a value of a flag without modifying any other flags.
                     */
                    function resetFlag(value, flag) {
                        return value &= ~flag;
                    }
                    EnumExtensions.resetFlag = resetFlag;
                    /**
                     * According to the TypeScript Handbook, this is safe to do.
                     */
                    function toString(enumType, value) {
                        return enumType[value];
                    }
                    EnumExtensions.toString = toString;
                    /**
                     * Returns the number of 1's in the specified value that is a set of binary bit flags.
                     */
                    function getBitCount(value) {
                        if (!Double.isInteger(value))
                            return 0;
                        var bitCount = 0;
                        var shiftingValue = value;
                        while (shiftingValue !== 0) {
                            if ((shiftingValue & 1) === 1) {
                                bitCount++;
                            }
                            shiftingValue = shiftingValue >>> 1;
                        }
                        ;
                        return bitCount;
                    }
                    EnumExtensions.getBitCount = getBitCount;
                })(EnumExtensions = type.EnumExtensions || (type.EnumExtensions = {}));
            })(type = utils.type || (utils.type = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var type;
            (function (type) {
                var Double = powerbi.extensibility.utils.type.Double;
                var NumericSequenceRange = (function () {
                    function NumericSequenceRange() {
                    }
                    NumericSequenceRange.prototype._ensureIncludeZero = function () {
                        if (this.includeZero) {
                            // fixed min and max has higher priority than includeZero
                            if (this.min > 0 && !this.hasFixedMin) {
                                this.min = 0;
                            }
                            if (this.max < 0 && !this.hasFixedMax) {
                                this.max = 0;
                            }
                        }
                    };
                    NumericSequenceRange.prototype._ensureNotEmpty = function () {
                        if (this.min === this.max) {
                            if (!this.min) {
                                this.min = 0;
                                this.max = NumericSequenceRange.DEFAULT_MAX;
                                this.hasFixedMin = true;
                                this.hasFixedMax = true;
                            }
                            else {
                                // We are dealing with a single data value (includeZero is not set)
                                // In order to fix the range we need to extend it in both directions by half of the interval.
                                // Interval is calculated based on the number:
                                // 1. Integers below 10,000 are extended by 0.5: so the [2006-2006] empty range is extended to [2005.5-2006.5] range and the ForsedSingleStop=2006
                                // 2. Other numbers are extended by half of their power: [700,001-700,001] => [650,001-750,001] and the ForsedSingleStop=null as we want the intervals to be calculated to cover the range.
                                var value = this.min;
                                var exp = Double.log10(Math.abs(value));
                                var step = void 0;
                                if (exp >= 0 && exp < 4) {
                                    step = 0.5;
                                    this.forcedSingleStop = value;
                                }
                                else {
                                    step = Double.pow10(exp) / 2;
                                    this.forcedSingleStop = null;
                                }
                                this.min = value - step;
                                this.max = value + step;
                            }
                        }
                    };
                    NumericSequenceRange.prototype._ensureDirection = function () {
                        if (this.min > this.max) {
                            var temp = this.min;
                            this.min = this.max;
                            this.max = temp;
                        }
                    };
                    NumericSequenceRange.prototype.getSize = function () {
                        return this.max - this.min;
                    };
                    NumericSequenceRange.prototype.shrinkByStep = function (range, step) {
                        var oldCount = this.min / step;
                        var newCount = range.min / step;
                        var deltaCount = Math.floor(newCount - oldCount);
                        this.min += deltaCount * step;
                        oldCount = this.max / step;
                        newCount = range.max / step;
                        deltaCount = Math.ceil(newCount - oldCount);
                        this.max += deltaCount * step;
                    };
                    NumericSequenceRange.calculate = function (dataMin, dataMax, fixedMin, fixedMax, includeZero) {
                        var result = new NumericSequenceRange();
                        result.includeZero = includeZero ? true : false;
                        result.hasDataRange = ValueUtil.hasValue(dataMin) && ValueUtil.hasValue(dataMax);
                        result.hasFixedMin = ValueUtil.hasValue(fixedMin);
                        result.hasFixedMax = ValueUtil.hasValue(fixedMax);
                        dataMin = Double.ensureInRange(dataMin, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE);
                        dataMax = Double.ensureInRange(dataMax, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE);
                        // Calculate the range using the min, max, dataRange
                        if (result.hasFixedMin && result.hasFixedMax) {
                            result.min = fixedMin;
                            result.max = fixedMax;
                        }
                        else if (result.hasFixedMin) {
                            result.min = fixedMin;
                            result.max = dataMax > fixedMin ? dataMax : fixedMin;
                        }
                        else if (result.hasFixedMax) {
                            result.min = dataMin < fixedMax ? dataMin : fixedMax;
                            result.max = fixedMax;
                        }
                        else if (result.hasDataRange) {
                            result.min = dataMin;
                            result.max = dataMax;
                        }
                        else {
                            result.min = 0;
                            result.max = 0;
                        }
                        result._ensureIncludeZero();
                        result._ensureNotEmpty();
                        result._ensureDirection();
                        if (result.min === 0) {
                            result.hasFixedMin = true; // If the range starts from zero we should prevent extending the intervals into the negative range
                        }
                        else if (result.max === 0) {
                            result.hasFixedMax = true; // If the range ends at zero we should prevent extending the intervals into the positive range
                        }
                        return result;
                    };
                    NumericSequenceRange.calculateDataRange = function (dataMin, dataMax, includeZero) {
                        if (!ValueUtil.hasValue(dataMin) || !ValueUtil.hasValue(dataMax)) {
                            return NumericSequenceRange.calculateFixedRange(0, NumericSequenceRange.DEFAULT_MAX);
                        }
                        else {
                            return NumericSequenceRange.calculate(dataMin, dataMax, null, null, includeZero);
                        }
                    };
                    NumericSequenceRange.calculateFixedRange = function (fixedMin, fixedMax, includeZero) {
                        var result = new NumericSequenceRange();
                        result.hasDataRange = false;
                        result.includeZero = includeZero;
                        result.min = fixedMin;
                        result.max = fixedMax;
                        result._ensureIncludeZero();
                        result._ensureNotEmpty();
                        result._ensureDirection();
                        result.hasFixedMin = true;
                        result.hasFixedMax = true;
                        return result;
                    };
                    NumericSequenceRange.DEFAULT_MAX = 10;
                    NumericSequenceRange.MIN_SUPPORTED_DOUBLE = -1E307;
                    NumericSequenceRange.MAX_SUPPORTED_DOUBLE = 1E307;
                    return NumericSequenceRange;
                }());
                type.NumericSequenceRange = NumericSequenceRange;
                /** Note: Exported for testability */
                var ValueUtil;
                (function (ValueUtil) {
                    function hasValue(value) {
                        return value !== undefined && value !== null;
                    }
                    ValueUtil.hasValue = hasValue;
                })(ValueUtil = type.ValueUtil || (type.ValueUtil = {}));
            })(type = utils.type || (utils.type = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var type;
            (function (type) {
                var Double = powerbi.extensibility.utils.type.Double;
                var NumericSequenceRange = powerbi.extensibility.utils.type.NumericSequenceRange;
                var NumericSequence = (function () {
                    function NumericSequence() {
                    }
                    NumericSequence.calculate = function (range, expectedCount, maxAllowedMargin, minPower, useZeroRefPoint, steps) {
                        var result = new NumericSequence();
                        if (expectedCount === undefined)
                            expectedCount = 10;
                        else
                            expectedCount = Double.ensureInRange(expectedCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT);
                        if (minPower === undefined)
                            minPower = Double.MIN_EXP;
                        if (useZeroRefPoint === undefined)
                            useZeroRefPoint = false;
                        if (maxAllowedMargin === undefined)
                            maxAllowedMargin = 1;
                        if (steps === undefined)
                            steps = [1, 2, 5];
                        // Handle single stop case
                        if (range.forcedSingleStop) {
                            result.interval = range.getSize();
                            result.intervalOffset = result.interval - (range.forcedSingleStop - range.min);
                            result.min = range.min;
                            result.max = range.max;
                            result.sequence = [range.forcedSingleStop];
                            return result;
                        }
                        var interval = 0;
                        var min = 0;
                        var max = 9;
                        var canExtendMin = maxAllowedMargin > 0 && !range.hasFixedMin;
                        var canExtendMax = maxAllowedMargin > 0 && !range.hasFixedMax;
                        var size = range.getSize();
                        var exp = Double.log10(size);
                        // Account for Exp of steps
                        var stepExp = Double.log10(steps[0]);
                        exp = exp - stepExp;
                        // Account for MaxCount
                        var expectedCountExp = Double.log10(expectedCount);
                        exp = exp - expectedCountExp;
                        // Account for MinPower
                        exp = Math.max(exp, minPower - stepExp + 1);
                        var count = undefined;
                        // Create array of "good looking" numbers
                        if (interval !== 0) {
                            // If explicit interval is defined - use it instead of the steps array.
                            var power = Double.pow10(exp);
                            var roundMin = Double.floorToPrecision(range.min, power);
                            var roundMax = Double.ceilToPrecision(range.max, power);
                            var roundRange = NumericSequenceRange.calculateFixedRange(roundMin, roundMax);
                            roundRange.shrinkByStep(range, interval);
                            min = roundRange.min;
                            max = roundRange.max;
                            count = Math.floor(roundRange.getSize() / interval);
                        }
                        else {
                            // No interval defined -> find optimal interval
                            var dexp = void 0;
                            for (dexp = 0; dexp < 3; dexp++) {
                                var e = exp + dexp;
                                var power = Double.pow10(e);
                                var roundMin = Double.floorToPrecision(range.min, power);
                                var roundMax = Double.ceilToPrecision(range.max, power);
                                // Go throught the steps array looking for the smallest step that produces the right interval count.
                                var stepsCount = steps.length;
                                var stepPower = Double.pow10(e - 1);
                                for (var i = 0; i < stepsCount; i++) {
                                    var step = steps[i] * stepPower;
                                    var roundRange = NumericSequenceRange.calculateFixedRange(roundMin, roundMax, useZeroRefPoint);
                                    roundRange.shrinkByStep(range, step);
                                    // If the range is based on Data we might need to extend it to provide nice data margins.
                                    if (canExtendMin && range.min === roundRange.min && maxAllowedMargin >= 1)
                                        roundRange.min -= step;
                                    if (canExtendMax && range.max === roundRange.max && maxAllowedMargin >= 1)
                                        roundRange.max += step;
                                    // Count the intervals
                                    count = Double.ceilWithPrecision(roundRange.getSize() / step, Double.DEFAULT_PRECISION);
                                    if (count <= expectedCount || (dexp === 2 && i === stepsCount - 1) || (expectedCount === 1 && count === 2 && (step > range.getSize() || (range.min < 0 && range.max > 0 && step * 2 >= range.getSize())))) {
                                        interval = step;
                                        min = roundRange.min;
                                        max = roundRange.max;
                                        break;
                                    }
                                }
                                // Increase the scale power until the interval is found
                                if (interval !== 0)
                                    break;
                            }
                        }
                        // Avoid extreme count cases (>1000 ticks)
                        if (count > expectedCount * 32 || count > NumericSequence.MAX_COUNT) {
                            count = Math.min(expectedCount * 32, NumericSequence.MAX_COUNT);
                            interval = (max - min) / count;
                        }
                        result.min = min;
                        result.max = max;
                        result.interval = interval;
                        result.intervalOffset = min - range.min;
                        result.maxAllowedMargin = maxAllowedMargin;
                        result.canExtendMin = canExtendMin;
                        result.canExtendMax = canExtendMax;
                        // Fill in the Sequence
                        var precision = Double.getPrecision(interval, 0);
                        result.precision = precision;
                        var sequence = [];
                        var x = Double.roundToPrecision(min, precision);
                        sequence.push(x);
                        for (var i = 0; i < count; i++) {
                            x = Double.roundToPrecision(x + interval, precision);
                            sequence.push(x);
                        }
                        result.sequence = sequence;
                        result.trimMinMax(range.min, range.max);
                        return result;
                    };
                    /**
                     * Calculates the sequence of int numbers which are mapped to the multiples of the units grid.
                     * @min - The minimum of the range.
                     * @max - The maximum of the range.
                     * @maxCount - The max count of intervals.
                     * @steps - array of intervals.
                     */
                    NumericSequence.calculateUnits = function (min, max, maxCount, steps) {
                        // Initialization actions
                        maxCount = Double.ensureInRange(maxCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT);
                        if (min === max) {
                            max = min + 1;
                        }
                        var stepCount = 0;
                        var step = 0;
                        // Calculate step
                        for (var i = 0; i < steps.length; i++) {
                            step = steps[i];
                            var maxStepCount = Double.ceilWithPrecision(max / step);
                            var minStepCount = Double.floorWithPrecision(min / step);
                            stepCount = maxStepCount - minStepCount;
                            if (stepCount <= maxCount) {
                                break;
                            }
                        }
                        // Calculate the offset
                        var offset = -min;
                        offset = offset % step;
                        // Create sequence
                        var result = new NumericSequence();
                        result.sequence = [];
                        for (var x = min + offset;; x += step) {
                            result.sequence.push(x);
                            if (x >= max)
                                break;
                        }
                        result.interval = step;
                        result.intervalOffset = offset;
                        result.min = result.sequence[0];
                        result.max = result.sequence[result.sequence.length - 1];
                        return result;
                    };
                    NumericSequence.prototype.trimMinMax = function (min, max) {
                        var minMargin = (min - this.min) / this.interval;
                        var maxMargin = (this.max - max) / this.interval;
                        var marginPrecision = 0.001;
                        if (!this.canExtendMin || (minMargin > this.maxAllowedMargin && minMargin > marginPrecision)) {
                            this.min = min;
                        }
                        if (!this.canExtendMax || (maxMargin > this.maxAllowedMargin && maxMargin > marginPrecision)) {
                            this.max = max;
                        }
                    };
                    NumericSequence.MIN_COUNT = 1;
                    NumericSequence.MAX_COUNT = 1000;
                    return NumericSequence;
                }());
                type.NumericSequence = NumericSequence;
            })(type = utils.type || (utils.type = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var type;
            (function (type) {
                var PixelConverter;
                (function (PixelConverter) {
                    var PxPtRatio = 4 / 3;
                    var PixelString = "px";
                    /**
                     * Appends 'px' to the end of number value for use as pixel string in styles
                     */
                    function toString(px) {
                        return px + PixelString;
                    }
                    PixelConverter.toString = toString;
                    /**
                     * Converts point value (pt) to pixels
                     * Returns a string for font-size property
                     * e.g. fromPoint(8) => '24px'
                     */
                    function fromPoint(pt) {
                        return toString(fromPointToPixel(pt));
                    }
                    PixelConverter.fromPoint = fromPoint;
                    /**
                     * Converts point value (pt) to pixels
                     * Returns a number for font-size property
                     * e.g. fromPoint(8) => 24px
                     */
                    function fromPointToPixel(pt) {
                        return (PxPtRatio * pt);
                    }
                    PixelConverter.fromPointToPixel = fromPointToPixel;
                    /**
                     * Converts pixel value (px) to pt
                     * e.g. toPoint(24) => 8
                     */
                    function toPoint(px) {
                        return px / PxPtRatio;
                    }
                    PixelConverter.toPoint = toPoint;
                })(PixelConverter = type.PixelConverter || (type.PixelConverter = {}));
            })(type = utils.type || (utils.type = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var type;
            (function (type) {
                // NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
                var RegExpExtensions;
                (function (RegExpExtensions) {
                    /**
                     * Runs exec on regex starting from 0 index
                     * This is the expected behavior but RegExp actually remember
                     * the last index they stopped at (found match at) and will
                     * return unexpected results when run in sequence.
                     * @param regex - regular expression object
                     * @param value - string to search wiht regex
                     * @param start - index within value to start regex
                     */
                    function run(regex, value, start) {
                        regex.lastIndex = start || 0;
                        return regex.exec(value);
                    }
                    RegExpExtensions.run = run;
                })(RegExpExtensions = type.RegExpExtensions || (type.RegExpExtensions = {}));
            })(type = utils.type || (utils.type = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var type;
            (function (type) {
                /**
                 * Extensions to String class.
                 */
                var StringExtensions;
                (function (StringExtensions) {
                    /**
                     * Checks if a string ends with a sub-string.
                     */
                    function endsWith(str, suffix) {
                        return str.indexOf(suffix, str.length - suffix.length) !== -1;
                    }
                    StringExtensions.endsWith = endsWith;
                })(StringExtensions = type.StringExtensions || (type.StringExtensions = {}));
            })(type = utils.type || (utils.type = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var type;
            (function (type) {
                // NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
                var LogicExtensions;
                (function (LogicExtensions) {
                    function XOR(a, b) {
                        return (a || b) && !(a && b);
                    }
                    LogicExtensions.XOR = XOR;
                })(LogicExtensions = type.LogicExtensions || (type.LogicExtensions = {}));
            })(type = utils.type || (utils.type = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var type;
            (function (type) {
                // NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
                var JsonComparer;
                (function (JsonComparer) {
                    /**
                     * Performs JSON-style comparison of two objects.
                     */
                    function equals(x, y) {
                        if (x === y)
                            return true;
                        return JSON.stringify(x) === JSON.stringify(y);
                    }
                    JsonComparer.equals = equals;
                })(JsonComparer = type.JsonComparer || (type.JsonComparer = {}));
            })(type = utils.type || (utils.type = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var type;
            (function (type) {
                // NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.
                /**
                 * Values are in terms of 'pt'
                 * Convert to pixels using PixelConverter.fromPoint
                 */
                var TextSizeDefaults;
                (function (TextSizeDefaults) {
                    /**
                     * Stored in terms of 'pt'
                     * Convert to pixels using PixelConverter.fromPoint
                     */
                    TextSizeDefaults.TextSizeMin = 8;
                    /**
                     * Stored in terms of 'pt'
                     * Convert to pixels using PixelConverter.fromPoint
                     */
                    TextSizeDefaults.TextSizeMax = 40;
                    var TextSizeRange = TextSizeDefaults.TextSizeMax - TextSizeDefaults.TextSizeMin;
                    /**
                     * Returns the percentage of this value relative to the TextSizeMax
                     * @param textSize - should be given in terms of 'pt'
                     */
                    function getScale(textSize) {
                        return (textSize - TextSizeDefaults.TextSizeMin) / TextSizeRange;
                    }
                    TextSizeDefaults.getScale = getScale;
                })(TextSizeDefaults = type.TextSizeDefaults || (type.TextSizeDefaults = {}));
            })(type = utils.type || (utils.type = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var type;
            (function (type_1) {
                // powerbi.extensibility.utils.type
                var EnumExtensions = powerbi.extensibility.utils.type.EnumExtensions;
                /** Describes a data value type, including a primitive type and extended type if any (derived from data category). */
                var ValueType = (function () {
                    /** Do not call the ValueType constructor directly. Use the ValueType.fromXXX methods. */
                    function ValueType(type, category, enumType, variantTypes) {
                        this.underlyingType = type;
                        this.category = category;
                        if (EnumExtensions.hasFlag(type, ExtendedType.Temporal)) {
                            this.temporalType = new TemporalType(type);
                        }
                        if (EnumExtensions.hasFlag(type, ExtendedType.Geography)) {
                            this.geographyType = new GeographyType(type);
                        }
                        if (EnumExtensions.hasFlag(type, ExtendedType.Miscellaneous)) {
                            this.miscType = new MiscellaneousType(type);
                        }
                        if (EnumExtensions.hasFlag(type, ExtendedType.Formatting)) {
                            this.formattingType = new FormattingType(type);
                        }
                        if (EnumExtensions.hasFlag(type, ExtendedType.Enumeration)) {
                            this.enumType = enumType;
                        }
                        if (EnumExtensions.hasFlag(type, ExtendedType.Scripting)) {
                            this.scriptingType = new ScriptType(type);
                        }
                        if (EnumExtensions.hasFlag(type, ExtendedType.Variant)) {
                            this.variationTypes = variantTypes;
                        }
                    }
                    /** Creates or retrieves a ValueType object based on the specified ValueTypeDescriptor. */
                    ValueType.fromDescriptor = function (descriptor) {
                        descriptor = descriptor || {};
                        // Simplified primitive types
                        if (descriptor.text)
                            return ValueType.fromExtendedType(ExtendedType.Text);
                        if (descriptor.integer)
                            return ValueType.fromExtendedType(ExtendedType.Integer);
                        if (descriptor.numeric)
                            return ValueType.fromExtendedType(ExtendedType.Double);
                        if (descriptor.bool)
                            return ValueType.fromExtendedType(ExtendedType.Boolean);
                        if (descriptor.dateTime)
                            return ValueType.fromExtendedType(ExtendedType.DateTime);
                        if (descriptor.duration)
                            return ValueType.fromExtendedType(ExtendedType.Duration);
                        if (descriptor.binary)
                            return ValueType.fromExtendedType(ExtendedType.Binary);
                        if (descriptor.none)
                            return ValueType.fromExtendedType(ExtendedType.None);
                        // Extended types
                        if (descriptor.scripting) {
                            if (descriptor.scripting.source)
                                return ValueType.fromExtendedType(ExtendedType.ScriptSource);
                        }
                        if (descriptor.enumeration)
                            return ValueType.fromEnum(descriptor.enumeration);
                        if (descriptor.temporal) {
                            if (descriptor.temporal.year)
                                return ValueType.fromExtendedType(ExtendedType.Years_Integer);
                            if (descriptor.temporal.quarter)
                                return ValueType.fromExtendedType(ExtendedType.Quarters_Integer);
                            if (descriptor.temporal.month)
                                return ValueType.fromExtendedType(ExtendedType.Months_Integer);
                            if (descriptor.temporal.day)
                                return ValueType.fromExtendedType(ExtendedType.DayOfMonth_Integer);
                            if (descriptor.temporal.paddedDateTableDate)
                                return ValueType.fromExtendedType(ExtendedType.PaddedDateTableDates);
                        }
                        if (descriptor.geography) {
                            if (descriptor.geography.address)
                                return ValueType.fromExtendedType(ExtendedType.Address);
                            if (descriptor.geography.city)
                                return ValueType.fromExtendedType(ExtendedType.City);
                            if (descriptor.geography.continent)
                                return ValueType.fromExtendedType(ExtendedType.Continent);
                            if (descriptor.geography.country)
                                return ValueType.fromExtendedType(ExtendedType.Country);
                            if (descriptor.geography.county)
                                return ValueType.fromExtendedType(ExtendedType.County);
                            if (descriptor.geography.region)
                                return ValueType.fromExtendedType(ExtendedType.Region);
                            if (descriptor.geography.postalCode)
                                return ValueType.fromExtendedType(ExtendedType.PostalCode_Text);
                            if (descriptor.geography.stateOrProvince)
                                return ValueType.fromExtendedType(ExtendedType.StateOrProvince);
                            if (descriptor.geography.place)
                                return ValueType.fromExtendedType(ExtendedType.Place);
                            if (descriptor.geography.latitude)
                                return ValueType.fromExtendedType(ExtendedType.Latitude_Double);
                            if (descriptor.geography.longitude)
                                return ValueType.fromExtendedType(ExtendedType.Longitude_Double);
                        }
                        if (descriptor.misc) {
                            if (descriptor.misc.image)
                                return ValueType.fromExtendedType(ExtendedType.Image);
                            if (descriptor.misc.imageUrl)
                                return ValueType.fromExtendedType(ExtendedType.ImageUrl);
                            if (descriptor.misc.webUrl)
                                return ValueType.fromExtendedType(ExtendedType.WebUrl);
                            if (descriptor.misc.barcode)
                                return ValueType.fromExtendedType(ExtendedType.Barcode_Text);
                        }
                        if (descriptor.formatting) {
                            if (descriptor.formatting.color)
                                return ValueType.fromExtendedType(ExtendedType.Color);
                            if (descriptor.formatting.formatString)
                                return ValueType.fromExtendedType(ExtendedType.FormatString);
                            if (descriptor.formatting.alignment)
                                return ValueType.fromExtendedType(ExtendedType.Alignment);
                            if (descriptor.formatting.labelDisplayUnits)
                                return ValueType.fromExtendedType(ExtendedType.LabelDisplayUnits);
                            if (descriptor.formatting.fontSize)
                                return ValueType.fromExtendedType(ExtendedType.FontSize);
                            if (descriptor.formatting.labelDensity)
                                return ValueType.fromExtendedType(ExtendedType.LabelDensity);
                        }
                        if (descriptor.extendedType) {
                            return ValueType.fromExtendedType(descriptor.extendedType);
                        }
                        if (descriptor.operations) {
                            if (descriptor.operations.searchEnabled)
                                return ValueType.fromExtendedType(ExtendedType.SearchEnabled);
                        }
                        if (descriptor.variant) {
                            var variantTypes = _.map(descriptor.variant, function (variantType) { return ValueType.fromDescriptor(variantType); });
                            return ValueType.fromVariant(variantTypes);
                        }
                        return ValueType.fromExtendedType(ExtendedType.Null);
                    };
                    /** Advanced: Generally use fromDescriptor instead. Creates or retrieves a ValueType object for the specified ExtendedType. */
                    ValueType.fromExtendedType = function (extendedType) {
                        extendedType = extendedType || ExtendedType.Null;
                        var primitiveType = getPrimitiveType(extendedType), category = getCategoryFromExtendedType(extendedType);
                        return ValueType.fromPrimitiveTypeAndCategory(primitiveType, category);
                    };
                    /** Creates or retrieves a ValueType object for the specified PrimitiveType and data category. */
                    ValueType.fromPrimitiveTypeAndCategory = function (primitiveType, category) {
                        primitiveType = primitiveType || PrimitiveType.Null;
                        category = category || null;
                        var id = primitiveType.toString();
                        if (category)
                            id += "|" + category;
                        return ValueType.typeCache[id] || (ValueType.typeCache[id] = new ValueType(toExtendedType(primitiveType, category), category));
                    };
                    /** Creates a ValueType to describe the given IEnumType. */
                    ValueType.fromEnum = function (enumType) {
                        return new ValueType(ExtendedType.Enumeration, null, enumType);
                    };
                    /** Creates a ValueType to describe the given Variant type. */
                    ValueType.fromVariant = function (variantTypes) {
                        return new ValueType(ExtendedType.Variant, /* category */ null, /* enumType */ null, variantTypes);
                    };
                    /** Determines if the specified type is compatible from at least one of the otherTypes. */
                    ValueType.isCompatibleTo = function (type, otherTypes) {
                        var valueType = ValueType.fromDescriptor(type);
                        for (var _i = 0, otherTypes_1 = otherTypes; _i < otherTypes_1.length; _i++) {
                            var otherType = otherTypes_1[_i];
                            var otherValueType = ValueType.fromDescriptor(otherType);
                            if (otherValueType.isCompatibleFrom(valueType))
                                return true;
                        }
                        return false;
                    };
                    /** Determines if the instance ValueType is convertable from the 'other' ValueType. */
                    ValueType.prototype.isCompatibleFrom = function (other) {
                        var otherPrimitiveType = other.primitiveType;
                        if (this === other ||
                            this.primitiveType === otherPrimitiveType ||
                            otherPrimitiveType === PrimitiveType.Null ||
                            // Return true if both types are numbers
                            (this.numeric && other.numeric))
                            return true;
                        return false;
                    };
                    /**
                     * Determines if the instance ValueType is equal to the 'other' ValueType
                     * @param {ValueType} other the other ValueType to check equality against
                     * @returns True if the instance ValueType is equal to the 'other' ValueType
                     */
                    ValueType.prototype.equals = function (other) {
                        return _.isEqual(this, other);
                    };
                    Object.defineProperty(ValueType.prototype, "primitiveType", {
                        /** Gets the exact primitive type of this ValueType. */
                        get: function () {
                            return getPrimitiveType(this.underlyingType);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "extendedType", {
                        /** Gets the exact extended type of this ValueType. */
                        get: function () {
                            return this.underlyingType;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "categoryString", {
                        /** Gets the data category string (if any) for this ValueType. */
                        get: function () {
                            return this.category;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "text", {
                        // Simplified primitive types
                        /** Indicates whether the type represents text values. */
                        get: function () {
                            return this.primitiveType === PrimitiveType.Text;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "numeric", {
                        /** Indicates whether the type represents any numeric value. */
                        get: function () {
                            return EnumExtensions.hasFlag(this.underlyingType, ExtendedType.Numeric);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "integer", {
                        /** Indicates whether the type represents integer numeric values. */
                        get: function () {
                            return this.primitiveType === PrimitiveType.Integer;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "bool", {
                        /** Indicates whether the type represents Boolean values. */
                        get: function () {
                            return this.primitiveType === PrimitiveType.Boolean;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "dateTime", {
                        /** Indicates whether the type represents any date/time values. */
                        get: function () {
                            return this.primitiveType === PrimitiveType.DateTime ||
                                this.primitiveType === PrimitiveType.Date ||
                                this.primitiveType === PrimitiveType.Time;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "duration", {
                        /** Indicates whether the type represents duration values. */
                        get: function () {
                            return this.primitiveType === PrimitiveType.Duration;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "binary", {
                        /** Indicates whether the type represents binary values. */
                        get: function () {
                            return this.primitiveType === PrimitiveType.Binary;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "none", {
                        /** Indicates whether the type represents none values. */
                        get: function () {
                            return this.primitiveType === PrimitiveType.None;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "temporal", {
                        // Extended types
                        /** Returns an object describing temporal values represented by the type, if it represents a temporal type. */
                        get: function () {
                            return this.temporalType;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "geography", {
                        /** Returns an object describing geographic values represented by the type, if it represents a geographic type. */
                        get: function () {
                            return this.geographyType;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "misc", {
                        /** Returns an object describing the specific values represented by the type, if it represents a miscellaneous extended type. */
                        get: function () {
                            return this.miscType;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "formatting", {
                        /** Returns an object describing the formatting values represented by the type, if it represents a formatting type. */
                        get: function () {
                            return this.formattingType;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "enum", {
                        /** Returns an object describing the enum values represented by the type, if it represents an enumeration type. */
                        get: function () {
                            return this.enumType;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "scripting", {
                        get: function () {
                            return this.scriptingType;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(ValueType.prototype, "variant", {
                        /** Returns an array describing the variant values represented by the type, if it represents an Variant type. */
                        get: function () {
                            return this.variationTypes;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    ValueType.typeCache = {};
                    return ValueType;
                }());
                type_1.ValueType = ValueType;
                var ScriptType = (function () {
                    function ScriptType(type) {
                        this.underlyingType = type;
                    }
                    Object.defineProperty(ScriptType.prototype, "source", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ScriptSource);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return ScriptType;
                }());
                type_1.ScriptType = ScriptType;
                var TemporalType = (function () {
                    function TemporalType(type) {
                        this.underlyingType = type;
                    }
                    Object.defineProperty(TemporalType.prototype, "year", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Years);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(TemporalType.prototype, "quarter", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Quarters);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(TemporalType.prototype, "month", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Months);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(TemporalType.prototype, "day", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.DayOfMonth);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(TemporalType.prototype, "paddedDateTableDate", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PaddedDateTableDates);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return TemporalType;
                }());
                type_1.TemporalType = TemporalType;
                var GeographyType = (function () {
                    function GeographyType(type) {
                        this.underlyingType = type;
                    }
                    Object.defineProperty(GeographyType.prototype, "address", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Address);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(GeographyType.prototype, "city", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.City);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(GeographyType.prototype, "continent", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Continent);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(GeographyType.prototype, "country", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Country);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(GeographyType.prototype, "county", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.County);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(GeographyType.prototype, "region", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Region);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(GeographyType.prototype, "postalCode", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PostalCode);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(GeographyType.prototype, "stateOrProvince", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.StateOrProvince);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(GeographyType.prototype, "place", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Place);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(GeographyType.prototype, "latitude", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Latitude);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(GeographyType.prototype, "longitude", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Longitude);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return GeographyType;
                }());
                type_1.GeographyType = GeographyType;
                var MiscellaneousType = (function () {
                    function MiscellaneousType(type) {
                        this.underlyingType = type;
                    }
                    Object.defineProperty(MiscellaneousType.prototype, "image", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Image);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(MiscellaneousType.prototype, "imageUrl", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ImageUrl);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(MiscellaneousType.prototype, "webUrl", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.WebUrl);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(MiscellaneousType.prototype, "barcode", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Barcode);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return MiscellaneousType;
                }());
                type_1.MiscellaneousType = MiscellaneousType;
                var FormattingType = (function () {
                    function FormattingType(type) {
                        this.underlyingType = type;
                    }
                    Object.defineProperty(FormattingType.prototype, "color", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Color);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(FormattingType.prototype, "formatString", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FormatString);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(FormattingType.prototype, "alignment", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Alignment);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(FormattingType.prototype, "labelDisplayUnits", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDisplayUnits);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(FormattingType.prototype, "fontSize", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FontSize);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    Object.defineProperty(FormattingType.prototype, "labelDensity", {
                        get: function () {
                            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDensity);
                        },
                        enumerable: true,
                        configurable: true
                    });
                    return FormattingType;
                }());
                type_1.FormattingType = FormattingType;
                /** Defines primitive value types. Must be consistent with types defined by server conceptual schema. */
                (function (PrimitiveType) {
                    PrimitiveType[PrimitiveType["Null"] = 0] = "Null";
                    PrimitiveType[PrimitiveType["Text"] = 1] = "Text";
                    PrimitiveType[PrimitiveType["Decimal"] = 2] = "Decimal";
                    PrimitiveType[PrimitiveType["Double"] = 3] = "Double";
                    PrimitiveType[PrimitiveType["Integer"] = 4] = "Integer";
                    PrimitiveType[PrimitiveType["Boolean"] = 5] = "Boolean";
                    PrimitiveType[PrimitiveType["Date"] = 6] = "Date";
                    PrimitiveType[PrimitiveType["DateTime"] = 7] = "DateTime";
                    PrimitiveType[PrimitiveType["DateTimeZone"] = 8] = "DateTimeZone";
                    PrimitiveType[PrimitiveType["Time"] = 9] = "Time";
                    PrimitiveType[PrimitiveType["Duration"] = 10] = "Duration";
                    PrimitiveType[PrimitiveType["Binary"] = 11] = "Binary";
                    PrimitiveType[PrimitiveType["None"] = 12] = "None";
                    PrimitiveType[PrimitiveType["Variant"] = 13] = "Variant";
                })(type_1.PrimitiveType || (type_1.PrimitiveType = {}));
                var PrimitiveType = type_1.PrimitiveType;
                var PrimitiveTypeStrings;
                (function (PrimitiveTypeStrings) {
                    PrimitiveTypeStrings[PrimitiveTypeStrings["Null"] = 0] = "Null";
                    PrimitiveTypeStrings[PrimitiveTypeStrings["Text"] = 1] = "Text";
                    PrimitiveTypeStrings[PrimitiveTypeStrings["Decimal"] = 2] = "Decimal";
                    PrimitiveTypeStrings[PrimitiveTypeStrings["Double"] = 3] = "Double";
                    PrimitiveTypeStrings[PrimitiveTypeStrings["Integer"] = 4] = "Integer";
                    PrimitiveTypeStrings[PrimitiveTypeStrings["Boolean"] = 5] = "Boolean";
                    PrimitiveTypeStrings[PrimitiveTypeStrings["Date"] = 6] = "Date";
                    PrimitiveTypeStrings[PrimitiveTypeStrings["DateTime"] = 7] = "DateTime";
                    PrimitiveTypeStrings[PrimitiveTypeStrings["DateTimeZone"] = 8] = "DateTimeZone";
                    PrimitiveTypeStrings[PrimitiveTypeStrings["Time"] = 9] = "Time";
                    PrimitiveTypeStrings[PrimitiveTypeStrings["Duration"] = 10] = "Duration";
                    PrimitiveTypeStrings[PrimitiveTypeStrings["Binary"] = 11] = "Binary";
                    PrimitiveTypeStrings[PrimitiveTypeStrings["None"] = 12] = "None";
                    PrimitiveTypeStrings[PrimitiveTypeStrings["Variant"] = 13] = "Variant";
                })(PrimitiveTypeStrings || (PrimitiveTypeStrings = {}));
                /** Defines extended value types, which include primitive types and known data categories constrained to expected primitive types. */
                (function (ExtendedType) {
                    // Flags (1 << 8-15 range [0xFF00])
                    // Important: Enum members must be declared before they are used in TypeScript.
                    ExtendedType[ExtendedType["Numeric"] = 256] = "Numeric";
                    ExtendedType[ExtendedType["Temporal"] = 512] = "Temporal";
                    ExtendedType[ExtendedType["Geography"] = 1024] = "Geography";
                    ExtendedType[ExtendedType["Miscellaneous"] = 2048] = "Miscellaneous";
                    ExtendedType[ExtendedType["Formatting"] = 4096] = "Formatting";
                    ExtendedType[ExtendedType["Scripting"] = 8192] = "Scripting";
                    // Primitive types (0-255 range [0xFF] | flags)
                    // The member names and base values must match those in PrimitiveType.
                    ExtendedType[ExtendedType["Null"] = 0] = "Null";
                    ExtendedType[ExtendedType["Text"] = 1] = "Text";
                    ExtendedType[ExtendedType["Decimal"] = 258] = "Decimal";
                    ExtendedType[ExtendedType["Double"] = 259] = "Double";
                    ExtendedType[ExtendedType["Integer"] = 260] = "Integer";
                    ExtendedType[ExtendedType["Boolean"] = 5] = "Boolean";
                    ExtendedType[ExtendedType["Date"] = 518] = "Date";
                    ExtendedType[ExtendedType["DateTime"] = 519] = "DateTime";
                    ExtendedType[ExtendedType["DateTimeZone"] = 520] = "DateTimeZone";
                    ExtendedType[ExtendedType["Time"] = 521] = "Time";
                    ExtendedType[ExtendedType["Duration"] = 10] = "Duration";
                    ExtendedType[ExtendedType["Binary"] = 11] = "Binary";
                    ExtendedType[ExtendedType["None"] = 12] = "None";
                    ExtendedType[ExtendedType["Variant"] = 13] = "Variant";
                    // Extended types (0-32767 << 16 range [0xFFFF0000] | corresponding primitive type | flags)
                    // Temporal
                    ExtendedType[ExtendedType["Years"] = 66048] = "Years";
                    ExtendedType[ExtendedType["Years_Text"] = 66049] = "Years_Text";
                    ExtendedType[ExtendedType["Years_Integer"] = 66308] = "Years_Integer";
                    ExtendedType[ExtendedType["Years_Date"] = 66054] = "Years_Date";
                    ExtendedType[ExtendedType["Years_DateTime"] = 66055] = "Years_DateTime";
                    ExtendedType[ExtendedType["Months"] = 131584] = "Months";
                    ExtendedType[ExtendedType["Months_Text"] = 131585] = "Months_Text";
                    ExtendedType[ExtendedType["Months_Integer"] = 131844] = "Months_Integer";
                    ExtendedType[ExtendedType["Months_Date"] = 131590] = "Months_Date";
                    ExtendedType[ExtendedType["Months_DateTime"] = 131591] = "Months_DateTime";
                    ExtendedType[ExtendedType["PaddedDateTableDates"] = 197127] = "PaddedDateTableDates";
                    ExtendedType[ExtendedType["Quarters"] = 262656] = "Quarters";
                    ExtendedType[ExtendedType["Quarters_Text"] = 262657] = "Quarters_Text";
                    ExtendedType[ExtendedType["Quarters_Integer"] = 262916] = "Quarters_Integer";
                    ExtendedType[ExtendedType["Quarters_Date"] = 262662] = "Quarters_Date";
                    ExtendedType[ExtendedType["Quarters_DateTime"] = 262663] = "Quarters_DateTime";
                    ExtendedType[ExtendedType["DayOfMonth"] = 328192] = "DayOfMonth";
                    ExtendedType[ExtendedType["DayOfMonth_Text"] = 328193] = "DayOfMonth_Text";
                    ExtendedType[ExtendedType["DayOfMonth_Integer"] = 328452] = "DayOfMonth_Integer";
                    ExtendedType[ExtendedType["DayOfMonth_Date"] = 328198] = "DayOfMonth_Date";
                    ExtendedType[ExtendedType["DayOfMonth_DateTime"] = 328199] = "DayOfMonth_DateTime";
                    // Geography
                    ExtendedType[ExtendedType["Address"] = 6554625] = "Address";
                    ExtendedType[ExtendedType["City"] = 6620161] = "City";
                    ExtendedType[ExtendedType["Continent"] = 6685697] = "Continent";
                    ExtendedType[ExtendedType["Country"] = 6751233] = "Country";
                    ExtendedType[ExtendedType["County"] = 6816769] = "County";
                    ExtendedType[ExtendedType["Region"] = 6882305] = "Region";
                    ExtendedType[ExtendedType["PostalCode"] = 6947840] = "PostalCode";
                    ExtendedType[ExtendedType["PostalCode_Text"] = 6947841] = "PostalCode_Text";
                    ExtendedType[ExtendedType["PostalCode_Integer"] = 6948100] = "PostalCode_Integer";
                    ExtendedType[ExtendedType["StateOrProvince"] = 7013377] = "StateOrProvince";
                    ExtendedType[ExtendedType["Place"] = 7078913] = "Place";
                    ExtendedType[ExtendedType["Latitude"] = 7144448] = "Latitude";
                    ExtendedType[ExtendedType["Latitude_Decimal"] = 7144706] = "Latitude_Decimal";
                    ExtendedType[ExtendedType["Latitude_Double"] = 7144707] = "Latitude_Double";
                    ExtendedType[ExtendedType["Longitude"] = 7209984] = "Longitude";
                    ExtendedType[ExtendedType["Longitude_Decimal"] = 7210242] = "Longitude_Decimal";
                    ExtendedType[ExtendedType["Longitude_Double"] = 7210243] = "Longitude_Double";
                    // Miscellaneous
                    ExtendedType[ExtendedType["Image"] = 13109259] = "Image";
                    ExtendedType[ExtendedType["ImageUrl"] = 13174785] = "ImageUrl";
                    ExtendedType[ExtendedType["WebUrl"] = 13240321] = "WebUrl";
                    ExtendedType[ExtendedType["Barcode"] = 13305856] = "Barcode";
                    ExtendedType[ExtendedType["Barcode_Text"] = 13305857] = "Barcode_Text";
                    ExtendedType[ExtendedType["Barcode_Integer"] = 13306116] = "Barcode_Integer";
                    // Formatting
                    ExtendedType[ExtendedType["Color"] = 19664897] = "Color";
                    ExtendedType[ExtendedType["FormatString"] = 19730433] = "FormatString";
                    ExtendedType[ExtendedType["Alignment"] = 20058113] = "Alignment";
                    ExtendedType[ExtendedType["LabelDisplayUnits"] = 20123649] = "LabelDisplayUnits";
                    ExtendedType[ExtendedType["FontSize"] = 20189443] = "FontSize";
                    ExtendedType[ExtendedType["LabelDensity"] = 20254979] = "LabelDensity";
                    // Enumeration
                    ExtendedType[ExtendedType["Enumeration"] = 26214401] = "Enumeration";
                    // Scripting
                    ExtendedType[ExtendedType["ScriptSource"] = 32776193] = "ScriptSource";
                    // NOTE: To avoid confusion, underscores should be used only to delimit primitive type variants of an extended type
                    // (e.g. Year_Integer or Latitude_Double above)
                    // Operations
                    ExtendedType[ExtendedType["SearchEnabled"] = 65541] = "SearchEnabled";
                })(type_1.ExtendedType || (type_1.ExtendedType = {}));
                var ExtendedType = type_1.ExtendedType;
                var ExtendedTypeStrings;
                (function (ExtendedTypeStrings) {
                    ExtendedTypeStrings[ExtendedTypeStrings["Numeric"] = 256] = "Numeric";
                    ExtendedTypeStrings[ExtendedTypeStrings["Temporal"] = 512] = "Temporal";
                    ExtendedTypeStrings[ExtendedTypeStrings["Geography"] = 1024] = "Geography";
                    ExtendedTypeStrings[ExtendedTypeStrings["Miscellaneous"] = 2048] = "Miscellaneous";
                    ExtendedTypeStrings[ExtendedTypeStrings["Formatting"] = 4096] = "Formatting";
                    ExtendedTypeStrings[ExtendedTypeStrings["Scripting"] = 8192] = "Scripting";
                    ExtendedTypeStrings[ExtendedTypeStrings["Null"] = 0] = "Null";
                    ExtendedTypeStrings[ExtendedTypeStrings["Text"] = 1] = "Text";
                    ExtendedTypeStrings[ExtendedTypeStrings["Decimal"] = 258] = "Decimal";
                    ExtendedTypeStrings[ExtendedTypeStrings["Double"] = 259] = "Double";
                    ExtendedTypeStrings[ExtendedTypeStrings["Integer"] = 260] = "Integer";
                    ExtendedTypeStrings[ExtendedTypeStrings["Boolean"] = 5] = "Boolean";
                    ExtendedTypeStrings[ExtendedTypeStrings["Date"] = 518] = "Date";
                    ExtendedTypeStrings[ExtendedTypeStrings["DateTime"] = 519] = "DateTime";
                    ExtendedTypeStrings[ExtendedTypeStrings["DateTimeZone"] = 520] = "DateTimeZone";
                    ExtendedTypeStrings[ExtendedTypeStrings["Time"] = 521] = "Time";
                    ExtendedTypeStrings[ExtendedTypeStrings["Duration"] = 10] = "Duration";
                    ExtendedTypeStrings[ExtendedTypeStrings["Binary"] = 11] = "Binary";
                    ExtendedTypeStrings[ExtendedTypeStrings["None"] = 12] = "None";
                    ExtendedTypeStrings[ExtendedTypeStrings["Variant"] = 13] = "Variant";
                    ExtendedTypeStrings[ExtendedTypeStrings["Years"] = 66048] = "Years";
                    ExtendedTypeStrings[ExtendedTypeStrings["Years_Text"] = 66049] = "Years_Text";
                    ExtendedTypeStrings[ExtendedTypeStrings["Years_Integer"] = 66308] = "Years_Integer";
                    ExtendedTypeStrings[ExtendedTypeStrings["Years_Date"] = 66054] = "Years_Date";
                    ExtendedTypeStrings[ExtendedTypeStrings["Years_DateTime"] = 66055] = "Years_DateTime";
                    ExtendedTypeStrings[ExtendedTypeStrings["Months"] = 131584] = "Months";
                    ExtendedTypeStrings[ExtendedTypeStrings["Months_Text"] = 131585] = "Months_Text";
                    ExtendedTypeStrings[ExtendedTypeStrings["Months_Integer"] = 131844] = "Months_Integer";
                    ExtendedTypeStrings[ExtendedTypeStrings["Months_Date"] = 131590] = "Months_Date";
                    ExtendedTypeStrings[ExtendedTypeStrings["Months_DateTime"] = 131591] = "Months_DateTime";
                    ExtendedTypeStrings[ExtendedTypeStrings["PaddedDateTableDates"] = 197127] = "PaddedDateTableDates";
                    ExtendedTypeStrings[ExtendedTypeStrings["Quarters"] = 262656] = "Quarters";
                    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_Text"] = 262657] = "Quarters_Text";
                    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_Integer"] = 262916] = "Quarters_Integer";
                    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_Date"] = 262662] = "Quarters_Date";
                    ExtendedTypeStrings[ExtendedTypeStrings["Quarters_DateTime"] = 262663] = "Quarters_DateTime";
                    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth"] = 328192] = "DayOfMonth";
                    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_Text"] = 328193] = "DayOfMonth_Text";
                    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_Integer"] = 328452] = "DayOfMonth_Integer";
                    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_Date"] = 328198] = "DayOfMonth_Date";
                    ExtendedTypeStrings[ExtendedTypeStrings["DayOfMonth_DateTime"] = 328199] = "DayOfMonth_DateTime";
                    ExtendedTypeStrings[ExtendedTypeStrings["Address"] = 6554625] = "Address";
                    ExtendedTypeStrings[ExtendedTypeStrings["City"] = 6620161] = "City";
                    ExtendedTypeStrings[ExtendedTypeStrings["Continent"] = 6685697] = "Continent";
                    ExtendedTypeStrings[ExtendedTypeStrings["Country"] = 6751233] = "Country";
                    ExtendedTypeStrings[ExtendedTypeStrings["County"] = 6816769] = "County";
                    ExtendedTypeStrings[ExtendedTypeStrings["Region"] = 6882305] = "Region";
                    ExtendedTypeStrings[ExtendedTypeStrings["PostalCode"] = 6947840] = "PostalCode";
                    ExtendedTypeStrings[ExtendedTypeStrings["PostalCode_Text"] = 6947841] = "PostalCode_Text";
                    ExtendedTypeStrings[ExtendedTypeStrings["PostalCode_Integer"] = 6948100] = "PostalCode_Integer";
                    ExtendedTypeStrings[ExtendedTypeStrings["StateOrProvince"] = 7013377] = "StateOrProvince";
                    ExtendedTypeStrings[ExtendedTypeStrings["Place"] = 7078913] = "Place";
                    ExtendedTypeStrings[ExtendedTypeStrings["Latitude"] = 7144448] = "Latitude";
                    ExtendedTypeStrings[ExtendedTypeStrings["Latitude_Decimal"] = 7144706] = "Latitude_Decimal";
                    ExtendedTypeStrings[ExtendedTypeStrings["Latitude_Double"] = 7144707] = "Latitude_Double";
                    ExtendedTypeStrings[ExtendedTypeStrings["Longitude"] = 7209984] = "Longitude";
                    ExtendedTypeStrings[ExtendedTypeStrings["Longitude_Decimal"] = 7210242] = "Longitude_Decimal";
                    ExtendedTypeStrings[ExtendedTypeStrings["Longitude_Double"] = 7210243] = "Longitude_Double";
                    ExtendedTypeStrings[ExtendedTypeStrings["Image"] = 13109259] = "Image";
                    ExtendedTypeStrings[ExtendedTypeStrings["ImageUrl"] = 13174785] = "ImageUrl";
                    ExtendedTypeStrings[ExtendedTypeStrings["WebUrl"] = 13240321] = "WebUrl";
                    ExtendedTypeStrings[ExtendedTypeStrings["Barcode"] = 13305856] = "Barcode";
                    ExtendedTypeStrings[ExtendedTypeStrings["Barcode_Text"] = 13305857] = "Barcode_Text";
                    ExtendedTypeStrings[ExtendedTypeStrings["Barcode_Integer"] = 13306116] = "Barcode_Integer";
                    ExtendedTypeStrings[ExtendedTypeStrings["Color"] = 19664897] = "Color";
                    ExtendedTypeStrings[ExtendedTypeStrings["FormatString"] = 19730433] = "FormatString";
                    ExtendedTypeStrings[ExtendedTypeStrings["Alignment"] = 20058113] = "Alignment";
                    ExtendedTypeStrings[ExtendedTypeStrings["LabelDisplayUnits"] = 20123649] = "LabelDisplayUnits";
                    ExtendedTypeStrings[ExtendedTypeStrings["FontSize"] = 20189443] = "FontSize";
                    ExtendedTypeStrings[ExtendedTypeStrings["LabelDensity"] = 20254979] = "LabelDensity";
                    ExtendedTypeStrings[ExtendedTypeStrings["Enumeration"] = 26214401] = "Enumeration";
                    ExtendedTypeStrings[ExtendedTypeStrings["ScriptSource"] = 32776193] = "ScriptSource";
                    ExtendedTypeStrings[ExtendedTypeStrings["SearchEnabled"] = 65541] = "SearchEnabled";
                })(ExtendedTypeStrings || (ExtendedTypeStrings = {}));
                var PrimitiveTypeMask = 0xFF;
                var PrimitiveTypeWithFlagsMask = 0xFFFF;
                var PrimitiveTypeFlagsExcludedMask = 0xFFFF0000;
                function getPrimitiveType(extendedType) {
                    return extendedType & PrimitiveTypeMask;
                }
                function isPrimitiveType(extendedType) {
                    return (extendedType & PrimitiveTypeWithFlagsMask) === extendedType;
                }
                function getCategoryFromExtendedType(extendedType) {
                    if (isPrimitiveType(extendedType))
                        return null;
                    var category = ExtendedTypeStrings[extendedType];
                    if (category) {
                        // Check for ExtendedType declaration without a primitive type.
                        // If exists, use it as category (e.g. Longitude rather than Longitude_Double)
                        // Otherwise use the ExtendedType declaration with a primitive type (e.g. Address)
                        var delimIdx = category.lastIndexOf("_");
                        if (delimIdx > 0) {
                            var baseCategory = category.slice(0, delimIdx);
                            if (ExtendedTypeStrings[baseCategory]) {
                                category = baseCategory;
                            }
                        }
                    }
                    return category || null;
                }
                function toExtendedType(primitiveType, category) {
                    var primitiveString = PrimitiveTypeStrings[primitiveType];
                    var t = ExtendedTypeStrings[primitiveString];
                    if (t == null) {
                        t = ExtendedType.Null;
                    }
                    if (primitiveType && category) {
                        var categoryType = ExtendedTypeStrings[category];
                        if (categoryType) {
                            var categoryPrimitiveType = getPrimitiveType(categoryType);
                            if (categoryPrimitiveType === PrimitiveType.Null) {
                                // Category supports multiple primitive types, check if requested primitive type is supported
                                // (note: important to use t here rather than primitiveType as it may include primitive type flags)
                                categoryType = t | categoryType;
                                if (ExtendedTypeStrings[categoryType]) {
                                    t = categoryType;
                                }
                            }
                            else if (categoryPrimitiveType === primitiveType) {
                                // Primitive type matches the single supported type for the category
                                t = categoryType;
                            }
                        }
                    }
                    return t;
                }
                function matchesExtendedTypeWithAnyPrimitive(a, b) {
                    return (a & PrimitiveTypeFlagsExcludedMask) === (b & PrimitiveTypeFlagsExcludedMask);
                }
            })(type = utils.type || (utils.type = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var svg;
            (function (svg) {
                var Rect = (function () {
                    // Constructor
                    function Rect(left, top, width, height) {
                        this.left = left || 0;
                        this.top = top || 0;
                        this.width = width || 0;
                        this.height = height || 0;
                    }
                    return Rect;
                }());
                svg.Rect = Rect;
            })(svg = utils.svg || (utils.svg = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var svg;
            (function (svg) {
                var Double = powerbi.extensibility.utils.type.Double;
                var shapes;
                (function (shapes) {
                    var Rect;
                    (function (Rect) {
                        function getOffset(rect) {
                            return { x: rect.left, y: rect.top };
                        }
                        Rect.getOffset = getOffset;
                        function getSize(rect) {
                            return { width: rect.width, height: rect.height };
                        }
                        Rect.getSize = getSize;
                        function setSize(rect, value) {
                            rect.width = value.width;
                            rect.height = value.height;
                        }
                        Rect.setSize = setSize;
                        function right(rect) {
                            return rect.left + rect.width;
                        }
                        Rect.right = right;
                        function bottom(rect) {
                            return rect.top + rect.height;
                        }
                        Rect.bottom = bottom;
                        function topLeft(rect) {
                            return { x: rect.left, y: rect.top };
                        }
                        Rect.topLeft = topLeft;
                        function topRight(rect) {
                            return { x: rect.left + rect.width, y: rect.top };
                        }
                        Rect.topRight = topRight;
                        function bottomLeft(rect) {
                            return { x: rect.left, y: rect.top + rect.height };
                        }
                        Rect.bottomLeft = bottomLeft;
                        function bottomRight(rect) {
                            return { x: rect.left + rect.width, y: rect.top + rect.height };
                        }
                        Rect.bottomRight = bottomRight;
                        function equals(rect, other) {
                            return other !== undefined && other !== null &&
                                rect.left === other.left && rect.top === other.top && rect.width === other.width && rect.height === other.height;
                        }
                        Rect.equals = equals;
                        function clone(rect) {
                            return (rect !== null) ? { left: rect.left, top: rect.top, width: rect.width, height: rect.height } : null;
                        }
                        Rect.clone = clone;
                        function toString(rect) {
                            return "{left:" + rect.left + ", top:" + rect.top + ", width:" + rect.width + ", height:" + rect.height + "}";
                        }
                        Rect.toString = toString;
                        function offset(rect, offsetX, offsetY) {
                            var newLeft = ((rect.left + offsetX) >= 0) ? rect.left + offsetX : 0;
                            var newTop = ((rect.top + offsetY) >= 0) ? rect.top + offsetY : 0;
                            return { left: newLeft, top: newTop, width: rect.width, height: rect.height };
                        }
                        Rect.offset = offset;
                        function add(rect, rect2) {
                            return {
                                left: rect.left + rect2.left,
                                top: rect.top + rect2.top,
                                height: rect.height + rect2.height,
                                width: rect.width + rect2.width
                            };
                        }
                        Rect.add = add;
                        function subtract(rect, rect2) {
                            return {
                                left: rect.left - rect2.left,
                                top: rect.top - rect2.top,
                                height: rect.height - rect2.height,
                                width: rect.width - rect2.width
                            };
                        }
                        Rect.subtract = subtract;
                        function inflate(rect, padding) {
                            var result = clone(rect);
                            if (padding) {
                                result.left -= padding.left;
                                result.top -= padding.top;
                                result.width += padding.left + padding.right;
                                result.height += padding.top + padding.bottom;
                            }
                            return result;
                        }
                        Rect.inflate = inflate;
                        function deflate(rect, padding) {
                            var result = clone(rect);
                            if (padding) {
                                result.left += padding.left;
                                result.top += padding.top;
                                result.width -= padding.left + padding.right;
                                result.height -= padding.top + padding.bottom;
                            }
                            return result;
                        }
                        Rect.deflate = deflate;
                        function inflateBy(rect, padding) {
                            return { left: rect.left - padding, top: rect.top - padding, width: rect.width + padding + padding, height: rect.height + padding + padding };
                        }
                        Rect.inflateBy = inflateBy;
                        function deflateBy(rect, padding) {
                            return { left: rect.left + padding, top: rect.top + padding, width: rect.width - padding - padding, height: rect.height - padding - padding };
                        }
                        Rect.deflateBy = deflateBy;
                        /**
                         * Get closest point.
                         *
                         * @return the closest point on the rect to the (x,y) point given.
                         * In case the (x,y) given is inside the rect, (x,y) will be returned.
                         * Otherwise, a point on a border will be returned.
                         */
                        function getClosestPoint(rect, x, y) {
                            return {
                                x: Math.min(Math.max(rect.left, x), rect.left + rect.width),
                                y: Math.min(Math.max(rect.top, y), rect.top + rect.height)
                            };
                        }
                        Rect.getClosestPoint = getClosestPoint;
                        function equal(rect1, rect2) {
                            return rect1 === rect2 ||
                                (rect1 !== undefined && rect2 !== undefined && rect1.left === rect2.left && rect1.top === rect2.top && rect1.width === rect2.width && rect1.height === rect2.height);
                        }
                        Rect.equal = equal;
                        function equalWithPrecision(rect1, rect2) {
                            return rect1 === rect2 ||
                                (rect1 !== undefined && rect2 !== undefined &&
                                    Double.equalWithPrecision(rect1.left, rect2.left) && Double.equalWithPrecision(rect1.top, rect2.top) &&
                                    Double.equalWithPrecision(rect1.width, rect2.width) && Double.equalWithPrecision(rect1.height, rect2.height));
                        }
                        Rect.equalWithPrecision = equalWithPrecision;
                        function isEmpty(rect) {
                            return rect === undefined || rect === null || (rect.width === 0 && rect.height === 0);
                        }
                        Rect.isEmpty = isEmpty;
                        function containsPoint(rect, point) {
                            if ((rect === null) || (point === null)) {
                                return false;
                            }
                            return Double.lessOrEqualWithPrecision(rect.left, point.x) &&
                                Double.lessOrEqualWithPrecision(point.x, rect.left + rect.width) &&
                                Double.lessOrEqualWithPrecision(rect.top, point.y) &&
                                Double.lessOrEqualWithPrecision(point.y, rect.top + rect.height);
                        }
                        Rect.containsPoint = containsPoint;
                        function isIntersecting(rect1, rect2) {
                            if (!rect1 || !rect2) {
                                return false;
                            }
                            var left = Math.max(rect1.left, rect2.left);
                            var right = Math.min(rect1.left + rect1.width, rect2.left + rect2.width);
                            if (left > right) {
                                return false;
                            }
                            var top = Math.max(rect1.top, rect2.top);
                            var bottom = Math.min(rect1.top + rect1.height, rect2.top + rect2.height);
                            return top <= bottom;
                        }
                        Rect.isIntersecting = isIntersecting;
                        function intersect(rect1, rect2) {
                            if (!rect1) {
                                return rect2;
                            }
                            if (!rect2) {
                                return rect1;
                            }
                            var left = Math.max(rect1.left, rect2.left);
                            var top = Math.max(rect1.top, rect2.top);
                            var right = Math.min(rect1.left + rect1.width, rect2.left + rect2.width);
                            var bottom = Math.min(rect1.top + rect1.height, rect2.top + rect2.height);
                            if (left <= right && top <= bottom) {
                                return { left: left, top: top, width: right - left, height: bottom - top };
                            }
                            else {
                                return { left: 0, top: 0, width: 0, height: 0 };
                            }
                        }
                        Rect.intersect = intersect;
                        function combine(rect1, rect2) {
                            if (!rect1) {
                                return rect2;
                            }
                            if (!rect2) {
                                return rect1;
                            }
                            var left = Math.min(rect1.left, rect2.left);
                            var top = Math.min(rect1.top, rect2.top);
                            var right = Math.max(rect1.left + rect1.width, rect2.left + rect2.width);
                            var bottom = Math.max(rect1.top + rect1.height, rect2.top + rect2.height);
                            return { left: left, top: top, width: right - left, height: bottom - top };
                        }
                        Rect.combine = combine;
                        function getCentroid(rect) {
                            return {
                                x: rect.left + (rect.width / 2),
                                y: rect.top + (rect.height / 2)
                            };
                        }
                        Rect.getCentroid = getCentroid;
                    })(Rect = shapes.Rect || (shapes.Rect = {}));
                })(shapes = svg.shapes || (svg.shapes = {}));
            })(svg = utils.svg || (utils.svg = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var svg;
            (function (svg) {
                var Point = (function () {
                    function Point(x, y) {
                        this.x = x || 0;
                        this.y = y || 0;
                    }
                    return Point;
                }());
                svg.Point = Point;
            })(svg = utils.svg || (utils.svg = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var svg;
            (function (svg) {
                /**
                 * CSS constants.
                 */
                var CssConstants;
                (function (CssConstants) {
                    function createClassAndSelector(className) {
                        return {
                            class: className,
                            selector: "." + className,
                        };
                    }
                    CssConstants.createClassAndSelector = createClassAndSelector;
                    CssConstants.styleAttribute = "style";
                    CssConstants.pixelUnits = "px";
                    CssConstants.heightProperty = "height";
                    CssConstants.widthProperty = "width";
                    CssConstants.topProperty = "top";
                    CssConstants.bottomProperty = "bottom";
                    CssConstants.leftProperty = "left";
                    CssConstants.rightProperty = "right";
                    CssConstants.marginTopProperty = "margin-top";
                    CssConstants.marginLeftProperty = "margin-left";
                    CssConstants.displayProperty = "display";
                    CssConstants.backgroundProperty = "background";
                    CssConstants.backgroundColorProperty = "background-color";
                    CssConstants.backgroundRepeatProperty = "background-repeat";
                    CssConstants.backgroundSizeProperty = "background-size";
                    CssConstants.backgroundImageProperty = "background-image";
                    CssConstants.textShadowProperty = "text-shadow";
                    CssConstants.textAlignProperty = "text-align";
                    CssConstants.borderProperty = "border";
                    CssConstants.borderTopWidthProperty = "border-top-width";
                    CssConstants.borderBottomWidthProperty = "border-bottom-width";
                    CssConstants.borderLeftWidthProperty = "border-left-width";
                    CssConstants.borderRightWidthProperty = "border-right-width";
                    CssConstants.fontSizeProperty = "font-size";
                    CssConstants.fontWeightProperty = "font-weight";
                    CssConstants.colorProperty = "color";
                    CssConstants.opacityProperty = "opacity";
                    CssConstants.paddingLeftProperty = "padding-left";
                    CssConstants.paddingRightProperty = "padding-right";
                    CssConstants.positionProperty = "position";
                    CssConstants.maxWidthProperty = "max-width";
                    CssConstants.minWidthProperty = "min-width";
                    CssConstants.overflowProperty = "overflow";
                    CssConstants.overflowXProperty = "overflow-x";
                    CssConstants.overflowYProperty = "overflow-y";
                    CssConstants.transformProperty = "transform";
                    CssConstants.webkitTransformProperty = "-webkit-transform";
                    CssConstants.cursorProperty = "cursor";
                    CssConstants.visibilityProperty = "visibility";
                    CssConstants.absoluteValue = "absolute";
                    CssConstants.zeroPixelValue = "0px";
                    CssConstants.autoValue = "auto";
                    CssConstants.hiddenValue = "hidden";
                    CssConstants.noneValue = "none";
                    CssConstants.blockValue = "block";
                    CssConstants.inlineBlockValue = "inline-block";
                    CssConstants.transparentValue = "transparent";
                    CssConstants.boldValue = "bold";
                    CssConstants.visibleValue = "visible";
                    CssConstants.tableRowValue = "table-row";
                    CssConstants.coverValue = "cover";
                    CssConstants.pointerValue = "pointer";
                    CssConstants.scrollValue = "scroll";
                })(CssConstants = svg.CssConstants || (svg.CssConstants = {}));
            })(svg = utils.svg || (utils.svg = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var svg;
            (function (svg) {
                var touch;
                (function (touch) {
                    var Point = (function () {
                        function Point(x, y) {
                            this.x = x || 0;
                            this.y = y || 0;
                        }
                        Point.prototype.offset = function (offsetX, offsetY) {
                            this.x += offsetX;
                            this.y += offsetY;
                        };
                        return Point;
                    }());
                    touch.Point = Point;
                    var Rectangle = (function (_super) {
                        __extends(Rectangle, _super);
                        function Rectangle(x, y, width, height) {
                            _super.call(this, x, y);
                            this.width = width || 0;
                            this.height = height || 0;
                        }
                        Object.defineProperty(Rectangle.prototype, "point", {
                            get: function () {
                                return new Point(this.x, this.y);
                            },
                            enumerable: true,
                            configurable: true
                        });
                        Rectangle.prototype.contains = function (p) {
                            return Rectangle.contains(this, p);
                        };
                        Rectangle.contains = function (rect, p) {
                            if (p && !Rectangle.isEmpty(rect)) {
                                return rect.x <= p.x && p.x < rect.x + rect.width && rect.y <= p.y && p.y < rect.y + rect.height;
                            }
                            return false;
                        };
                        Rectangle.isEmpty = function (rect) {
                            return !(rect !== undefined && rect.width >= 0 && rect.height >= 0);
                        };
                        return Rectangle;
                    }(Point));
                    touch.Rectangle = Rectangle;
                })(touch = svg.touch || (svg.touch = {}));
            })(svg = utils.svg || (utils.svg = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var svg;
            (function (svg) {
                var touch;
                (function (touch) {
                    function touchStartEventName() {
                        var eventName = "touchstart";
                        if (window["PointerEvent"]) {
                            // IE11
                            eventName = "pointerdown";
                        }
                        return eventName;
                    }
                    touch.touchStartEventName = touchStartEventName;
                    function touchMoveEventName() {
                        var eventName = "touchmove";
                        if (window["PointerEvent"]) {
                            // IE11
                            eventName = "pointermove";
                        }
                        return eventName;
                    }
                    touch.touchMoveEventName = touchMoveEventName;
                    function touchEndEventName() {
                        var eventName = "touchend";
                        if (window["PointerEvent"]) {
                            // IE11
                            eventName = "pointerup";
                        }
                        return eventName;
                    }
                    touch.touchEndEventName = touchEndEventName;
                    function usePointerEvents() {
                        var eventName = touchStartEventName();
                        return eventName === "pointerdown" || eventName === "MSPointerDown";
                    }
                    touch.usePointerEvents = usePointerEvents;
                })(touch = svg.touch || (svg.touch = {}));
            })(svg = utils.svg || (utils.svg = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var svg;
            (function (svg) {
                function getCoordinates(rootNode, isPointerEvent) {
                    var coordinates;
                    if (isPointerEvent) {
                        // DO NOT USE - WebKit bug in getScreenCTM with nested SVG results in slight negative coordinate shift
                        // Also, IE will incorporate transform scale but WebKit does not, forcing us to detect browser and adjust appropriately.
                        // Just use non-scaled coordinates for all browsers, and adjust for the transform scale later (see lineChart.findIndex)
                        // coordinates = d3.mouse(rootNode);
                        // copied from d3_eventSource (which is not exposed)
                        var e = d3.event, s = void 0;
                        while (s = e.sourceEvent)
                            e = s;
                        var rect = rootNode.getBoundingClientRect();
                        coordinates = [e.clientX - rect.left - rootNode.clientLeft, e.clientY - rect.top - rootNode.clientTop];
                    }
                    else {
                        var touchCoordinates = d3.touches(rootNode);
                        if (touchCoordinates && touchCoordinates.length > 0) {
                            coordinates = touchCoordinates[0];
                        }
                    }
                    return coordinates;
                }
                svg.getCoordinates = getCoordinates;
            })(svg = utils.svg || (utils.svg = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var svg;
            (function (svg) {
                /**
                 * Very small values, when stringified, may be converted to scientific notation and cause a temporarily
                 * invalid attribute or style property value.
                 * For example, the number 0.0000001 is converted to the string "1e-7".
                 * This is particularly noticeable when interpolating opacity values.
                 * To avoid scientific notation, start or end the transition at 1e-6,
                 * which is the smallest value that is not stringified in exponential notation.
                 */
                svg.AlmostZero = 1e-6;
                /**
                     * Creates a translate string for use with the SVG transform call.
                     */
                function translate(x, y) {
                    return "translate(" + x + "," + y + ")";
                }
                svg.translate = translate;
                /**
                 * Creates a translateX string for use with the SVG transform call.
                 */
                function translateXWithPixels(x) {
                    return "translateX(" + x + "px)";
                }
                svg.translateXWithPixels = translateXWithPixels;
                function translateWithPixels(x, y) {
                    return "translate(" + x + "px," + y + "px)";
                }
                svg.translateWithPixels = translateWithPixels;
                /**
                 * Creates a translate + rotate string for use with the SVG transform call.
                 */
                function translateAndRotate(x, y, px, py, angle) {
                    return "transform", "translate("
                        + x + "," + y + ")"
                        + " rotate(" + angle + "," + px + "," + py + ")";
                }
                svg.translateAndRotate = translateAndRotate;
                /**
                 * Creates a scale string for use in a CSS transform property.
                 */
                function scale(scale) {
                    return "scale(" + scale + ")";
                }
                svg.scale = scale;
                /**
                 * Creates a translate + scale string for use with the SVG transform call.
                 */
                function translateAndScale(x, y, ratio) {
                    return "transform", "translate("
                        + x + "," + y + ")"
                        + " scale(" + ratio + ")";
                }
                svg.translateAndScale = translateAndScale;
                /**
                 * Creates a transform origin string for use in a CSS transform-origin property.
                 */
                function transformOrigin(xOffset, yOffset) {
                    return xOffset + " " + yOffset;
                }
                svg.transformOrigin = transformOrigin;
                /**
                 * Forces all D3 transitions to complete.
                 * Normally, zero-delay transitions are executed after an instantaneous delay (<10ms).
                 * This can cause a brief flicker if the browser renders the page twice: once at the end of the first event loop,
                 * then again immediately on the first timer callback. By flushing the timer queue at the end of the first event loop,
                 * you can run any zero-delay transitions immediately and avoid the flicker.
                 *
                 * These flickers are noticable on IE, and with a large number of webviews(not recommend you ever do this) on iOS.
                 */
                function flushAllD3Transitions() {
                    var now = Date.now;
                    Date.now = function () { return Infinity; };
                    d3.timer.flush();
                    Date.now = now;
                }
                svg.flushAllD3Transitions = flushAllD3Transitions;
                /**
                 * Wrapper for flushAllD3Transitions.
                 */
                function flushAllD3TransitionsIfNeeded(options) {
                    if (!options)
                        return;
                    var animationOptions = options;
                    if (animationOptions && animationOptions.transitionImmediate) {
                        flushAllD3Transitions();
                    }
                }
                svg.flushAllD3TransitionsIfNeeded = flushAllD3TransitionsIfNeeded;
                /**
                 * There is a known bug in IE10 that causes cryptic crashes for SVG elements with a null "d" attribute:
                 * https://github.com/mbostock/d3/issues/1737
                 */
                function ensureDAttribute(pathElement) {
                    if (!pathElement.getAttribute("d")) {
                        pathElement.setAttribute("d", "");
                    }
                }
                svg.ensureDAttribute = ensureDAttribute;
                /**
                 * In IE10, it is possible to return SVGPoints with NaN members.
                 */
                function ensureValidSVGPoint(point) {
                    if (isNaN(point.x)) {
                        point.x = 0;
                    }
                    if (isNaN(point.y)) {
                        point.y = 0;
                    }
                }
                svg.ensureValidSVGPoint = ensureValidSVGPoint;
                /**
                 * Parse the Transform string with value "translate(x,y)".
                 * In Chrome for the translate(position) string the delimiter
                 * is a comma and in IE it is a spaceso checking for both.
                 */
                function parseTranslateTransform(input) {
                    if (!input || input.length === 0) {
                        return {
                            x: "0",
                            y: "0",
                        };
                    }
                    var translateCoordinates = input.split(/[\s,]+/);
                    var yValue = "0";
                    var xValue;
                    var xCoord = translateCoordinates[0];
                    // Y coordinate is ommited in I.E if it is 0, so need to check against that
                    if (translateCoordinates.length === 1) {
                        // 10 refers to the length of "translate("
                        xValue = xCoord.substring(10, xCoord.length - 1);
                    }
                    else {
                        var yCoord = translateCoordinates[1];
                        yValue = yCoord.substring(0, yCoord.length - 1);
                        // 10 refers to the length of "translate("
                        xValue = xCoord.substring(10, xCoord.length);
                    }
                    return {
                        x: xValue,
                        y: yValue
                    };
                }
                svg.parseTranslateTransform = parseTranslateTransform;
                /**
                 * Create an arrow.
                 */
                function createArrow(width, height, rotate) {
                    var transform = "rotate(" + rotate + " " + width / 2 + " " + height / 2 + ")";
                    var path = "M0 0";
                    path += "L0 " + height;
                    path += "L" + width + " " + height / 2 + " Z";
                    return {
                        path: path,
                        transform: transform
                    };
                }
                svg.createArrow = createArrow;
                /**
                 * Use the ratio of the scaled bounding rect and the SVG DOM bounding box to get the x and y transform scale values
                 * @deprecated This function is unreliable across browser implementations, prefer to use SVGScaleDetector if needed.
                 */
                function getTransformScaleRatios(svgElement) {
                    if (svgElement != null) {
                        var scaledRect = svgElement.getBoundingClientRect();
                        var domRect = svgElement.getBBox();
                        if (domRect.height > 0 && domRect.width > 0) {
                            return {
                                x: scaledRect.width / domRect.width,
                                y: scaledRect.height / domRect.height
                            };
                        }
                    }
                    return { x: 1, y: 1 };
                }
                svg.getTransformScaleRatios = getTransformScaleRatios;
            })(svg = utils.svg || (utils.svg = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var svg;
            (function (svg) {
                var SVGScaleDetector = (function () {
                    function SVGScaleDetector(svgElement) {
                        this.scaleDetectorElement = svgElement
                            .append("rect") // Using a <rect> which should have a reliable bounding box across browser implementations.
                            .classed("scale-detector", true)
                            .attr({
                            width: 1,
                            height: 1,
                            "stroke-width": "0px",
                            fill: "none",
                        })
                            .node();
                    }
                    SVGScaleDetector.prototype.getScale = function () {
                        var scaledRect = this.scaleDetectorElement.getBoundingClientRect();
                        var domRect = this.scaleDetectorElement.getBBox();
                        if (domRect.height > 0 && domRect.width > 0) {
                            return {
                                x: scaledRect.width / domRect.width,
                                y: scaledRect.height / domRect.height
                            };
                        }
                        return {
                            x: 1,
                            y: 1
                        };
                    };
                    return SVGScaleDetector;
                }());
                svg.SVGScaleDetector = SVGScaleDetector;
            })(svg = utils.svg || (utils.svg = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var dataview;
            (function (dataview) {
                // TODO: refactor & focus DataViewTransform into a service with well-defined dependencies.
                var DataViewTransform;
                (function (DataViewTransform) {
                    // TODO: refactor this, setGrouped, and groupValues to a test helper to stop using it in the product
                    function createValueColumns(values, valueIdentityFields, source) {
                        if (values === void 0) { values = []; }
                        var result = values;
                        setGrouped(result);
                        if (valueIdentityFields) {
                            result.identityFields = valueIdentityFields;
                        }
                        if (source) {
                            result.source = source;
                        }
                        return result;
                    }
                    DataViewTransform.createValueColumns = createValueColumns;
                    function setGrouped(values, groupedResult) {
                        values.grouped = groupedResult
                            ? function () { return groupedResult; }
                            : function () { return groupValues(values); };
                    }
                    DataViewTransform.setGrouped = setGrouped;
                    /** Group together the values with a common identity. */
                    function groupValues(values) {
                        var groups = [], currentGroup;
                        for (var i = 0, len = values.length; i < len; i++) {
                            var value = values[i];
                            if (!currentGroup || currentGroup.identity !== value.identity) {
                                currentGroup = {
                                    values: []
                                };
                                if (value.identity) {
                                    currentGroup.identity = value.identity;
                                    var source = value.source;
                                    // allow null, which will be formatted as (Blank).
                                    if (source.groupName !== undefined) {
                                        currentGroup.name = source.groupName;
                                    }
                                    else if (source.displayName) {
                                        currentGroup.name = source.displayName;
                                    }
                                }
                                groups.push(currentGroup);
                            }
                            currentGroup.values.push(value);
                        }
                        return groups;
                    }
                })(DataViewTransform = dataview.DataViewTransform || (dataview.DataViewTransform = {}));
            })(dataview = utils.dataview || (utils.dataview = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var dataview;
            (function (dataview) {
                var DataRoleHelper;
                (function (DataRoleHelper) {
                    function getMeasureIndexOfRole(grouped, roleName) {
                        if (!_.isEmpty(grouped)) {
                            var firstGroup = grouped[0];
                            if (firstGroup.values && firstGroup.values.length > 0) {
                                for (var i = 0, len = firstGroup.values.length; i < len; ++i) {
                                    var value = firstGroup.values[i];
                                    if (value && value.source) {
                                        if (hasRole(value.source, roleName)) {
                                            return i;
                                        }
                                    }
                                }
                            }
                        }
                        return -1;
                    }
                    DataRoleHelper.getMeasureIndexOfRole = getMeasureIndexOfRole;
                    function getCategoryIndexOfRole(categories, roleName) {
                        if (!_.isEmpty(categories)) {
                            for (var i = 0, ilen = categories.length; i < ilen; i++) {
                                if (hasRole(categories[i].source, roleName)) {
                                    return i;
                                }
                            }
                        }
                        return -1;
                    }
                    DataRoleHelper.getCategoryIndexOfRole = getCategoryIndexOfRole;
                    function hasRole(column, name) {
                        var roles = column.roles;
                        return roles && roles[name];
                    }
                    DataRoleHelper.hasRole = hasRole;
                    function hasRoleInDataView(dataView, name) {
                        return dataView != null
                            && dataView.metadata != null
                            && dataView.metadata.columns
                            && _.some(dataView.metadata.columns, function (c) { return c.roles && c.roles[name] !== undefined; }); // any is an alias of some
                    }
                    DataRoleHelper.hasRoleInDataView = hasRoleInDataView;
                    function hasRoleInValueColumn(valueColumn, name) {
                        return valueColumn && valueColumn.source && valueColumn.source.roles && (valueColumn.source.roles[name] === true);
                    }
                    DataRoleHelper.hasRoleInValueColumn = hasRoleInValueColumn;
                })(DataRoleHelper = dataview.DataRoleHelper || (dataview.DataRoleHelper = {}));
            })(dataview = utils.dataview || (utils.dataview = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var dataview;
            (function (dataview) {
                var DataViewObjects;
                (function (DataViewObjects) {
                    /** Gets the value of the given object/property pair. */
                    function getValue(objects, propertyId, defaultValue) {
                        if (!objects) {
                            return defaultValue;
                        }
                        var object = objects[propertyId.objectName];
                        return DataViewObject.getValue(object, propertyId.propertyName, defaultValue);
                    }
                    DataViewObjects.getValue = getValue;
                    /** Gets an object from objects. */
                    function getObject(objects, objectName, defaultValue) {
                        if (objects && objects[objectName]) {
                            var object = objects[objectName];
                            return object;
                        }
                        return defaultValue;
                    }
                    DataViewObjects.getObject = getObject;
                    /** Gets the solid color from a fill property. */
                    function getFillColor(objects, propertyId, defaultColor) {
                        var value = getValue(objects, propertyId);
                        if (!value || !value.solid) {
                            return defaultColor;
                        }
                        return value.solid.color;
                    }
                    DataViewObjects.getFillColor = getFillColor;
                })(DataViewObjects = dataview.DataViewObjects || (dataview.DataViewObjects = {}));
                var DataViewObject;
                (function (DataViewObject) {
                    function getValue(object, propertyName, defaultValue) {
                        if (!object) {
                            return defaultValue;
                        }
                        var propertyValue = object[propertyName];
                        if (propertyValue === undefined) {
                            return defaultValue;
                        }
                        return propertyValue;
                    }
                    DataViewObject.getValue = getValue;
                    /** Gets the solid color from a fill property using only a propertyName */
                    function getFillColorByPropertyName(object, propertyName, defaultColor) {
                        var value = getValue(object, propertyName);
                        if (!value || !value.solid) {
                            return defaultColor;
                        }
                        return value.solid.color;
                    }
                    DataViewObject.getFillColorByPropertyName = getFillColorByPropertyName;
                })(DataViewObject = dataview.DataViewObject || (dataview.DataViewObject = {}));
            })(dataview = utils.dataview || (utils.dataview = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var dataview;
            (function (dataview) {
                // powerbi.extensibility.utils.dataview
                var DataRoleHelper = powerbi.extensibility.utils.dataview.DataRoleHelper;
                var converterHelper;
                (function (converterHelper) {
                    function categoryIsAlsoSeriesRole(dataView, seriesRoleName, categoryRoleName) {
                        if (dataView.categories && dataView.categories.length > 0) {
                            // Need to pivot data if our category soure is a series role
                            var category = dataView.categories[0];
                            return category.source &&
                                DataRoleHelper.hasRole(category.source, seriesRoleName) &&
                                DataRoleHelper.hasRole(category.source, categoryRoleName);
                        }
                        return false;
                    }
                    converterHelper.categoryIsAlsoSeriesRole = categoryIsAlsoSeriesRole;
                    function getSeriesName(source) {
                        return (source.groupName !== undefined)
                            ? source.groupName
                            : source.queryName;
                    }
                    converterHelper.getSeriesName = getSeriesName;
                    function isImageUrlColumn(column) {
                        var misc = getMiscellaneousTypeDescriptor(column);
                        return misc != null && misc.imageUrl === true;
                    }
                    converterHelper.isImageUrlColumn = isImageUrlColumn;
                    function isWebUrlColumn(column) {
                        var misc = getMiscellaneousTypeDescriptor(column);
                        return misc != null && misc.webUrl === true;
                    }
                    converterHelper.isWebUrlColumn = isWebUrlColumn;
                    function getMiscellaneousTypeDescriptor(column) {
                        return column
                            && column.type
                            && column.type.misc;
                    }
                    function hasImageUrlColumn(dataView) {
                        if (!dataView || !dataView.metadata || _.isEmpty(dataView.metadata.columns))
                            return false;
                        return _.some(dataView.metadata.columns, function (column) { return isImageUrlColumn(column) === true; });
                    }
                    converterHelper.hasImageUrlColumn = hasImageUrlColumn;
                })(converterHelper = dataview.converterHelper || (dataview.converterHelper = {}));
            })(dataview = utils.dataview || (utils.dataview = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var dataview;
            (function (dataview) {
                var DataViewObjectsParser = (function () {
                    function DataViewObjectsParser(fillColorNames) {
                        if (fillColorNames === void 0) { fillColorNames = []; }
                        this._fillColorRegExp = DataViewObjectsParser.createFillColorRegExp(DataViewObjectsParser.DefaultFillColorNames.concat(fillColorNames));
                    }
                    DataViewObjectsParser.createFillColorRegExp = function (fillColorNames) {
                        var formattedFillColorNames = fillColorNames
                            .reduce(function (previousValue, currentValue, index) {
                            return previousValue.concat((index ? "|" : "") + "(" + currentValue + ")");
                        }, "");
                        return new RegExp("^" + formattedFillColorNames + "$");
                    };
                    DataViewObjectsParser.getDefault = function () {
                        return new this();
                    };
                    DataViewObjectsParser.createPropertyIdentifier = function (objectName, propertyName) {
                        return {
                            objectName: objectName,
                            propertyName: propertyName
                        };
                    };
                    DataViewObjectsParser.parse = function (dataView) {
                        var dataViewObjectParser = this.getDefault(), properties;
                        if (!dataView || !dataView.metadata || !dataView.metadata.objects) {
                            return dataViewObjectParser;
                        }
                        properties = dataViewObjectParser.getProperties();
                        for (var objectName in properties) {
                            for (var propertyName in properties[objectName]) {
                                var defaultValue = dataViewObjectParser[objectName][propertyName], getValueFunction = void 0;
                                getValueFunction = dataViewObjectParser.getValueFunctionByPropertyName(propertyName);
                                dataViewObjectParser[objectName][propertyName] = getValueFunction(dataView.metadata.objects, properties[objectName][propertyName], defaultValue);
                            }
                        }
                        return dataViewObjectParser;
                    };
                    DataViewObjectsParser.isPropertyEnumerable = function (propertyName) {
                        return !DataViewObjectsParser.InnumerablePropertyPrefix.test(propertyName);
                    };
                    DataViewObjectsParser.enumerateObjectInstances = function (dataViewObjectParser, options) {
                        var dataViewProperties = dataViewObjectParser && dataViewObjectParser[options.objectName];
                        if (!dataViewProperties) {
                            return [];
                        }
                        var instance = {
                            objectName: options.objectName,
                            selector: null,
                            properties: {}
                        };
                        for (var key in dataViewProperties) {
                            if (_.has(dataViewProperties, key)) {
                                instance.properties[key] = dataViewProperties[key];
                            }
                        }
                        return {
                            instances: [instance]
                        };
                    };
                    DataViewObjectsParser.prototype.getValueFunctionByPropertyName = function (propertyName) {
                        if (this._fillColorRegExp.test(propertyName)) {
                            return dataview.DataViewObjects.getFillColor;
                        }
                        return dataview.DataViewObjects.getValue;
                    };
                    DataViewObjectsParser.prototype.getProperties = function () {
                        var _this = this;
                        var properties = {}, objectNames = Object.keys(this);
                        objectNames.forEach(function (objectName) {
                            if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                                var propertyNames = Object.keys(_this[objectName]);
                                properties[objectName] = {};
                                propertyNames.forEach(function (propertyName) {
                                    if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {
                                        properties[objectName][propertyName] =
                                            DataViewObjectsParser.createPropertyIdentifier(objectName, propertyName);
                                    }
                                });
                            }
                        });
                        return properties;
                    };
                    DataViewObjectsParser.DefaultFillColorNames = [
                        "fillColor",
                        "color",
                        "fill",
                        "labelColor",
                        "axisColor"
                    ];
                    DataViewObjectsParser.InnumerablePropertyPrefix = /^_/;
                    return DataViewObjectsParser;
                }());
                dataview.DataViewObjectsParser = DataViewObjectsParser;
            })(dataview = utils.dataview || (utils.dataview = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));

var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
// Custom implementation of Globalize from PowerView team
// The public implementation from https://github.com/borisyankov/DefinitelyTyped/tree/master/globalize doesn't work
/* tslint:disable:no-var-keyword */
var Globalize = Globalize || window["Globalize"];
/* tslint:enable */
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                var LocalStorageService = (function () {
                    function LocalStorageService() {
                    }
                    LocalStorageService.prototype.getData = function (key) {
                        try {
                            if (localStorage) {
                                var value = localStorage[key];
                                if (value) {
                                    return JSON.parse(value);
                                }
                            }
                        }
                        catch (exception) { }
                        return null;
                    };
                    LocalStorageService.prototype.setData = function (key, data) {
                        try {
                            if (localStorage) {
                                localStorage[key] = JSON.stringify(data);
                            }
                        }
                        catch (e) { }
                    };
                    return LocalStorageService;
                }());
                formatting.LocalStorageService = LocalStorageService;
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                var EphemeralStorageService = (function () {
                    function EphemeralStorageService(clearCacheInterval) {
                        this.cache = {};
                        this.clearCacheInterval = (clearCacheInterval != null)
                            ? clearCacheInterval
                            : EphemeralStorageService.defaultClearCacheInterval;
                        this.clearCache();
                    }
                    EphemeralStorageService.prototype.getData = function (key) {
                        return this.cache[key];
                    };
                    EphemeralStorageService.prototype.setData = function (key, data) {
                        var _this = this;
                        this.cache[key] = data;
                        if (this.clearCacheTimerId == null) {
                            this.clearCacheTimerId = setTimeout(function () { return _this.clearCache(); }, this.clearCacheInterval);
                        }
                    };
                    EphemeralStorageService.prototype.clearCache = function () {
                        this.cache = {};
                        this.clearCacheTimerId = undefined;
                    };
                    EphemeralStorageService.defaultClearCacheInterval = (1000 * 60 * 60 * 24); // 1 day
                    return EphemeralStorageService;
                }());
                formatting.EphemeralStorageService = EphemeralStorageService;
                formatting.ephemeralStorageService = new EphemeralStorageService();
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                /**
                 * Extensions to String class.
                 */
                var stringExtensions;
                (function (stringExtensions) {
                    var HtmlTagRegex = new RegExp("[<>]", "g");
                    /**
                     * Checks if a string ends with a sub-string.
                     */
                    function endsWith(str, suffix) {
                        return str.indexOf(suffix, str.length - suffix.length) !== -1;
                    }
                    stringExtensions.endsWith = endsWith;
                    function format() {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i - 0] = arguments[_i];
                        }
                        var s = args[0];
                        if (isNullOrUndefinedOrWhiteSpaceString(s))
                            return s;
                        for (var i = 0; i < args.length - 1; i++) {
                            var reg = new RegExp("\\{" + i + "\\}", "gm");
                            s = s.replace(reg, args[i + 1]);
                        }
                        return s;
                    }
                    stringExtensions.format = format;
                    /**
                     * Compares two strings for equality, ignoring case.
                     */
                    function equalIgnoreCase(a, b) {
                        return stringExtensions.normalizeCase(a) === stringExtensions.normalizeCase(b);
                    }
                    stringExtensions.equalIgnoreCase = equalIgnoreCase;
                    function startsWithIgnoreCase(a, b) {
                        var normalizedSearchString = stringExtensions.normalizeCase(b);
                        return stringExtensions.normalizeCase(a).indexOf(normalizedSearchString) === 0;
                    }
                    stringExtensions.startsWithIgnoreCase = startsWithIgnoreCase;
                    function startsWith(a, b) {
                        return a.indexOf(b) === 0;
                    }
                    stringExtensions.startsWith = startsWith;
                    /** Determines whether a string contains a specified substring (by case-sensitive comparison). */
                    function contains(source, substring) {
                        if (source == null)
                            return false;
                        return source.indexOf(substring) !== -1;
                    }
                    stringExtensions.contains = contains;
                    /** Determines whether a string contains a specified substring (while ignoring case). */
                    function containsIgnoreCase(source, substring) {
                        if (source == null)
                            return false;
                        return contains(normalizeCase(source), normalizeCase(substring));
                    }
                    stringExtensions.containsIgnoreCase = containsIgnoreCase;
                    /**
                     * Normalizes case for a string.
                     * Used by equalIgnoreCase method.
                     */
                    function normalizeCase(value) {
                        return value.toUpperCase();
                    }
                    stringExtensions.normalizeCase = normalizeCase;
                    /**
                     * Receives a string and returns an ArrayBuffer of its characters.
                     * @return An ArrayBuffer of the string's characters.
                     * If the string is empty or null or undefined - returns null.
                     */
                    function stringToArrayBuffer(str) {
                        if (isNullOrEmpty(str)) {
                            return null;
                        }
                        var buffer = new ArrayBuffer(str.length);
                        var bufferView = new Uint8Array(buffer);
                        for (var i = 0, strLen = str.length; i < strLen; i++) {
                            bufferView[i] = str.charCodeAt(i);
                        }
                        return bufferView;
                    }
                    stringExtensions.stringToArrayBuffer = stringToArrayBuffer;
                    /**
                     * Is string null or empty or undefined?
                     * @return True if the value is null or undefined or empty string,
                     * otherwise false.
                     */
                    function isNullOrEmpty(value) {
                        return (value == null) || (value.length === 0);
                    }
                    stringExtensions.isNullOrEmpty = isNullOrEmpty;
                    /**
                     * Returns true if the string is null, undefined, empty, or only includes white spaces.
                     * @return True if the str is null, undefined, empty, or only includes white spaces,
                     * otherwise false.
                     */
                    function isNullOrUndefinedOrWhiteSpaceString(str) {
                        return stringExtensions.isNullOrEmpty(str) || stringExtensions.isNullOrEmpty(str.trim());
                    }
                    stringExtensions.isNullOrUndefinedOrWhiteSpaceString = isNullOrUndefinedOrWhiteSpaceString;
                    /**
                     * Returns a value indicating whether the str contains any whitespace.
                     */
                    function containsWhitespace(str) {
                        var expr = /\s/;
                        return expr.test(str);
                    }
                    stringExtensions.containsWhitespace = containsWhitespace;
                    /**
                     * Returns a value indicating whether the str is a whitespace string.
                     */
                    function isWhitespace(str) {
                        return str.trim() === "";
                    }
                    stringExtensions.isWhitespace = isWhitespace;
                    /**
                     * Returns the string with any trailing whitespace from str removed.
                     */
                    function trimTrailingWhitespace(str) {
                        return str.replace(/\s+$/, "");
                    }
                    stringExtensions.trimTrailingWhitespace = trimTrailingWhitespace;
                    /**
                     * Returns the string with any leading and trailing whitespace from str removed.
                     */
                    function trimWhitespace(str) {
                        return str.replace(/^\s+/, "").replace(/\s+$/, "");
                    }
                    stringExtensions.trimWhitespace = trimWhitespace;
                    /**
                     * Returns length difference between the two provided strings.
                     */
                    function getLengthDifference(left, right) {
                        return Math.abs(left.length - right.length);
                    }
                    stringExtensions.getLengthDifference = getLengthDifference;
                    /**
                     * Repeat char or string several times.
                     * @param char The string to repeat.
                     * @param count How many times to repeat the string.
                     */
                    function repeat(char, count) {
                        var result = "";
                        for (var i = 0; i < count; i++) {
                            result += char;
                        }
                        return result;
                    }
                    stringExtensions.repeat = repeat;
                    /**
                     * Replace all the occurrences of the textToFind in the text with the textToReplace.
                     * @param text The original string.
                     * @param textToFind Text to find in the original string.
                     * @param textToReplace New text replacing the textToFind.
                     */
                    function replaceAll(text, textToFind, textToReplace) {
                        if (!textToFind)
                            return text;
                        var pattern = escapeStringForRegex(textToFind);
                        return text.replace(new RegExp(pattern, "gi"), textToReplace);
                    }
                    stringExtensions.replaceAll = replaceAll;
                    function ensureUniqueNames(names) {
                        var usedNames = {};
                        // Make sure we are giving fair chance for all columns to stay with their original name
                        // First we fill the used names map to contain all the original unique names from the list.
                        for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
                            var name_1 = names_1[_i];
                            usedNames[name_1] = false;
                        }
                        var uniqueNames = [];
                        // Now we go over all names and find a unique name for each
                        for (var _a = 0, names_2 = names; _a < names_2.length; _a++) {
                            var name_2 = names_2[_a];
                            var uniqueName = name_2;
                            // If the (original) column name is already taken lets try to find another name
                            if (usedNames[uniqueName]) {
                                var counter = 0;
                                // Find a name that is not already in the map
                                while (usedNames[uniqueName] !== undefined) {
                                    uniqueName = name_2 + "." + (++counter);
                                }
                            }
                            uniqueNames.push(uniqueName);
                            usedNames[uniqueName] = true;
                        }
                        return uniqueNames;
                    }
                    stringExtensions.ensureUniqueNames = ensureUniqueNames;
                    /**
                     * Returns a name that is not specified in the values.
                     */
                    function findUniqueName(usedNames, baseName) {
                        // Find a unique name
                        var i = 0, uniqueName = baseName;
                        while (usedNames[uniqueName]) {
                            uniqueName = baseName + (++i);
                        }
                        return uniqueName;
                    }
                    stringExtensions.findUniqueName = findUniqueName;
                    function constructNameFromList(list, separator, maxCharacter) {
                        var labels = [];
                        var exceeded;
                        var length = 0;
                        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                            var item = list_1[_i];
                            if (length + item.length > maxCharacter && labels.length > 0) {
                                exceeded = true;
                                break;
                            }
                            labels.push(item);
                            length += item.length;
                        }
                        var separatorWithSpace = " " + separator + " ";
                        var name = labels.join(separatorWithSpace);
                        if (exceeded)
                            name += separatorWithSpace + "...";
                        return name;
                    }
                    stringExtensions.constructNameFromList = constructNameFromList;
                    function escapeStringForRegex(s) {
                        return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1");
                    }
                    stringExtensions.escapeStringForRegex = escapeStringForRegex;
                    /**
                     * Remove file name reserved characters <>:"/\|?* from input string.
                     */
                    function normalizeFileName(fileName) {
                        return fileName.replace(/[\<\>\:"\/\\\|\?*]/g, "");
                    }
                    stringExtensions.normalizeFileName = normalizeFileName;
                    /**
                     * Similar to JSON.stringify, but strips away escape sequences so that the resulting
                     * string is human-readable (and parsable by JSON formatting/validating tools).
                     */
                    function stringifyAsPrettyJSON(object) {
                        // let specialCharacterRemover = (key: string, value: string) => value.replace(/[^\w\s]/gi, "");
                        return JSON.stringify(object /*, specialCharacterRemover*/);
                    }
                    stringExtensions.stringifyAsPrettyJSON = stringifyAsPrettyJSON;
                    /**
                     * Derive a CLS-compliant name from a specified string.  If no allowed characters are present, return a fallback string instead.
                     * TODO (6708134): this should have a fully Unicode-aware implementation
                     */
                    function deriveClsCompliantName(input, fallback) {
                        var result = input.replace(/^[^A-Za-z]*/g, "").replace(/[ :\.\/\\\-\u00a0\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000]/g, "_").replace(/[\W]/g, "");
                        return result.length > 0 ? result : fallback;
                    }
                    stringExtensions.deriveClsCompliantName = deriveClsCompliantName;
                    /** Performs cheap sanitization by stripping away HTML tag (<>) characters. */
                    function stripTagDelimiters(s) {
                        return s.replace(HtmlTagRegex, "");
                    }
                    stringExtensions.stripTagDelimiters = stripTagDelimiters;
                })(stringExtensions = formatting.stringExtensions || (formatting.stringExtensions = {}));
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                var wordBreaker;
                (function (wordBreaker) {
                    var SPACE = " ";
                    var BREAKERS_REGEX = /[\s\n]+/g;
                    function search(index, content, backward) {
                        if (backward) {
                            for (var i = index - 1; i > -1; i--) {
                                if (hasBreakers(content[i]))
                                    return i + 1;
                            }
                        }
                        else {
                            for (var i = index, ilen = content.length; i < ilen; i++) {
                                if (hasBreakers(content[i]))
                                    return i;
                            }
                        }
                        return backward ? 0 : content.length;
                    }
                    /**
                     * Find the word nearest the cursor specified within content
                     * @param index - point within content to search forward/backward from
                     * @param content - string to search
                    */
                    function find(index, content) {
                        var result = { start: 0, end: 0 };
                        if (content.length === 0) {
                            return result;
                        }
                        result.start = search(index, content, true);
                        result.end = search(index, content, false);
                        return result;
                    }
                    wordBreaker.find = find;
                    /**
                     * Test for presence of breakers within content
                     * @param content - string to test
                    */
                    function hasBreakers(content) {
                        BREAKERS_REGEX.lastIndex = 0;
                        return BREAKERS_REGEX.test(content);
                    }
                    wordBreaker.hasBreakers = hasBreakers;
                    /**
                     * Count the number of pieces when broken by BREAKERS_REGEX
                     * ~2.7x faster than WordBreaker.split(content).length
                     * @param content - string to break and count
                    */
                    function wordCount(content) {
                        var count = 1;
                        BREAKERS_REGEX.lastIndex = 0;
                        BREAKERS_REGEX.exec(content);
                        while (BREAKERS_REGEX.lastIndex !== 0) {
                            count++;
                            BREAKERS_REGEX.exec(content);
                        }
                        return count;
                    }
                    wordBreaker.wordCount = wordCount;
                    function getMaxWordWidth(content, textWidthMeasurer, properties) {
                        var words = split(content);
                        var maxWidth = 0;
                        for (var _i = 0, words_1 = words; _i < words_1.length; _i++) {
                            var w = words_1[_i];
                            properties.text = w;
                            maxWidth = Math.max(maxWidth, textWidthMeasurer(properties));
                        }
                        return maxWidth;
                    }
                    wordBreaker.getMaxWordWidth = getMaxWordWidth;
                    function split(content) {
                        return content.split(BREAKERS_REGEX);
                    }
                    function getWidth(content, properties, textWidthMeasurer) {
                        properties.text = content;
                        return textWidthMeasurer(properties);
                    }
                    function truncate(content, properties, truncator, maxWidth) {
                        properties.text = content;
                        return truncator(properties, maxWidth);
                    }
                    /**
                     * Split content by breakers (words) and greedy fit as many words
                     * into each index in the result based on max width and number of lines
                     * e.g. Each index in result corresponds to a line of content
                     *      when used by AxisHelper.LabelLayoutStrategy.wordBreak
                     * @param content - string to split
                     * @param properties - text properties to be used by @param:textWidthMeasurer
                     * @param textWidthMeasurer - function to calculate width of given text content
                     * @param maxWidth - maximum allowed width of text content in each result
                     * @param maxNumLines - maximum number of results we will allow, valid values must be greater than 0
                     * @param truncator - (optional) if specified, used as a function to truncate content to a given width
                    */
                    function splitByWidth(content, properties, textWidthMeasurer, maxWidth, maxNumLines, truncator) {
                        // Default truncator returns string as-is
                        truncator = truncator ? truncator : function (properties, maxWidth) { return properties.text; };
                        var result = [];
                        var words = split(content);
                        var usedWidth = 0;
                        var wordsInLine = [];
                        for (var _i = 0, words_2 = words; _i < words_2.length; _i++) {
                            var word = words_2[_i];
                            // Last line? Just add whatever is left
                            if ((maxNumLines > 0) && (result.length >= maxNumLines - 1)) {
                                wordsInLine.push(word);
                                continue;
                            }
                            // Determine width if we add this word
                            // Account for SPACE we will add when joining...
                            var wordWidth = wordsInLine.length === 0
                                ? getWidth(word, properties, textWidthMeasurer)
                                : getWidth(SPACE + word, properties, textWidthMeasurer);
                            // If width would exceed max width,
                            // then push used words and start new split result
                            if (usedWidth + wordWidth > maxWidth) {
                                // Word alone exceeds max width, just add it.
                                if (wordsInLine.length === 0) {
                                    result.push(truncate(word, properties, truncator, maxWidth));
                                    usedWidth = 0;
                                    wordsInLine = [];
                                    continue;
                                }
                                result.push(truncate(wordsInLine.join(SPACE), properties, truncator, maxWidth));
                                usedWidth = 0;
                                wordsInLine = [];
                            }
                            // ...otherwise, add word and continue
                            wordsInLine.push(word);
                            usedWidth += wordWidth;
                        }
                        // Push remaining words onto result (if any)
                        if (!_.isEmpty(wordsInLine)) {
                            result.push(truncate(wordsInLine.join(SPACE), properties, truncator, maxWidth));
                        }
                        return result;
                    }
                    wordBreaker.splitByWidth = splitByWidth;
                })(wordBreaker = formatting.wordBreaker || (formatting.wordBreaker = {}));
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                /** Enumeration of DateTimeUnits */
                (function (DateTimeUnit) {
                    DateTimeUnit[DateTimeUnit["Year"] = 0] = "Year";
                    DateTimeUnit[DateTimeUnit["Month"] = 1] = "Month";
                    DateTimeUnit[DateTimeUnit["Week"] = 2] = "Week";
                    DateTimeUnit[DateTimeUnit["Day"] = 3] = "Day";
                    DateTimeUnit[DateTimeUnit["Hour"] = 4] = "Hour";
                    DateTimeUnit[DateTimeUnit["Minute"] = 5] = "Minute";
                    DateTimeUnit[DateTimeUnit["Second"] = 6] = "Second";
                    DateTimeUnit[DateTimeUnit["Millisecond"] = 7] = "Millisecond";
                })(formatting.DateTimeUnit || (formatting.DateTimeUnit = {}));
                var DateTimeUnit = formatting.DateTimeUnit;
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                var createClassAndSelector = powerbi.extensibility.utils.svg.CssConstants.createClassAndSelector;
                // powerbi.extensibility.utils.type
                var PixelConverter = powerbi.extensibility.utils.type.PixelConverter;
                var Prototype = powerbi.extensibility.utils.type.Prototype;
                // powerbi.extensibility.utils.formatting
                var wordBreaker = powerbi.extensibility.utils.formatting.wordBreaker;
                var textMeasurementService;
                (function (textMeasurementService) {
                    var ellipsis = "...";
                    var OverflowingText = createClassAndSelector("overflowingText");
                    var spanElement;
                    var svgTextElement;
                    var canvasCtx;
                    var fallbackFontFamily;
                    /**
                     * Idempotent function for adding the elements to the DOM.
                     */
                    function ensureDOM() {
                        if (spanElement) {
                            return;
                        }
                        spanElement = $("<span/>");
                        $("body").append(spanElement);
                        // The style hides the svg element from the canvas, preventing canvas from scrolling down to show svg black square.
                        svgTextElement = d3.select($("body").get(0))
                            .append("svg")
                            .style({
                            "height": "0px",
                            "width": "0px",
                            "position": "absolute"
                        })
                            .append("text");
                        canvasCtx = $("<canvas/>").get(0).getContext("2d");
                        var style = window.getComputedStyle(svgTextElement.node());
                        if (style) {
                            fallbackFontFamily = style.fontFamily;
                        }
                        else {
                            fallbackFontFamily = "";
                        }
                    }
                    /**
                     * Removes spanElement from DOM.
                     */
                    function removeSpanElement() {
                        if (spanElement && spanElement.remove) {
                            spanElement.remove();
                        }
                        spanElement = null;
                    }
                    textMeasurementService.removeSpanElement = removeSpanElement;
                    /**
                     * This method measures the width of the text with the given SVG text properties.
                     * @param textProperties The text properties to use for text measurement.
                     * @param text The text to measure.
                     */
                    function measureSvgTextWidth(textProperties, text) {
                        ensureDOM();
                        canvasCtx.font =
                            (textProperties.fontStyle || "") + " " +
                                (textProperties.fontVariant || "") + " " +
                                (textProperties.fontWeight || "") + " " +
                                textProperties.fontSize + " " +
                                (textProperties.fontFamily || fallbackFontFamily);
                        return canvasCtx.measureText(text || textProperties.text).width;
                    }
                    textMeasurementService.measureSvgTextWidth = measureSvgTextWidth;
                    /**
                     * This method return the rect with the given SVG text properties.
                     * @param textProperties The text properties to use for text measurement.
                     * @param text The text to measure.
                     */
                    function measureSvgTextRect(textProperties, text) {
                        ensureDOM();
                        svgTextElement.style(null);
                        svgTextElement
                            .text(text || textProperties.text)
                            .attr({
                            "visibility": "hidden",
                            "font-family": textProperties.fontFamily || fallbackFontFamily,
                            "font-variant": textProperties.fontVariant,
                            "font-size": textProperties.fontSize,
                            "font-weight": textProperties.fontWeight,
                            "font-style": textProperties.fontStyle,
                            "white-space": textProperties.whiteSpace || "nowrap"
                        });
                        // We're expecting the browser to give a synchronous measurement here
                        // We're using SVGTextElement because it works across all browsers
                        return svgTextElement.node().getBBox();
                    }
                    textMeasurementService.measureSvgTextRect = measureSvgTextRect;
                    /**
                     * This method measures the height of the text with the given SVG text properties.
                     * @param textProperties The text properties to use for text measurement.
                     * @param text The text to measure.
                     */
                    function measureSvgTextHeight(textProperties, text) {
                        return measureSvgTextRect(textProperties, text).height;
                    }
                    textMeasurementService.measureSvgTextHeight = measureSvgTextHeight;
                    /**
                     * This method returns the text Rect with the given SVG text properties.
                     * Does NOT return text width; obliterates text value
                     * @param {TextProperties} textProperties - The text properties to use for text measurement
                     */
                    function estimateSvgTextRect(textProperties) {
                        var propertiesKey = textProperties.fontFamily + textProperties.fontSize;
                        var rect = formatting.ephemeralStorageService.getData(propertiesKey);
                        if (rect == null) {
                            // To estimate we check the height of a particular character, once it is cached, subsequent
                            // calls should always get the height from the cache (regardless of the text).
                            var estimatedTextProperties = {
                                fontFamily: textProperties.fontFamily,
                                fontSize: textProperties.fontSize,
                                text: "M",
                            };
                            rect = textMeasurementService.measureSvgTextRect(estimatedTextProperties);
                            // NOTE: In some cases (disconnected/hidden DOM) we may provide incorrect measurement results (zero sized bounding-box), so
                            // we only store values in the cache if we are confident they are correct.
                            if (rect.height > 0)
                                formatting.ephemeralStorageService.setData(propertiesKey, rect);
                        }
                        return rect;
                    }
                    /**
                     * This method returns the text Rect with the given SVG text properties.
                     * @param {TextProperties} textProperties - The text properties to use for text measurement
                     */
                    function estimateSvgTextBaselineDelta(textProperties) {
                        var rect = estimateSvgTextRect(textProperties);
                        return rect.y + rect.height;
                    }
                    textMeasurementService.estimateSvgTextBaselineDelta = estimateSvgTextBaselineDelta;
                    /**
                     * This method estimates the height of the text with the given SVG text properties.
                     * @param {TextProperties} textProperties - The text properties to use for text measurement
                     */
                    function estimateSvgTextHeight(textProperties, tightFightForNumeric) {
                        if (tightFightForNumeric === void 0) { tightFightForNumeric = false; }
                        var height = estimateSvgTextRect(textProperties).height;
                        // TODO: replace it with new baseline calculation
                        if (tightFightForNumeric)
                            height *= 0.7;
                        return height;
                    }
                    textMeasurementService.estimateSvgTextHeight = estimateSvgTextHeight;
                    /**
                     * This method measures the width of the svgElement.
                     * @param svgElement The SVGTextElement to be measured.
                     */
                    function measureSvgTextElementWidth(svgElement) {
                        return measureSvgTextWidth(getSvgMeasurementProperties(svgElement));
                    }
                    textMeasurementService.measureSvgTextElementWidth = measureSvgTextElementWidth;
                    /**
                     * This method fetches the text measurement properties of the given DOM element.
                     * @param element The selector for the DOM Element.
                     */
                    function getMeasurementProperties(element) {
                        return {
                            text: element.val() || element.text(),
                            fontFamily: element.css("font-family"),
                            fontSize: element.css("font-size"),
                            fontWeight: element.css("font-weight"),
                            fontStyle: element.css("font-style"),
                            fontVariant: element.css("font-variant"),
                            whiteSpace: element.css("white-space")
                        };
                    }
                    textMeasurementService.getMeasurementProperties = getMeasurementProperties;
                    /**
                     * This method fetches the text measurement properties of the given SVG text element.
                     * @param svgElement The SVGTextElement to be measured.
                     */
                    function getSvgMeasurementProperties(svgElement) {
                        var style = window.getComputedStyle(svgElement, null);
                        if (style) {
                            return {
                                text: svgElement.textContent,
                                fontFamily: style.fontFamily,
                                fontSize: style.fontSize,
                                fontWeight: style.fontWeight,
                                fontStyle: style.fontStyle,
                                fontVariant: style.fontVariant,
                                whiteSpace: style.whiteSpace
                            };
                        }
                        else {
                            return {
                                text: svgElement.textContent,
                                fontFamily: "",
                                fontSize: "0",
                            };
                        }
                    }
                    textMeasurementService.getSvgMeasurementProperties = getSvgMeasurementProperties;
                    /**
                     * This method returns the width of a div element.
                     * @param element The div element.
                     */
                    function getDivElementWidth(element) {
                        var style = getComputedStyle(element[0]);
                        if (style)
                            return style.width;
                        else
                            return "0";
                    }
                    textMeasurementService.getDivElementWidth = getDivElementWidth;
                    /**
                     * Compares labels text size to the available size and renders ellipses when the available size is smaller.
                     * @param textProperties The text properties (including text content) to use for text measurement.
                     * @param maxWidth The maximum width available for rendering the text.
                     */
                    function getTailoredTextOrDefault(textProperties, maxWidth) {
                        ensureDOM();
                        var strLength = textProperties.text.length;
                        if (strLength === 0) {
                            return textProperties.text;
                        }
                        var width = measureSvgTextWidth(textProperties);
                        if (width < maxWidth) {
                            return textProperties.text;
                        }
                        // Create a copy of the textProperties so we don't modify the one that's passed in.
                        var copiedTextProperties = Prototype.inherit(textProperties);
                        // Take the properties and apply them to svgTextElement
                        // Then, do the binary search to figure out the substring we want
                        // Set the substring on textElement argument
                        var text = copiedTextProperties.text = ellipsis + copiedTextProperties.text;
                        var min = 1;
                        var max = text.length;
                        var i = ellipsis.length;
                        while (min <= max) {
                            // num | 0 prefered to Math.floor(num) for performance benefits
                            i = (min + max) / 2 | 0;
                            copiedTextProperties.text = text.substr(0, i);
                            width = measureSvgTextWidth(copiedTextProperties);
                            if (maxWidth > width) {
                                min = i + 1;
                            }
                            else if (maxWidth < width) {
                                max = i - 1;
                            }
                            else {
                                break;
                            }
                        }
                        // Since the search algorithm almost never finds an exact match,
                        // it will pick one of the closest two, which could result in a
                        // value bigger with than 'maxWidth' thus we need to go back by
                        // one to guarantee a smaller width than 'maxWidth'.
                        copiedTextProperties.text = text.substr(0, i);
                        width = measureSvgTextWidth(copiedTextProperties);
                        if (width > maxWidth) {
                            i--;
                        }
                        return text.substr(ellipsis.length, i - ellipsis.length) + ellipsis;
                    }
                    textMeasurementService.getTailoredTextOrDefault = getTailoredTextOrDefault;
                    /**
                     * Compares labels text size to the available size and renders ellipses when the available size is smaller.
                     * @param textElement The SVGTextElement containing the text to render.
                     * @param maxWidth The maximum width available for rendering the text.
                     */
                    function svgEllipsis(textElement, maxWidth) {
                        var properties = getSvgMeasurementProperties(textElement);
                        var originalText = properties.text;
                        var tailoredText = getTailoredTextOrDefault(properties, maxWidth);
                        if (originalText !== tailoredText) {
                            textElement.textContent = tailoredText;
                        }
                    }
                    textMeasurementService.svgEllipsis = svgEllipsis;
                    /**
                     * Word break textContent of <text> SVG element into <tspan>s
                     * Each tspan will be the height of a single line of text
                     * @param textElement - the SVGTextElement containing the text to wrap
                     * @param maxWidth - the maximum width available
                     * @param maxHeight - the maximum height available (defaults to single line)
                     * @param linePadding - (optional) padding to add to line height
                     */
                    function wordBreak(textElement, maxWidth, maxHeight, linePadding) {
                        if (linePadding === void 0) { linePadding = 0; }
                        var properties = getSvgMeasurementProperties(textElement);
                        var height = estimateSvgTextHeight(properties) + linePadding;
                        var maxNumLines = Math.max(1, Math.floor(maxHeight / height));
                        var node = d3.select(textElement);
                        // Save y of parent textElement to apply as first tspan dy
                        var firstDY = node.attr("y");
                        // Store and clear text content
                        var labelText = textElement.textContent;
                        textElement.textContent = null;
                        // Append a tspan for each word broken section
                        var words = wordBreaker.splitByWidth(labelText, properties, measureSvgTextWidth, maxWidth, maxNumLines);
                        for (var i = 0, ilen = words.length; i < ilen; i++) {
                            properties.text = words[i];
                            node
                                .append("tspan")
                                .attr({
                                "x": 0,
                                "dy": i === 0 ? firstDY : height,
                            })
                                .text(getTailoredTextOrDefault(properties, maxWidth));
                        }
                    }
                    textMeasurementService.wordBreak = wordBreak;
                    /**
                     * Word break textContent of span element into <span>s
                     * Each span will be the height of a single line of text
                     * @param textElement - the element containing the text to wrap
                     * @param maxWidth - the maximum width available
                     * @param maxHeight - the maximum height available (defaults to single line)
                     * @param linePadding - (optional) padding to add to line height
                     */
                    function wordBreakOverflowingText(textElement, maxWidth, maxHeight, linePadding) {
                        if (linePadding === void 0) { linePadding = 0; }
                        var properties = getSvgMeasurementProperties(textElement);
                        var height = estimateSvgTextHeight(properties) + linePadding;
                        var maxNumLines = Math.max(1, Math.floor(maxHeight / height));
                        // Store and clear text content
                        var labelText = textElement.textContent;
                        textElement.textContent = null;
                        // Append a span for each word broken section
                        var words = wordBreaker.splitByWidth(labelText, properties, measureSvgTextWidth, maxWidth, maxNumLines);
                        var spanItem = d3.select(textElement)
                            .selectAll(OverflowingText.selector)
                            .data(words, function (d) { return $.inArray(d, words).toString(); });
                        spanItem
                            .enter()
                            .append("span")
                            .classed(OverflowingText.class, true)
                            .text(function (d) { return d; })
                            .style("width", PixelConverter.toString(maxWidth));
                    }
                    textMeasurementService.wordBreakOverflowingText = wordBreakOverflowingText;
                })(textMeasurementService = formatting.textMeasurementService || (formatting.textMeasurementService = {}));
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                /** dateUtils module provides DateTimeSequence with set of additional date manipulation routines */
                var dateUtils;
                (function (dateUtils) {
                    var MonthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                    var MonthDaysLeap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                    /**
                     * Returns bool indicating weither the provided year is a leap year.
                     * @param year - year value
                     */
                    function isLeap(year) {
                        return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);
                    }
                    /**
                     * Returns number of days in the provided year/month.
                     * @param year - year value
                     * @param month - month value
                     */
                    function getMonthDays(year, month) {
                        return isLeap(year) ? MonthDaysLeap[month] : MonthDays[month];
                    }
                    /**
                     * Adds a specified number of years to the provided date.
                     * @param date - date value
                     * @param yearDelta - number of years to add
                     */
                    function addYears(date, yearDelta) {
                        var year = date.getFullYear();
                        var month = date.getMonth();
                        var day = date.getDate();
                        var isLeapDay = month === 2 && day === 29;
                        var result = new Date(date.getTime());
                        year = year + yearDelta;
                        if (isLeapDay && !isLeap(year)) {
                            day = 28;
                        }
                        result.setFullYear(year, month, day);
                        return result;
                    }
                    dateUtils.addYears = addYears;
                    /**
                     * Adds a specified number of months to the provided date.
                     * @param date - date value
                     * @param monthDelta - number of months to add
                     */
                    function addMonths(date, monthDelta) {
                        var year = date.getFullYear();
                        var month = date.getMonth();
                        var day = date.getDate();
                        var result = new Date(date.getTime());
                        year += (monthDelta - (monthDelta % 12)) / 12;
                        month += monthDelta % 12;
                        // VSTS 1325771: Certain column charts don't display any data
                        // Wrap arround the month if is after december (value 11)
                        if (month > 11) {
                            month = month % 12;
                            year++;
                        }
                        day = Math.min(day, getMonthDays(year, month));
                        result.setFullYear(year, month, day);
                        return result;
                    }
                    dateUtils.addMonths = addMonths;
                    /**
                     * Adds a specified number of weeks to the provided date.
                     * @param date - date value
                     * @param weeks - number of weeks to add
                     */
                    function addWeeks(date, weeks) {
                        return addDays(date, weeks * 7);
                    }
                    dateUtils.addWeeks = addWeeks;
                    /**
                     * Adds a specified number of days to the provided date.
                     * @param date - date value
                     * @param days - number of days to add
                     */
                    function addDays(date, days) {
                        var year = date.getFullYear();
                        var month = date.getMonth();
                        var day = date.getDate();
                        var result = new Date(date.getTime());
                        result.setFullYear(year, month, day + days);
                        return result;
                    }
                    dateUtils.addDays = addDays;
                    /**
                     * Adds a specified number of hours to the provided date.
                     * @param date - date value
                     * @param hours - number of hours to add
                     */
                    function addHours(date, hours) {
                        return new Date(date.getTime() + hours * 3600000);
                    }
                    dateUtils.addHours = addHours;
                    /**
                     * Adds a specified number of minutes to the provided date.
                     * @param date - date value
                     * @param minutes - number of minutes to add
                     */
                    function addMinutes(date, minutes) {
                        return new Date(date.getTime() + minutes * 60000);
                    }
                    dateUtils.addMinutes = addMinutes;
                    /**
                     * Adds a specified number of seconds to the provided date.
                     * @param date - date value
                     * @param seconds - number of seconds to add
                     */
                    function addSeconds(date, seconds) {
                        return new Date(date.getTime() + seconds * 1000);
                    }
                    dateUtils.addSeconds = addSeconds;
                    /**
                     * Adds a specified number of milliseconds to the provided date.
                     * @param date - date value
                     * @param milliseconds - number of milliseconds to add
                     */
                    function addMilliseconds(date, milliseconds) {
                        return new Date(date.getTime() + milliseconds);
                    }
                    dateUtils.addMilliseconds = addMilliseconds;
                })(dateUtils = formatting.dateUtils || (formatting.dateUtils = {}));
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                // powerbi.extensibility.utils.type
                var NumericSequenceRange = powerbi.extensibility.utils.type.NumericSequenceRange;
                var NumericSequence = powerbi.extensibility.utils.type.NumericSequence;
                var Double = powerbi.extensibility.utils.type.Double;
                // powerbi.extensibility.utils.formatting
                var DateTimeUnit = powerbi.extensibility.utils.formatting.DateTimeUnit;
                /** Repreasents the sequence of the dates/times */
                var DateTimeSequence = (function () {
                    // Constructors
                    /** Creates new instance of the DateTimeSequence */
                    function DateTimeSequence(unit) {
                        this.unit = unit;
                        this.sequence = [];
                        this.min = new Date("9999-12-31T23:59:59.999");
                        this.max = new Date("0001-01-01T00:00:00.000");
                    }
                    // Methods
                    /**
                     * Add a new Date to a sequence.
                     * @param date - date to add
                     */
                    DateTimeSequence.prototype.add = function (date) {
                        if (date < this.min) {
                            this.min = date;
                        }
                        if (date > this.max) {
                            this.max = date;
                        }
                        this.sequence.push(date);
                    };
                    // Methods
                    /**
                     * Extends the sequence to cover new date range
                     * @param min - new min to be covered by sequence
                     * @param max - new max to be covered by sequence
                     */
                    DateTimeSequence.prototype.extendToCover = function (min, max) {
                        var x = this.min;
                        while (min < x) {
                            x = DateTimeSequence.addInterval(x, -this.interval, this.unit);
                            this.sequence.splice(0, 0, x);
                        }
                        this.min = x;
                        x = this.max;
                        while (x < max) {
                            x = DateTimeSequence.addInterval(x, this.interval, this.unit);
                            this.sequence.push(x);
                        }
                        this.max = x;
                    };
                    /**
                     * Move the sequence to cover new date range
                     * @param min - new min to be covered by sequence
                     * @param max - new max to be covered by sequence
                     */
                    DateTimeSequence.prototype.moveToCover = function (min, max) {
                        var delta = DateTimeSequence.getDelta(min, max, this.unit);
                        var count = Math.floor(delta / this.interval);
                        this.min = DateTimeSequence.addInterval(this.min, count * this.interval, this.unit);
                        this.sequence = [];
                        this.sequence.push(this.min);
                        this.max = this.min;
                        while (this.max < max) {
                            this.max = DateTimeSequence.addInterval(this.max, this.interval, this.unit);
                            this.sequence.push(this.max);
                        }
                    };
                    // Static
                    /**
                     * Calculate a new DateTimeSequence
                     * @param dataMin - Date representing min of the data range
                     * @param dataMax - Date representing max of the data range
                     * @param expectedCount - expected number of intervals in the sequence
                     * @param unit - of the intervals in the sequence
                     */
                    DateTimeSequence.calculate = function (dataMin, dataMax, expectedCount, unit) {
                        if (!unit) {
                            unit = DateTimeSequence.getIntervalUnit(dataMin, dataMax, expectedCount);
                        }
                        switch (unit) {
                            case DateTimeUnit.Year:
                                return DateTimeSequence.calculateYears(dataMin, dataMax, expectedCount);
                            case DateTimeUnit.Month:
                                return DateTimeSequence.calculateMonths(dataMin, dataMax, expectedCount);
                            case DateTimeUnit.Week:
                                return DateTimeSequence.calculateWeeks(dataMin, dataMax, expectedCount);
                            case DateTimeUnit.Day:
                                return DateTimeSequence.calculateDays(dataMin, dataMax, expectedCount);
                            case DateTimeUnit.Hour:
                                return DateTimeSequence.calculateHours(dataMin, dataMax, expectedCount);
                            case DateTimeUnit.Minute:
                                return DateTimeSequence.calculateMinutes(dataMin, dataMax, expectedCount);
                            case DateTimeUnit.Second:
                                return DateTimeSequence.calculateSeconds(dataMin, dataMax, expectedCount);
                            case DateTimeUnit.Millisecond:
                                return DateTimeSequence.calculateMilliseconds(dataMin, dataMax, expectedCount);
                        }
                    };
                    DateTimeSequence.calculateYears = function (dataMin, dataMax, expectedCount) {
                        // Calculate range and sequence
                        var yearsRange = NumericSequenceRange.calculateDataRange(dataMin.getFullYear(), dataMax.getFullYear(), false);
                        // Calculate year sequence
                        var sequence = NumericSequence.calculate(NumericSequenceRange.calculate(0, yearsRange.max - yearsRange.min), expectedCount, 0, null, null, [1, 2, 5]);
                        var newMinYear = Math.floor(yearsRange.min / sequence.interval) * sequence.interval;
                        var date = new Date(newMinYear, 0, 1);
                        // Convert to date sequence
                        var result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Year);
                        return result;
                    };
                    DateTimeSequence.calculateMonths = function (dataMin, dataMax, expectedCount) {
                        // Calculate range
                        var minYear = dataMin.getFullYear();
                        var maxYear = dataMax.getFullYear();
                        var minMonth = dataMin.getMonth();
                        var maxMonth = (maxYear - minYear) * 12 + dataMax.getMonth();
                        var date = new Date(minYear, 0, 1);
                        // Calculate month sequence
                        var sequence = NumericSequence.calculateUnits(minMonth, maxMonth, expectedCount, [1, 2, 3, 6, 12]);
                        // Convert to date sequence
                        var result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Month);
                        return result;
                    };
                    DateTimeSequence.calculateWeeks = function (dataMin, dataMax, expectedCount) {
                        var firstDayOfWeek = 0;
                        var minDayOfWeek = dataMin.getDay();
                        var dayOffset = (minDayOfWeek - firstDayOfWeek + 7) % 7;
                        var minDay = dataMin.getDate() - dayOffset;
                        // Calculate range
                        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), minDay);
                        var min = 0;
                        var max = Double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, DateTimeUnit.Week));
                        // Calculate week sequence
                        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 4, 8]);
                        // Convert to date sequence
                        var result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Week);
                        return result;
                    };
                    DateTimeSequence.calculateDays = function (dataMin, dataMax, expectedCount) {
                        // Calculate range
                        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate());
                        var min = 0;
                        var max = Double.ceilWithPrecision(DateTimeSequence.getDelta(dataMin, dataMax, DateTimeUnit.Day));
                        // Calculate day sequence
                        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 7, 14]);
                        // Convert to date sequence
                        var result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Day);
                        return result;
                    };
                    DateTimeSequence.calculateHours = function (dataMin, dataMax, expectedCount) {
                        // Calculate range
                        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate());
                        var min = Double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, DateTimeUnit.Hour));
                        var max = Double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, DateTimeUnit.Hour));
                        // Calculate hour sequence
                        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 3, 6, 12, 24]);
                        // Convert to date sequence
                        var result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Hour);
                        return result;
                    };
                    DateTimeSequence.calculateMinutes = function (dataMin, dataMax, expectedCount) {
                        // Calculate range
                        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours());
                        var min = Double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, DateTimeUnit.Minute));
                        var max = Double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, DateTimeUnit.Minute));
                        // Calculate minutes numeric sequence
                        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 5, 10, 15, 30, 60, 60 * 2, 60 * 3, 60 * 6, 60 * 12, 60 * 24]);
                        // Convert to date sequence
                        var result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Minute);
                        return result;
                    };
                    DateTimeSequence.calculateSeconds = function (dataMin, dataMax, expectedCount) {
                        // Calculate range
                        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes());
                        var min = Double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, DateTimeUnit.Second));
                        var max = Double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, DateTimeUnit.Second));
                        // Calculate minutes numeric sequence
                        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 5, 10, 15, 30, 60, 60 * 2, 60 * 5, 60 * 10, 60 * 15, 60 * 30, 60 * 60]);
                        // Convert to date sequence
                        var result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Second);
                        return result;
                    };
                    DateTimeSequence.calculateMilliseconds = function (dataMin, dataMax, expectedCount) {
                        // Calculate range
                        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes(), dataMin.getSeconds());
                        var min = DateTimeSequence.getDelta(date, dataMin, DateTimeUnit.Millisecond);
                        var max = DateTimeSequence.getDelta(date, dataMax, DateTimeUnit.Millisecond);
                        // Calculate milliseconds numeric sequence
                        var sequence = NumericSequence.calculate(NumericSequenceRange.calculate(min, max), expectedCount, 0);
                        // Convert to date sequence
                        var result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Millisecond);
                        return result;
                    };
                    DateTimeSequence.addInterval = function (value, interval, unit) {
                        interval = Math.round(interval);
                        switch (unit) {
                            case DateTimeUnit.Year:
                                return formatting.dateUtils.addYears(value, interval);
                            case DateTimeUnit.Month:
                                return formatting.dateUtils.addMonths(value, interval);
                            case DateTimeUnit.Week:
                                return formatting.dateUtils.addWeeks(value, interval);
                            case DateTimeUnit.Day:
                                return formatting.dateUtils.addDays(value, interval);
                            case DateTimeUnit.Hour:
                                return formatting.dateUtils.addHours(value, interval);
                            case DateTimeUnit.Minute:
                                return formatting.dateUtils.addMinutes(value, interval);
                            case DateTimeUnit.Second:
                                return formatting.dateUtils.addSeconds(value, interval);
                            case DateTimeUnit.Millisecond:
                                return formatting.dateUtils.addMilliseconds(value, interval);
                        }
                    };
                    DateTimeSequence.fromNumericSequence = function (date, sequence, unit) {
                        var result = new DateTimeSequence(unit);
                        for (var i = 0; i < sequence.sequence.length; i++) {
                            var x = sequence.sequence[i];
                            var d = DateTimeSequence.addInterval(date, x, unit);
                            result.add(d);
                        }
                        result.interval = sequence.interval;
                        result.intervalOffset = sequence.intervalOffset;
                        return result;
                    };
                    DateTimeSequence.getDelta = function (min, max, unit) {
                        var delta = 0;
                        switch (unit) {
                            case DateTimeUnit.Year:
                                delta = max.getFullYear() - min.getFullYear();
                                break;
                            case DateTimeUnit.Month:
                                delta = (max.getFullYear() - min.getFullYear()) * 12 + max.getMonth() - min.getMonth();
                                break;
                            case DateTimeUnit.Week:
                                delta = (max.getTime() - min.getTime()) / (7 * 24 * 3600000);
                                break;
                            case DateTimeUnit.Day:
                                delta = (max.getTime() - min.getTime()) / (24 * 3600000);
                                break;
                            case DateTimeUnit.Hour:
                                delta = (max.getTime() - min.getTime()) / 3600000;
                                break;
                            case DateTimeUnit.Minute:
                                delta = (max.getTime() - min.getTime()) / 60000;
                                break;
                            case DateTimeUnit.Second:
                                delta = (max.getTime() - min.getTime()) / 1000;
                                break;
                            case DateTimeUnit.Millisecond:
                                delta = max.getTime() - min.getTime();
                                break;
                        }
                        return delta;
                    };
                    DateTimeSequence.getIntervalUnit = function (min, max, maxCount) {
                        maxCount = Math.max(maxCount, 2);
                        var totalDays = DateTimeSequence.getDelta(min, max, DateTimeUnit.Day);
                        if (totalDays > 356 && totalDays >= 30 * 6 * maxCount)
                            return DateTimeUnit.Year;
                        if (totalDays > 60 && totalDays > 7 * maxCount)
                            return DateTimeUnit.Month;
                        if (totalDays > 14 && totalDays > 2 * maxCount)
                            return DateTimeUnit.Week;
                        var totalHours = DateTimeSequence.getDelta(min, max, DateTimeUnit.Hour);
                        if (totalDays > 2 && totalHours > 12 * maxCount)
                            return DateTimeUnit.Day;
                        if (totalHours >= 24 && totalHours >= maxCount)
                            return DateTimeUnit.Hour;
                        var totalMinutes = DateTimeSequence.getDelta(min, max, DateTimeUnit.Minute);
                        if (totalMinutes > 2 && totalMinutes >= maxCount)
                            return DateTimeUnit.Minute;
                        var totalSeconds = DateTimeSequence.getDelta(min, max, DateTimeUnit.Second);
                        if (totalSeconds > 2 && totalSeconds >= 0.8 * maxCount)
                            return DateTimeUnit.Second;
                        var totalMilliseconds = DateTimeSequence.getDelta(min, max, DateTimeUnit.Millisecond);
                        if (totalMilliseconds > 0)
                            return DateTimeUnit.Millisecond;
                        // If the size of the range is 0 we need to guess the unit based on the date's non-zero values starting with milliseconds
                        var date = min;
                        if (date.getMilliseconds() !== 0)
                            return DateTimeUnit.Millisecond;
                        if (date.getSeconds() !== 0)
                            return DateTimeUnit.Second;
                        if (date.getMinutes() !== 0)
                            return DateTimeUnit.Minute;
                        if (date.getHours() !== 0)
                            return DateTimeUnit.Hour;
                        if (date.getDate() !== 1)
                            return DateTimeUnit.Day;
                        if (date.getMonth() !== 0)
                            return DateTimeUnit.Month;
                        return DateTimeUnit.Year;
                    };
                    // Constants
                    DateTimeSequence.MIN_COUNT = 1;
                    DateTimeSequence.MAX_COUNT = 1000;
                    return DateTimeSequence;
                }());
                formatting.DateTimeSequence = DateTimeSequence;
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                var regexCache;
                /**
                 * Translate .NET format into something supported by jQuery.Globalize.
                 */
                function findDateFormat(value, format, cultureName) {
                    switch (format) {
                        case "m":
                            // Month + day
                            format = "M";
                            break;
                        case "O":
                        case "o":
                            // Roundtrip
                            format = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'0000'";
                            break;
                        case "R":
                        case "r":
                            // RFC1123 pattern - - time must be converted to UTC before formatting 
                            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());
                            format = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
                            break;
                        case "s":
                            // Sortable - should use invariant culture
                            format = "S";
                            break;
                        case "u":
                            // Universal sortable - should convert to UTC before applying the "yyyy'-'MM'-'dd HH':'mm':'ss'Z' format.
                            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());
                            format = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
                            break;
                        case "U":
                            // Universal full - the pattern is same as F but the time must be converted to UTC before formatting
                            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());
                            format = "F";
                            break;
                        case "y":
                        case "Y":
                            // Year and month
                            switch (cultureName) {
                                case "default":
                                case "en":
                                case "en-US":
                                    format = "MMMM, yyyy"; // Fix the default year-month pattern for english
                                    break;
                                default:
                                    format = "Y"; // For other cultures - use the localized pattern
                            }
                            break;
                    }
                    return { value: value, format: format };
                }
                formatting.findDateFormat = findDateFormat;
                /**
                 * Translates unsupported .NET custom format expressions to the custom expressions supported by JQuery.Globalize.
                 */
                function fixDateTimeFormat(format) {
                    // Fix for the "K" format (timezone): 
                    // T he js dates don't have a kind property so we'll support only local kind which is equavalent to zzz format.
                    format = format.replace(/%K/g, "zzz");
                    format = format.replace(/K/g, "zzz");
                    format = format.replace(/fffffff/g, "fff0000");
                    format = format.replace(/ffffff/g, "fff000");
                    format = format.replace(/fffff/g, "fff00");
                    format = format.replace(/ffff/g, "fff0");
                    // Fix for the 5 digit year: "yyyyy" format. 
                    // The Globalize doesn't support dates greater than 9999 so we replace the "yyyyy" with "0yyyy".
                    format = format.replace(/yyyyy/g, "0yyyy");
                    // Fix for the 3 digit year: "yyy" format. 
                    // The Globalize doesn't support this formatting so we need to replace it with the 4 digit year "yyyy" format.
                    format = format.replace(/(^y|^)yyy(^y|$)/g, "yyyy");
                    if (!regexCache) {
                        // Creating Regexes for cases "Using single format specifier" 
                        // - http://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx#UsingSingleSpecifiers
                        // This is not supported from The Globalize.
                        // The case covers all single "%" lead specifier (like "%d" but not %dd) 
                        // The cases as single "%d" are filtered in if the bellow.
                        // (?!S) where S is the specifier make sure that we only one symbol for specifier.
                        regexCache = ["d", "f", "F", "g", "h", "H", "K", "m", "M", "s", "t", "y", "z", ":", "/"].map(function (s) {
                            return { r: new RegExp("\%" + s + "(?!" + s + ")", "g"), s: s };
                        });
                    }
                    if (format.indexOf("%") !== -1 && format.length > 2) {
                        for (var i = 0; i < regexCache.length; i++) {
                            format = format.replace(regexCache[i].r, regexCache[i].s);
                        }
                    }
                    return format;
                }
                formatting.fixDateTimeFormat = fixDateTimeFormat;
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                var font;
                (function (font_1) {
                    var FamilyInfo = (function () {
                        function FamilyInfo(families) {
                            this.families = families;
                        }
                        ;
                        Object.defineProperty(FamilyInfo.prototype, "family", {
                            /**
                             * Gets the first font "wf_" font family since it will always be loaded.
                             */
                            get: function () {
                                return this.getFamily();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        /**
                        * Gets the first font family that matches regex (if provided).
                        * Default regex looks for "wf_" fonts which are always loaded.
                        */
                        FamilyInfo.prototype.getFamily = function (regex) {
                            if (regex === void 0) { regex = /^wf_/; }
                            if (!this.families) {
                                return null;
                            }
                            return regex ? _.find(this.families, function (fontFamily) { return regex.test(fontFamily); }) : this.families[0];
                        };
                        Object.defineProperty(FamilyInfo.prototype, "css", {
                            /**
                             * Gets the CSS string for the "font-family" CSS attribute.
                             */
                            get: function () {
                                return this.getCSS();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        /**
                         * Gets the CSS string for the "font-family" CSS attribute.
                         */
                        FamilyInfo.prototype.getCSS = function () {
                            return this.families ? this.families.map((function (font) { return font.indexOf(" ") > 0 ? "'" + font + "'" : font; })).join(", ") : null;
                        };
                        return FamilyInfo;
                    }());
                    font_1.FamilyInfo = FamilyInfo;
                })(font = formatting.font || (formatting.font = {}));
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                var font;
                (function (font) {
                    font.fallbackFonts = ["helvetica", "arial", "sans-serif"];
                    font.Family = {
                        light: new font.FamilyInfo(font.fallbackFonts),
                        semilight: new font.FamilyInfo(font.fallbackFonts),
                        regular: new font.FamilyInfo(font.fallbackFonts),
                        semibold: new font.FamilyInfo(font.fallbackFonts),
                        bold: new font.FamilyInfo(font.fallbackFonts),
                        lightSecondary: new font.FamilyInfo(font.fallbackFonts),
                        regularSecondary: new font.FamilyInfo(font.fallbackFonts),
                        boldSecondary: new font.FamilyInfo(font.fallbackFonts)
                    };
                })(font = formatting.font || (formatting.font = {}));
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                // powerbi.extensibility.utils.type
                var Double = powerbi.extensibility.utils.type.Double;
                var RegExpExtensions = powerbi.extensibility.utils.type.RegExpExtensions;
                // powerbi.extensibility.utils.formatting
                var stringExtensions = powerbi.extensibility.utils.formatting.stringExtensions;
                var findDateFormat = powerbi.extensibility.utils.formatting.findDateFormat;
                var fixDateTimeFormat = powerbi.extensibility.utils.formatting.fixDateTimeFormat;
                var DateTimeUnit = powerbi.extensibility.utils.formatting.DateTimeUnit;
                /**
                 *  Creating a dummy module to declare cultureInfo string, so we could do a strongly typed usage in Visuals
                 */
                // declare module powerbi.common {
                //     let cultureInfo: string;
                // }
                /** Formatting Encoder */
                var formattingEncoder;
                (function (formattingEncoder) {
                    // quoted and escaped literal patterns
                    // NOTE: the final three cases match .NET behavior
                    var literalPatterns = [
                        "'[^']*'",
                        "\"[^\"]*\"",
                        "\\\\.",
                        "'[^']*$",
                        "\"[^\"]*$",
                        "\\\\$",
                    ];
                    var literalMatcher = new RegExp(literalPatterns.join("|"), "g");
                    // Unicode U+E000 - U+F8FF is a private area and so we can use the chars from the range to encode the escaped sequences
                    function removeLiterals(format) {
                        literalMatcher.lastIndex = 0;
                        // just in case consecutive non-literals have some meaning
                        return format.replace(literalMatcher, "\uE100");
                    }
                    formattingEncoder.removeLiterals = removeLiterals;
                    function preserveLiterals(format, literals) {
                        literalMatcher.lastIndex = 0;
                        for (;;) {
                            var match = literalMatcher.exec(format);
                            if (!match)
                                break;
                            var literal = match[0];
                            var literalOffset = literalMatcher.lastIndex - literal.length;
                            var token = String.fromCharCode(0xE100 + literals.length);
                            literals.push(literal);
                            format = format.substr(0, literalOffset) + token + format.substr(literalMatcher.lastIndex);
                            // back to avoid skipping due to removed literal substring
                            literalMatcher.lastIndex = literalOffset + 1;
                        }
                        return format;
                    }
                    formattingEncoder.preserveLiterals = preserveLiterals;
                    function restoreLiterals(format, literals, quoted) {
                        if (quoted === void 0) { quoted = true; }
                        var count = literals.length;
                        for (var i = 0; i < count; i++) {
                            var token = String.fromCharCode(0xE100 + i);
                            var literal = literals[i];
                            if (!quoted) {
                                // caller wants literals to be re-inserted without escaping
                                var firstChar = literal[0];
                                if (firstChar === "\\" || literal.length === 1 || literal[literal.length - 1] !== firstChar) {
                                    // either escaped literal OR quoted literal that's missing the trailing quote
                                    // in either case we only remove the leading character
                                    literal = literal.substring(1);
                                }
                                else {
                                    // so must be a quoted literal with both starting and ending quote
                                    literal = literal.substring(1, literal.length - 1);
                                }
                            }
                            format = format.replace(token, literal);
                        }
                        return format;
                    }
                    formattingEncoder.restoreLiterals = restoreLiterals;
                })(formattingEncoder || (formattingEncoder = {}));
                var IndexedTokensRegex = /({{)|(}})|{(\d+[^}]*)}/g;
                var ZeroPlaceholder = "0";
                var DigitPlaceholder = "#";
                var ExponentialFormatChar = "E";
                var NumericPlaceholders = [ZeroPlaceholder, DigitPlaceholder];
                var NumericPlaceholderRegex = new RegExp(NumericPlaceholders.join("|"), "g");
                /** Formatting Service */
                var FormattingService = (function () {
                    function FormattingService() {
                    }
                    FormattingService.prototype.formatValue = function (value, format, culture) {
                        // Handle special cases
                        if (value === undefined || value === null) {
                            return "";
                        }
                        var gculture = this.getCulture(culture);
                        if (dateTimeFormat.canFormat(value)) {
                            // Dates
                            return dateTimeFormat.format(value, format, gculture);
                        }
                        else if (numberFormat.canFormat(value)) {
                            // Numbers
                            return numberFormat.format(value, format, gculture);
                        }
                        else {
                            // Other data types - return as string
                            return value.toString();
                        }
                    };
                    FormattingService.prototype.format = function (formatWithIndexedTokens, args, culture) {
                        var _this = this;
                        if (!formatWithIndexedTokens) {
                            return "";
                        }
                        var result = formatWithIndexedTokens.replace(IndexedTokensRegex, function (match, left, right, argToken) {
                            if (left) {
                                return "{";
                            }
                            else if (right) {
                                return "}";
                            }
                            else {
                                var parts = argToken.split(":");
                                var argIndex = parseInt(parts[0], 10);
                                var argFormat = parts[1];
                                return _this.formatValue(args[argIndex], argFormat, culture);
                            }
                        });
                        return result;
                    };
                    FormattingService.prototype.isStandardNumberFormat = function (format) {
                        return numberFormat.isStandardFormat(format);
                    };
                    FormattingService.prototype.formatNumberWithCustomOverride = function (value, format, nonScientificOverrideFormat, culture) {
                        var gculture = this.getCulture(culture);
                        return numberFormat.formatWithCustomOverride(value, format, nonScientificOverrideFormat, gculture);
                    };
                    FormattingService.prototype.dateFormatString = function (unit) {
                        if (!this._dateTimeScaleFormatInfo)
                            this.initialize();
                        return this._dateTimeScaleFormatInfo.getFormatString(unit);
                    };
                    /**
                     * Sets the current localization culture
                     * @param cultureSelector - name of a culture: "en", "en-UK", "fr-FR" etc. (See National Language Support (NLS) for full lists. Use "default" for invariant culture).
                     */
                    FormattingService.prototype.setCurrentCulture = function (cultureSelector) {
                        if (this._currentCultureSelector !== cultureSelector) {
                            this._currentCulture = this.getCulture(cultureSelector);
                            this._currentCultureSelector = cultureSelector;
                            this._dateTimeScaleFormatInfo = new DateTimeScaleFormatInfo(this._currentCulture);
                        }
                    };
                    /**
                     * Gets the culture assotiated with the specified cultureSelector ("en", "en-US", "fr-FR" etc).
                     * @param cultureSelector - name of a culture: "en", "en-UK", "fr-FR" etc. (See National Language Support (NLS) for full lists. Use "default" for invariant culture).
                     * Exposing this function for testability of unsupported cultures
                     */
                    FormattingService.prototype.getCulture = function (cultureSelector) {
                        if (cultureSelector == null) {
                            if (this._currentCulture == null) {
                                this.initialize();
                            }
                            return this._currentCulture;
                        }
                        else {
                            var culture = Globalize.findClosestCulture(cultureSelector);
                            if (!culture)
                                culture = Globalize.culture("en-US");
                            return culture;
                        }
                    };
                    /** By default the Globalization module initializes to the culture/calendar provided in the language/culture URL params */
                    FormattingService.prototype.initialize = function () {
                        var cultureName = this.getCurrentCulture();
                        this.setCurrentCulture(cultureName);
                        var calendarName = this.getUrlParam("calendar");
                        if (calendarName) {
                            var culture = this._currentCulture;
                            var c = culture.calendars[calendarName];
                            if (c) {
                                culture.calendar = c;
                            }
                        }
                    };
                    /**
                     *  Exposing this function for testability
                     */
                    FormattingService.prototype.getCurrentCulture = function () {
                        var urlParam = this.getUrlParam("language");
                        if (urlParam) {
                            return urlParam;
                        }
                        if (powerbi && powerbi.common && powerbi.common.cultureInfo) {
                            // Get cultureInfo set in powerbi
                            return powerbi.common.cultureInfo;
                        }
                        return window.navigator.userLanguage || window.navigator["language"] || Globalize.culture().name;
                    };
                    /**
                     *  Exposing this function for testability
                     *  @param name: queryString name
                     */
                    FormattingService.prototype.getUrlParam = function (name) {
                        var param = window.location.search.match(RegExp("[?&]" + name + "=([^&]*)"));
                        return param ? param[1] : undefined;
                    };
                    return FormattingService;
                }());
                /**
                 * DateTimeFormat module contains the static methods for formatting the DateTimes.
                 * It extends the JQuery.Globalize functionality to support complete set of .NET
                 * formatting expressions for dates.
                 */
                var dateTimeFormat;
                (function (dateTimeFormat) {
                    var _currentCachedFormat;
                    var _currentCachedProcessedFormat;
                    /** Evaluates if the value can be formatted using the NumberFormat */
                    function canFormat(value) {
                        var result = value instanceof Date;
                        return result;
                    }
                    dateTimeFormat.canFormat = canFormat;
                    /** Formats the date using provided format and culture */
                    function format(value, format, culture) {
                        format = format || "G";
                        var isStandard = format.length === 1;
                        try {
                            if (isStandard) {
                                return formatDateStandard(value, format, culture);
                            }
                            else {
                                return formatDateCustom(value, format, culture);
                            }
                        }
                        catch (e) {
                            return formatDateStandard(value, "G", culture);
                        }
                    }
                    dateTimeFormat.format = format;
                    /** Formats the date using standard format expression */
                    function formatDateStandard(value, format, culture) {
                        // In order to provide parity with .NET we have to support additional set of DateTime patterns.
                        var patterns = culture.calendar.patterns;
                        // Extend supported set of patterns
                        ensurePatterns(culture.calendar);
                        // Handle extended set of formats
                        var output = findDateFormat(value, format, culture.name);
                        if (output.format.length === 1)
                            format = patterns[output.format];
                        else
                            format = output.format;
                        // need to revisit when globalization is enabled
                        culture = Globalize.culture("en-US");
                        return Globalize.format(output.value, format, culture);
                    }
                    /** Formats the date using custom format expression */
                    function formatDateCustom(value, format, culture) {
                        var result;
                        var literals = [];
                        format = formattingEncoder.preserveLiterals(format, literals);
                        if (format.indexOf("F") > -1) {
                            // F is not supported so we need to replace the F with f based on the milliseconds
                            // Replace all sequences of F longer than 3 with "FFF"
                            format = stringExtensions.replaceAll(format, "FFFF", "FFF");
                            // Based on milliseconds update the format to use fff
                            var milliseconds = value.getMilliseconds();
                            if (milliseconds % 10 >= 1) {
                                format = stringExtensions.replaceAll(format, "FFF", "fff");
                            }
                            format = stringExtensions.replaceAll(format, "FFF", "FF");
                            if ((milliseconds % 100) / 10 >= 1) {
                                format = stringExtensions.replaceAll(format, "FF", "ff");
                            }
                            format = stringExtensions.replaceAll(format, "FF", "F");
                            if ((milliseconds % 1000) / 100 >= 1) {
                                format = stringExtensions.replaceAll(format, "F", "f");
                            }
                            format = stringExtensions.replaceAll(format, "F", "");
                            if (format === "" || format === "%")
                                return "";
                        }
                        format = processCustomDateTimeFormat(format);
                        result = Globalize.format(value, format, culture);
                        result = localize(result, culture.calendar);
                        result = formattingEncoder.restoreLiterals(result, literals, false);
                        return result;
                    }
                    /** Translates unsupported .NET custom format expressions to the custom expressions supported by JQuery.Globalize */
                    function processCustomDateTimeFormat(format) {
                        if (format === _currentCachedFormat) {
                            return _currentCachedProcessedFormat;
                        }
                        _currentCachedFormat = format;
                        format = fixDateTimeFormat(format);
                        _currentCachedProcessedFormat = format;
                        return format;
                    }
                    /** Localizes the time separator symbol */
                    function localize(value, dictionary) {
                        var timeSeparator = dictionary[":"];
                        if (timeSeparator === ":") {
                            return value;
                        }
                        var result = "";
                        var count = value.length;
                        for (var i = 0; i < count; i++) {
                            var char = value.charAt(i);
                            switch (char) {
                                case ":":
                                    result += timeSeparator;
                                    break;
                                default:
                                    result += char;
                                    break;
                            }
                        }
                        return result;
                    }
                    function ensurePatterns(calendar) {
                        var patterns = calendar.patterns;
                        if (patterns["g"] === undefined) {
                            patterns["g"] = patterns["f"].replace(patterns["D"], patterns["d"]); // Generic: Short date, short time
                            patterns["G"] = patterns["F"].replace(patterns["D"], patterns["d"]); // Generic: Short date, long time
                        }
                    }
                })(dateTimeFormat || (dateTimeFormat = {}));
                /**
                 * NumberFormat module contains the static methods for formatting the numbers.
                 * It extends the JQuery.Globalize functionality to support complete set of .NET
                 * formatting expressions for numeric types including custom formats.
                 */
                var numberFormat;
                (function (numberFormat) {
                    var NonScientificFormatRegex = /^\{.+\}.*/;
                    var NumericalPlaceHolderRegex = /\{.+\}/;
                    var ScientificFormatRegex = /e[+-]*[0#]+/i;
                    var StandardFormatRegex = /^[a-z]\d{0,2}$/i; // a letter + up to 2 digits for precision specifier
                    var TrailingZerosRegex = /0+$/;
                    var DecimalFormatRegex = /\.([0#]*)/g;
                    var NumericFormatRegex = /[0#,\.]+[0,#]*/g;
                    // (?=...) is a positive lookahead assertion. The RE is asking for the last digit placeholder, [0#],
                    // which is followed by non-digit placeholders and the end of string, [^0#]*$. But it only matches
                    // the last digit placeholder, not anything that follows because the positive lookahead isn"t included
                    // in the match - it is only a condition.
                    var LastNumericPlaceholderRegex = /([0#])(?=[^0#]*$)/;
                    var DecimalFormatCharacter = ".";
                    numberFormat.NumberFormatComponentsDelimeter = ";";
                    function getNonScientificFormatWithPrecision(baseFormat, numericFormat) {
                        if (!numericFormat || baseFormat === undefined)
                            return baseFormat;
                        var newFormat = "{0:" + numericFormat + "}";
                        return baseFormat.replace("{0}", newFormat);
                    }
                    function getNumericFormat(value, baseFormat) {
                        if (baseFormat == null)
                            return baseFormat;
                        if (hasFormatComponents(baseFormat)) {
                            var _a = numberFormat.getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero;
                            if (value > 0)
                                return getNumericFormatFromComponent(value, positive);
                            else if (value === 0)
                                return getNumericFormatFromComponent(value, zero);
                            return getNumericFormatFromComponent(value, negative);
                        }
                        return getNumericFormatFromComponent(value, baseFormat);
                    }
                    numberFormat.getNumericFormat = getNumericFormat;
                    function getNumericFormatFromComponent(value, format) {
                        var match = RegExpExtensions.run(NumericFormatRegex, format);
                        if (match)
                            return match[0];
                        return format;
                    }
                    function addDecimalsToFormat(baseFormat, decimals, trailingZeros) {
                        if (decimals == null)
                            return baseFormat;
                        // Default format string
                        if (baseFormat == null)
                            baseFormat = ZeroPlaceholder;
                        if (hasFormatComponents(baseFormat)) {
                            var _a = numberFormat.getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero;
                            var formats = [positive, negative, zero];
                            for (var i = 0; i < formats.length; i++) {
                                // Update format in formats array
                                formats[i] = addDecimalsToFormatComponent(formats[i], decimals, trailingZeros);
                            }
                            return formats.join(numberFormat.NumberFormatComponentsDelimeter);
                        }
                        return addDecimalsToFormatComponent(baseFormat, decimals, trailingZeros);
                    }
                    numberFormat.addDecimalsToFormat = addDecimalsToFormat;
                    function addDecimalsToFormatComponent(format, decimals, trailingZeros) {
                        decimals = Math.abs(decimals);
                        if (decimals >= 0) {
                            var literals = [];
                            format = formattingEncoder.preserveLiterals(format, literals);
                            var placeholder = trailingZeros ? ZeroPlaceholder : DigitPlaceholder;
                            var decimalPlaceholders = stringExtensions.repeat(placeholder, Math.abs(decimals));
                            var match = RegExpExtensions.run(DecimalFormatRegex, format);
                            if (match) {
                                var beforeDecimal = format.substr(0, match.index);
                                var formatDecimal = format.substr(match.index + 1, match[1].length);
                                var afterDecimal = format.substr(match.index + match[0].length);
                                if (trailingZeros)
                                    // Use explicit decimals argument as placeholders
                                    formatDecimal = decimalPlaceholders;
                                else {
                                    var decimalChange = decimalPlaceholders.length - formatDecimal.length;
                                    if (decimalChange > 0)
                                        // Append decimalPlaceholders to existing decimal portion of format string
                                        formatDecimal = formatDecimal + decimalPlaceholders.slice(-decimalChange);
                                    else if (decimalChange < 0)
                                        // Remove decimals from formatDecimal
                                        formatDecimal = formatDecimal.slice(0, decimalChange);
                                }
                                if (formatDecimal.length > 0)
                                    formatDecimal = DecimalFormatCharacter + formatDecimal;
                                format = beforeDecimal + formatDecimal + afterDecimal;
                            }
                            else if (decimalPlaceholders.length > 0) {
                                // Replace last numeric placeholder with decimal portion
                                format = format.replace(LastNumericPlaceholderRegex, "$1" + DecimalFormatCharacter + decimalPlaceholders);
                            }
                            if (literals.length !== 0)
                                format = formattingEncoder.restoreLiterals(format, literals);
                        }
                        return format;
                    }
                    function hasFormatComponents(format) {
                        return formattingEncoder.removeLiterals(format).indexOf(numberFormat.NumberFormatComponentsDelimeter) !== -1;
                    }
                    numberFormat.hasFormatComponents = hasFormatComponents;
                    function getComponents(format) {
                        var signFormat = {
                            hasNegative: false,
                            positive: format,
                            negative: format,
                            zero: format,
                        };
                        // escape literals so semi-colon in a literal isn't interpreted as a delimiter
                        // NOTE: OK to use the literals extracted here for all three components before since the literals are indexed.
                        // For example, "'pos-lit';'neg-lit'" will get preserved as "\uE000;\uE001" and the literal array will be
                        // ['pos-lit', 'neg-lit']. When the negative components is restored, its \uE001 will select the second
                        // literal.
                        var literals = [];
                        format = formattingEncoder.preserveLiterals(format, literals);
                        var signSpecificFormats = format.split(numberFormat.NumberFormatComponentsDelimeter);
                        var formatCount = signSpecificFormats.length;
                        if (formatCount > 1) {
                            if (literals.length !== 0)
                                signSpecificFormats = _.map(signSpecificFormats, function (signSpecificFormat) { return formattingEncoder.restoreLiterals(signSpecificFormat, literals); });
                            signFormat.hasNegative = true;
                            signFormat.positive = signFormat.zero = signSpecificFormats[0];
                            signFormat.negative = signSpecificFormats[1];
                            if (formatCount > 2)
                                signFormat.zero = signSpecificFormats[2];
                        }
                        return signFormat;
                    }
                    numberFormat.getComponents = getComponents;
                    var _lastCustomFormatMeta;
                    /** Evaluates if the value can be formatted using the NumberFormat */
                    function canFormat(value) {
                        var result = typeof (value) === "number";
                        return result;
                    }
                    numberFormat.canFormat = canFormat;
                    function isStandardFormat(format) {
                        return StandardFormatRegex.test(format);
                    }
                    numberFormat.isStandardFormat = isStandardFormat;
                    /** Formats the number using specified format expression and culture */
                    function format(value, format, culture) {
                        format = format || "G";
                        try {
                            if (isStandardFormat(format))
                                return formatNumberStandard(value, format, culture);
                            return formatNumberCustom(value, format, culture);
                        }
                        catch (e) {
                            return Globalize.format(value, undefined, culture);
                        }
                    }
                    numberFormat.format = format;
                    /** Performs a custom format with a value override.  Typically used for custom formats showing scaled values. */
                    function formatWithCustomOverride(value, format, nonScientificOverrideFormat, culture) {
                        return formatNumberCustom(value, format, culture, nonScientificOverrideFormat);
                    }
                    numberFormat.formatWithCustomOverride = formatWithCustomOverride;
                    /** Formats the number using standard format expression */
                    function formatNumberStandard(value, format, culture) {
                        var result;
                        var precision = (format.length > 1 ? parseInt(format.substr(1, format.length - 1), 10) : undefined);
                        var numberFormatInfo = culture.numberFormat;
                        var formatChar = format.charAt(0);
                        switch (formatChar) {
                            case "e":
                            case "E":
                                if (precision === undefined) {
                                    precision = 6;
                                }
                                var mantissaDecimalDigits = stringExtensions.repeat("0", precision);
                                format = "0." + mantissaDecimalDigits + formatChar + "+000";
                                result = formatNumberCustom(value, format, culture);
                                break;
                            case "f":
                            case "F":
                                result = precision !== undefined ? value.toFixed(precision) : value.toFixed(numberFormatInfo.decimals);
                                result = localize(result, numberFormatInfo);
                                break;
                            case "g":
                            case "G":
                                var abs = Math.abs(value);
                                if (abs === 0 || (1E-4 <= abs && abs < 1E15)) {
                                    // For the range of 0.0001 to 1,000,000,000,000,000 - use the normal form
                                    result = precision !== undefined ? value.toPrecision(precision) : value.toString();
                                }
                                else {
                                    // Otherwise use exponential
                                    // Assert that value is a number and fall back on returning value if it is not
                                    if (typeof (value) !== "number")
                                        return String(value);
                                    result = precision !== undefined ? value.toExponential(precision) : value.toExponential();
                                    result = result.replace("e", "E");
                                }
                                result = localize(result, numberFormatInfo);
                                break;
                            case "r":
                            case "R":
                                result = value.toString();
                                result = localize(result, numberFormatInfo);
                                break;
                            case "x":
                            case "X":
                                result = value.toString(16);
                                if (formatChar === "X") {
                                    result = result.toUpperCase();
                                }
                                if (precision !== undefined) {
                                    var actualPrecision = result.length;
                                    var isNegative = value < 0;
                                    if (isNegative) {
                                        actualPrecision--;
                                    }
                                    var paddingZerosCount = precision - actualPrecision;
                                    var paddingZeros = undefined;
                                    if (paddingZerosCount > 0) {
                                        paddingZeros = stringExtensions.repeat("0", paddingZerosCount);
                                    }
                                    if (isNegative) {
                                        result = "-" + paddingZeros + result.substr(1);
                                    }
                                    else {
                                        result = paddingZeros + result;
                                    }
                                }
                                result = localize(result, numberFormatInfo);
                                break;
                            default:
                                result = Globalize.format(value, format, culture);
                        }
                        return result;
                    }
                    /** Formats the number using custom format expression */
                    function formatNumberCustom(value, format, culture, nonScientificOverrideFormat) {
                        var result;
                        var numberFormatInfo = culture.numberFormat;
                        if (isFinite(value)) {
                            // Split format by positive[;negative;zero] pattern
                            var formatComponents = getComponents(format);
                            // Pick a format based on the sign of value
                            if (value > 0) {
                                format = formatComponents.positive;
                            }
                            else if (value === 0) {
                                format = formatComponents.zero;
                            }
                            else {
                                format = formatComponents.negative;
                            }
                            // Normalize value if we have an explicit negative format
                            if (formatComponents.hasNegative)
                                value = Math.abs(value);
                            // Get format metadata
                            var formatMeta = getCustomFormatMetadata(format, true /*calculatePrecision*/);
                            // Preserve literals and escaped chars
                            var literals = [];
                            if (formatMeta.hasLiterals) {
                                format = formattingEncoder.preserveLiterals(format, literals);
                            }
                            // Scientific format
                            if (formatMeta.hasE && !nonScientificOverrideFormat) {
                                var scientificMatch = RegExpExtensions.run(ScientificFormatRegex, format);
                                if (scientificMatch) {
                                    // Case 2.1. Scientific custom format
                                    var formatM = format.substr(0, scientificMatch.index);
                                    var formatE = format.substr(scientificMatch.index + 2); // E(+|-)
                                    var precision = getCustomFormatPrecision(formatM, formatMeta);
                                    var scale = getCustomFormatScale(formatM, formatMeta);
                                    if (scale !== 1) {
                                        value = value * scale;
                                    }
                                    // Assert that value is a number and fall back on returning value if it is not
                                    if (typeof (value) !== "number")
                                        return String(value);
                                    var s = value.toExponential(precision);
                                    var indexOfE = s.indexOf("e");
                                    var mantissa = s.substr(0, indexOfE);
                                    var exp = s.substr(indexOfE + 1);
                                    var resultM = fuseNumberWithCustomFormat(mantissa, formatM, numberFormatInfo);
                                    var resultE = fuseNumberWithCustomFormat(exp, formatE, numberFormatInfo);
                                    if (resultE.charAt(0) === "+" && scientificMatch[0].charAt(1) !== "+") {
                                        resultE = resultE.substr(1);
                                    }
                                    var e = scientificMatch[0].charAt(0);
                                    result = resultM + e + resultE;
                                }
                            }
                            // Non scientific format
                            if (result === undefined) {
                                var valueFormatted = void 0;
                                var isValueGlobalized = false;
                                var precision = getCustomFormatPrecision(format, formatMeta);
                                var scale = getCustomFormatScale(format, formatMeta);
                                if (scale !== 1)
                                    value = value * scale;
                                // Rounding
                                value = parseFloat(toNonScientific(value, precision));
                                if (!isFinite(value)) {
                                    // very large and small finite values can become infinite by parseFloat(toNonScientific())
                                    return Globalize.format(value, undefined);
                                }
                                if (nonScientificOverrideFormat) {
                                    // Get numeric format from format string
                                    var numericFormat = numberFormat.getNumericFormat(value, format);
                                    // Add separators and decimalFormat to nonScientificFormat
                                    nonScientificOverrideFormat = getNonScientificFormatWithPrecision(nonScientificOverrideFormat, numericFormat);
                                    // Format the value
                                    valueFormatted = formatting.formattingService.format(nonScientificOverrideFormat, [value], culture.name);
                                    isValueGlobalized = true;
                                }
                                else
                                    valueFormatted = toNonScientific(value, precision);
                                result = fuseNumberWithCustomFormat(valueFormatted, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized);
                            }
                            if (formatMeta.hasLiterals) {
                                result = formattingEncoder.restoreLiterals(result, literals, false);
                            }
                            _lastCustomFormatMeta = formatMeta;
                        }
                        else {
                            return Globalize.format(value, undefined);
                        }
                        return result;
                    }
                    /** Returns string with the fixed point respresentation of the number */
                    function toNonScientific(value, precision) {
                        var result = "";
                        var precisionZeros = 0;
                        // Double precision numbers support actual 15-16 decimal digits of precision.
                        if (precision > 16) {
                            precisionZeros = precision - 16;
                            precision = 16;
                        }
                        var digitsBeforeDecimalPoint = Double.log10(Math.abs(value));
                        if (digitsBeforeDecimalPoint < 16) {
                            if (digitsBeforeDecimalPoint > 0) {
                                var maxPrecision = 16 - digitsBeforeDecimalPoint;
                                if (precision > maxPrecision) {
                                    precisionZeros += precision - maxPrecision;
                                    precision = maxPrecision;
                                }
                            }
                            result = value.toFixed(precision);
                        }
                        else if (digitsBeforeDecimalPoint === 16) {
                            result = value.toFixed(0);
                            precisionZeros += precision;
                            if (precisionZeros > 0) {
                                result += ".";
                            }
                        }
                        else {
                            // Different browsers have different implementations of the toFixed().
                            // In IE it returns fixed format no matter what's the number. In FF and Chrome the method returns exponential format for numbers greater than 1E21.
                            // So we need to check for range and convert the to exponential with the max precision.
                            // Then we convert exponential string to fixed by removing the dot and padding with "power" zeros.
                            // Assert that value is a number and fall back on returning value if it is not
                            if (typeof (value) !== "number")
                                return String(value);
                            result = value.toExponential(15);
                            var indexOfE = result.indexOf("e");
                            if (indexOfE > 0) {
                                var indexOfDot = result.indexOf(".");
                                var mantissa = result.substr(0, indexOfE);
                                var exp = result.substr(indexOfE + 1);
                                var powerZeros = parseInt(exp, 10) - (mantissa.length - indexOfDot - 1);
                                result = mantissa.replace(".", "") + stringExtensions.repeat("0", powerZeros);
                                if (precision > 0) {
                                    result = result + "." + stringExtensions.repeat("0", precision);
                                }
                            }
                        }
                        if (precisionZeros > 0) {
                            result = result + stringExtensions.repeat("0", precisionZeros);
                        }
                        return result;
                    }
                    /**
                     * Returns the formatMetadata of the format
                     * When calculating precision and scale, if format string of
                     * positive[;negative;zero] => positive format will be used
                     * @param (required) format - format string
                     * @param (optional) calculatePrecision - calculate precision of positive format
                     * @param (optional) calculateScale - calculate scale of positive format
                     */
                    function getCustomFormatMetadata(format, calculatePrecision, calculateScale, calculatePartsPerScale) {
                        if (_lastCustomFormatMeta !== undefined && format === _lastCustomFormatMeta.format) {
                            return _lastCustomFormatMeta;
                        }
                        var literals = [];
                        var escaped = formattingEncoder.preserveLiterals(format, literals);
                        var result = {
                            format: format,
                            hasLiterals: literals.length !== 0,
                            hasE: false,
                            hasCommas: false,
                            hasDots: false,
                            hasPercent: false,
                            hasPermile: false,
                            precision: undefined,
                            scale: undefined,
                            partsPerScale: undefined,
                        };
                        for (var i = 0, length_1 = escaped.length; i < length_1; i++) {
                            var c = escaped.charAt(i);
                            switch (c) {
                                case "e":
                                case "E":
                                    result.hasE = true;
                                    break;
                                case ",":
                                    result.hasCommas = true;
                                    break;
                                case ".":
                                    result.hasDots = true;
                                    break;
                                case "%":
                                    result.hasPercent = true;
                                    break;
                                case "\u2030":
                                    result.hasPermile = true;
                                    break;
                            }
                        }
                        // Use positive format for calculating these values
                        var formatComponents = getComponents(format);
                        if (calculatePrecision)
                            result.precision = getCustomFormatPrecision(formatComponents.positive, result);
                        if (calculatePartsPerScale)
                            result.partsPerScale = getCustomFormatPartsPerScale(formatComponents.positive, result);
                        if (calculateScale)
                            result.scale = getCustomFormatScale(formatComponents.positive, result);
                        return result;
                    }
                    numberFormat.getCustomFormatMetadata = getCustomFormatMetadata;
                    /** Returns the decimal precision of format based on the number of # and 0 chars after the decimal point
                      * Important: The input format string needs to be split to the appropriate pos/neg/zero portion to work correctly */
                    function getCustomFormatPrecision(format, formatMeta) {
                        if (formatMeta.precision > -1) {
                            return formatMeta.precision;
                        }
                        var result = 0;
                        if (formatMeta.hasDots) {
                            if (formatMeta.hasLiterals) {
                                format = formattingEncoder.removeLiterals(format);
                            }
                            var dotIndex = format.indexOf(".");
                            if (dotIndex > -1) {
                                var count = format.length;
                                for (var i = dotIndex; i < count; i++) {
                                    var char = format.charAt(i);
                                    if (char.match(NumericPlaceholderRegex))
                                        result++;
                                    // 0.00E+0 :: Break before counting 0 in
                                    // exponential portion of format string
                                    if (char === ExponentialFormatChar)
                                        break;
                                }
                                result = Math.min(19, result);
                            }
                        }
                        formatMeta.precision = result;
                        return result;
                    }
                    function getCustomFormatPartsPerScale(format, formatMeta) {
                        if (formatMeta.partsPerScale != null)
                            return formatMeta.partsPerScale;
                        var result = 1;
                        if (formatMeta.hasPercent && format.indexOf("%") > -1) {
                            result = result * 100;
                        }
                        if (formatMeta.hasPermile && format.indexOf(/* ‰ */ "\u2030") > -1) {
                            result = result * 1000;
                        }
                        formatMeta.partsPerScale = result;
                        return result;
                    }
                    /** Returns the scale factor of the format based on the "%" and scaling "," chars in the format */
                    function getCustomFormatScale(format, formatMeta) {
                        if (formatMeta.scale > -1) {
                            return formatMeta.scale;
                        }
                        var result = getCustomFormatPartsPerScale(format, formatMeta);
                        if (formatMeta.hasCommas) {
                            var dotIndex = format.indexOf(".");
                            if (dotIndex === -1) {
                                dotIndex = format.length;
                            }
                            for (var i = dotIndex - 1; i > -1; i--) {
                                var char = format.charAt(i);
                                if (char === ",") {
                                    result = result / 1000;
                                }
                                else {
                                    break;
                                }
                            }
                        }
                        formatMeta.scale = result;
                        return result;
                    }
                    function fuseNumberWithCustomFormat(value, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized) {
                        var suppressModifyValue = !!nonScientificOverrideFormat;
                        var formatParts = format.split(".", 2);
                        if (formatParts.length === 2) {
                            var wholeFormat = formatParts[0];
                            var fractionFormat = formatParts[1];
                            var displayUnit = "";
                            // Remove display unit from value before splitting on "." as localized display units sometimes end with "."
                            if (nonScientificOverrideFormat) {
                                displayUnit = nonScientificOverrideFormat.replace(NumericalPlaceHolderRegex, "");
                                value = value.replace(displayUnit, "");
                            }
                            var globalizedDecimalSeparator = numberFormatInfo["."];
                            var decimalSeparator = isValueGlobalized ? globalizedDecimalSeparator : ".";
                            var valueParts = value.split(decimalSeparator, 2);
                            var wholeValue = valueParts.length === 1 ? valueParts[0] + displayUnit : valueParts[0];
                            var fractionValue = valueParts.length === 2 ? valueParts[1] + displayUnit : "";
                            fractionValue = fractionValue.replace(TrailingZerosRegex, "");
                            var wholeFormattedValue = fuseNumberWithCustomFormatLeft(wholeValue, wholeFormat, numberFormatInfo, suppressModifyValue);
                            var fractionFormattedValue = fuseNumberWithCustomFormatRight(fractionValue, fractionFormat, suppressModifyValue);
                            if (fractionFormattedValue.fmtOnly || fractionFormattedValue.value === "")
                                return wholeFormattedValue + fractionFormattedValue.value;
                            return wholeFormattedValue + globalizedDecimalSeparator + fractionFormattedValue.value;
                        }
                        return fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue);
                    }
                    function fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue) {
                        var groupSymbolIndex = format.indexOf(",");
                        var enableGroups = groupSymbolIndex > -1 && groupSymbolIndex < Math.max(format.lastIndexOf("0"), format.lastIndexOf("#")) && numberFormatInfo[","];
                        var groupDigitCount = 0;
                        var groupIndex = 0;
                        var groupSizes = numberFormatInfo.groupSizes || [3];
                        var groupSize = groupSizes[0];
                        var groupSeparator = numberFormatInfo[","];
                        var sign = "";
                        var firstChar = value.charAt(0);
                        if (firstChar === "+" || firstChar === "-") {
                            sign = numberFormatInfo[firstChar];
                            value = value.substr(1);
                        }
                        var isZero = value === "0";
                        var result = "";
                        var leftBuffer = "";
                        var vi = value.length - 1;
                        var fmtOnly = true;
                        // Iterate through format chars and replace 0 and # with the digits from the value string
                        for (var fi = format.length - 1; fi > -1; fi--) {
                            var formatChar = format.charAt(fi);
                            switch (formatChar) {
                                case ZeroPlaceholder:
                                case DigitPlaceholder:
                                    fmtOnly = false;
                                    if (leftBuffer !== "") {
                                        result = leftBuffer + result;
                                        leftBuffer = "";
                                    }
                                    if (!suppressModifyValue) {
                                        if (vi > -1 || formatChar === ZeroPlaceholder) {
                                            if (enableGroups) {
                                                // If the groups are enabled we'll need to keep track of the current group index and periodically insert group separator,
                                                if (groupDigitCount === groupSize) {
                                                    result = groupSeparator + result;
                                                    groupIndex++;
                                                    if (groupIndex < groupSizes.length) {
                                                        groupSize = groupSizes[groupIndex];
                                                    }
                                                    groupDigitCount = 1;
                                                }
                                                else {
                                                    groupDigitCount++;
                                                }
                                            }
                                        }
                                        if (vi > -1) {
                                            if (isZero && formatChar === DigitPlaceholder) {
                                            }
                                            else {
                                                result = value.charAt(vi) + result;
                                            }
                                            vi--;
                                        }
                                        else if (formatChar !== DigitPlaceholder) {
                                            result = formatChar + result;
                                        }
                                    }
                                    break;
                                case ",":
                                    // We should skip all the , chars
                                    break;
                                default:
                                    leftBuffer = formatChar + leftBuffer;
                                    break;
                            }
                        }
                        // If the value didn't fit into the number of zeros provided in the format then we should insert the missing part of the value into the result
                        if (!suppressModifyValue) {
                            if (vi > -1 && result !== "") {
                                if (enableGroups) {
                                    while (vi > -1) {
                                        if (groupDigitCount === groupSize) {
                                            result = groupSeparator + result;
                                            groupIndex++;
                                            if (groupIndex < groupSizes.length) {
                                                groupSize = groupSizes[groupIndex];
                                            }
                                            groupDigitCount = 1;
                                        }
                                        else {
                                            groupDigitCount++;
                                        }
                                        result = value.charAt(vi) + result;
                                        vi--;
                                    }
                                }
                                else {
                                    result = value.substr(0, vi + 1) + result;
                                }
                            }
                            // Insert sign in front of the leftBuffer and result
                            return sign + leftBuffer + result;
                        }
                        if (fmtOnly)
                            // If the format doesn't specify any digits to be displayed, then just return the format we've parsed up until now.
                            return sign + leftBuffer + result;
                        return sign + leftBuffer + value + result;
                    }
                    function fuseNumberWithCustomFormatRight(value, format, suppressModifyValue) {
                        var vi = 0;
                        var fCount = format.length;
                        var vCount = value.length;
                        if (suppressModifyValue) {
                            var lastChar = format.charAt(fCount - 1);
                            if (!lastChar.match(NumericPlaceholderRegex))
                                return {
                                    value: value + lastChar,
                                    fmtOnly: value === "",
                                };
                            return {
                                value: value,
                                fmtOnly: value === "",
                            };
                        }
                        var result = "", fmtOnly = true;
                        for (var fi = 0; fi < fCount; fi++) {
                            var formatChar = format.charAt(fi);
                            if (vi < vCount) {
                                switch (formatChar) {
                                    case ZeroPlaceholder:
                                    case DigitPlaceholder:
                                        result += value[vi++];
                                        fmtOnly = false;
                                        break;
                                    default:
                                        result += formatChar;
                                }
                            }
                            else {
                                if (formatChar !== DigitPlaceholder) {
                                    result += formatChar;
                                    fmtOnly = fmtOnly && (formatChar !== ZeroPlaceholder);
                                }
                            }
                        }
                        return {
                            value: result,
                            fmtOnly: fmtOnly,
                        };
                    }
                    function localize(value, dictionary) {
                        var plus = dictionary["+"];
                        var minus = dictionary["-"];
                        var dot = dictionary["."];
                        var comma = dictionary[","];
                        if (plus === "+" && minus === "-" && dot === "." && comma === ",") {
                            return value;
                        }
                        var count = value.length;
                        var result = "";
                        for (var i = 0; i < count; i++) {
                            var char = value.charAt(i);
                            switch (char) {
                                case "+":
                                    result = result + plus;
                                    break;
                                case "-":
                                    result = result + minus;
                                    break;
                                case ".":
                                    result = result + dot;
                                    break;
                                case ",":
                                    result = result + comma;
                                    break;
                                default:
                                    result = result + char;
                                    break;
                            }
                        }
                        return result;
                    }
                })(numberFormat = formatting.numberFormat || (formatting.numberFormat = {}));
                /** DateTimeScaleFormatInfo is used to calculate and keep the Date formats used for different units supported by the DateTimeScaleModel */
                var DateTimeScaleFormatInfo = (function () {
                    // Constructor
                    /**
                     * Creates new instance of the DateTimeScaleFormatInfo class.
                     * @param culture - culture which calendar info is going to be used to derive the formats.
                     */
                    function DateTimeScaleFormatInfo(culture) {
                        var calendar = culture.calendar;
                        var patterns = calendar.patterns;
                        var monthAbbreviations = calendar["months"]["namesAbbr"];
                        var cultureHasMonthAbbr = monthAbbreviations && monthAbbreviations[0];
                        var yearMonthPattern = patterns["Y"];
                        var monthDayPattern = patterns["M"];
                        var fullPattern = patterns["f"];
                        var longTimePattern = patterns["T"];
                        var shortTimePattern = patterns["t"];
                        var separator = fullPattern.indexOf(",") > -1 ? ", " : " ";
                        var hasYearSymbol = yearMonthPattern.indexOf("yyyy'") === 0 && yearMonthPattern.length > 6 && yearMonthPattern[6] === "\'";
                        this.YearPattern = hasYearSymbol ? yearMonthPattern.substr(0, 7) : "yyyy";
                        var yearPos = fullPattern.indexOf("yy");
                        var monthPos = fullPattern.indexOf("MMMM");
                        this.MonthPattern = cultureHasMonthAbbr && monthPos > -1 ? (yearPos > monthPos ? "MMM yyyy" : "yyyy MMM") : yearMonthPattern;
                        this.DayPattern = cultureHasMonthAbbr ? monthDayPattern.replace("MMMM", "MMM") : monthDayPattern;
                        var minutePos = fullPattern.indexOf("mm");
                        var pmPos = fullPattern.indexOf("tt");
                        var shortHourPattern = pmPos > -1 ? shortTimePattern.replace(":mm ", "") : shortTimePattern;
                        this.HourPattern = yearPos < minutePos ? this.DayPattern + separator + shortHourPattern : shortHourPattern + separator + this.DayPattern;
                        this.MinutePattern = shortTimePattern;
                        this.SecondPattern = longTimePattern;
                        this.MillisecondPattern = longTimePattern.replace("ss", "ss.fff");
                        // Special cases
                        switch (culture.name) {
                            case "fi-FI":
                                this.DayPattern = this.DayPattern.replace("'ta'", ""); // Fix for finish 'ta' suffix for month names.
                                this.HourPattern = this.HourPattern.replace("'ta'", "");
                                break;
                        }
                    }
                    // Methods
                    /**
                     * Returns the format string of the provided DateTimeUnit.
                     * @param unit - date or time unit
                     */
                    DateTimeScaleFormatInfo.prototype.getFormatString = function (unit) {
                        switch (unit) {
                            case DateTimeUnit.Year:
                                return this.YearPattern;
                            case DateTimeUnit.Month:
                                return this.MonthPattern;
                            case DateTimeUnit.Week:
                            case DateTimeUnit.Day:
                                return this.DayPattern;
                            case DateTimeUnit.Hour:
                                return this.HourPattern;
                            case DateTimeUnit.Minute:
                                return this.MinutePattern;
                            case DateTimeUnit.Second:
                                return this.SecondPattern;
                            case DateTimeUnit.Millisecond:
                                return this.MillisecondPattern;
                        }
                    };
                    return DateTimeScaleFormatInfo;
                }());
                formatting.formattingService = new FormattingService();
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                /** The system used to determine display units used during formatting */
                (function (DisplayUnitSystemType) {
                    /** Default display unit system, which saves space by using units such as K, M, bn with PowerView rules for when to pick a unit. Suitable for chart axes. */
                    DisplayUnitSystemType[DisplayUnitSystemType["Default"] = 0] = "Default";
                    /** A verbose display unit system that will only respect the formatting defined in the model. Suitable for explore mode single-value cards. */
                    DisplayUnitSystemType[DisplayUnitSystemType["Verbose"] = 1] = "Verbose";
                    /**
                     * A display unit system that uses units such as K, M, bn if we have at least one of those units (e.g. 0.9M is not valid as it's less than 1 million).
                     * Suitable for dashboard tile cards
                     */
                    DisplayUnitSystemType[DisplayUnitSystemType["WholeUnits"] = 2] = "WholeUnits";
                    /**A display unit system that also contains Auto and None units for data labels*/
                    DisplayUnitSystemType[DisplayUnitSystemType["DataLabels"] = 3] = "DataLabels";
                })(formatting.DisplayUnitSystemType || (formatting.DisplayUnitSystemType = {}));
                var DisplayUnitSystemType = formatting.DisplayUnitSystemType;
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                var Double = powerbi.extensibility.utils.type.Double;
                var NumberFormat = powerbi.extensibility.utils.formatting.numberFormat;
                var formattingService = powerbi.extensibility.utils.formatting.formattingService;
                // Constants
                var maxExponent = 24;
                var defaultScientificBigNumbersBoundary = 1E15;
                var scientificSmallNumbersBoundary = 1E-4;
                var PERCENTAGE_FORMAT = "%";
                var SCIENTIFIC_FORMAT = "E+0";
                var DEFAULT_SCIENTIFIC_FORMAT = "0.##" + SCIENTIFIC_FORMAT;
                // Regular expressions
                /**
                 * This regex looks for strings that match one of the following conditions:
                 *   - Optionally contain "0", "#", followed by a period, followed by at least one "0" or "#" (Ex. ###,000.###)
                 *   - Contains at least one of "0", "#", or "," (Ex. ###,000)
                 *   - Contain a "g" (indicates to use the general .NET numeric format string)
                 * The entire string (start to end) must match, and the match is not case-sensitive.
                 */
                var SUPPORTED_SCIENTIFIC_FORMATS = /^([0\#,]*\.[0\#]+|[0\#,]+|g)$/i;
                var DisplayUnit = (function () {
                    function DisplayUnit() {
                    }
                    // Methods
                    DisplayUnit.prototype.project = function (value) {
                        if (this.value) {
                            return Double.removeDecimalNoise(value / this.value);
                        }
                        else {
                            return value;
                        }
                    };
                    DisplayUnit.prototype.reverseProject = function (value) {
                        if (this.value) {
                            return value * this.value;
                        }
                        else {
                            return value;
                        }
                    };
                    DisplayUnit.prototype.isApplicableTo = function (value) {
                        value = Math.abs(value);
                        var precision = Double.getPrecision(value, 3);
                        return Double.greaterOrEqualWithPrecision(value, this.applicableRangeMin, precision) && Double.lessWithPrecision(value, this.applicableRangeMax, precision);
                    };
                    DisplayUnit.prototype.isScaling = function () {
                        return this.value > 1;
                    };
                    return DisplayUnit;
                }());
                formatting.DisplayUnit = DisplayUnit;
                var DisplayUnitSystem = (function () {
                    // Constructor
                    function DisplayUnitSystem(units) {
                        this.units = units ? units : [];
                    }
                    Object.defineProperty(DisplayUnitSystem.prototype, "title", {
                        // Properties
                        get: function () {
                            return this.displayUnit ? this.displayUnit.title : undefined;
                        },
                        enumerable: true,
                        configurable: true
                    });
                    // Methods
                    DisplayUnitSystem.prototype.update = function (value) {
                        if (value === undefined)
                            return;
                        this.unitBaseValue = value;
                        this.displayUnit = this.findApplicableDisplayUnit(value);
                    };
                    DisplayUnitSystem.prototype.findApplicableDisplayUnit = function (value) {
                        for (var _i = 0, _a = this.units; _i < _a.length; _i++) {
                            var unit = _a[_i];
                            if (unit.isApplicableTo(value))
                                return unit;
                        }
                        return undefined;
                    };
                    DisplayUnitSystem.prototype.format = function (value, format, decimals, trailingZeros) {
                        decimals = this.getNumberOfDecimalsForFormatting(format, decimals);
                        var nonScientificFormat = "";
                        if (this.isFormatSupported(format) && !this.hasScientitifcFormat(format) && this.isScalingUnit() && this.shouldRespectScalingUnit(format)) {
                            value = this.displayUnit.project(value);
                            nonScientificFormat = this.displayUnit.labelFormat;
                        }
                        return this.formatHelper(value, nonScientificFormat, format, decimals, trailingZeros);
                    };
                    DisplayUnitSystem.prototype.isFormatSupported = function (format) {
                        return !DisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);
                    };
                    DisplayUnitSystem.prototype.isPercentageFormat = function (format) {
                        return format && format.indexOf(PERCENTAGE_FORMAT) >= 0;
                    };
                    DisplayUnitSystem.prototype.shouldRespectScalingUnit = function (format) {
                        return true;
                    };
                    DisplayUnitSystem.prototype.getNumberOfDecimalsForFormatting = function (format, decimals) {
                        return decimals;
                    };
                    DisplayUnitSystem.prototype.isScalingUnit = function () {
                        return this.displayUnit && this.displayUnit.isScaling();
                    };
                    DisplayUnitSystem.prototype.formatHelper = function (value, nonScientificFormat, format, decimals, trailingZeros) {
                        // If the format is "general" and we want to override the number of decimal places then use the default numeric format string.
                        if ((format === "g" || format === "G") && decimals != null)
                            // format = visuals.valueFormatter.DefaultNumericFormat;
                            format = "#,0.00"; // TODO: it seems that we have some recursive dependencies, we should investigate this problem in the near time.
                        format = NumberFormat.addDecimalsToFormat(format, decimals, trailingZeros);
                        if (format && !formattingService.isStandardNumberFormat(format))
                            return formattingService.formatNumberWithCustomOverride(value, format, nonScientificFormat);
                        if (!format)
                            format = "G";
                        if (!nonScientificFormat)
                            nonScientificFormat = "{0}";
                        var text = formattingService.formatValue(value, format);
                        return formattingService.format(nonScientificFormat, [text]);
                    };
                    /** Formats a single value by choosing an appropriate base for the DisplayUnitSystem before formatting. */
                    DisplayUnitSystem.prototype.formatSingleValue = function (value, format, decimals, trailingZeros) {
                        // Change unit base to a value appropriate for this value
                        this.update(this.shouldUseValuePrecision(value) ? Double.getPrecision(value, 8) : value);
                        return this.format(value, format, decimals, trailingZeros);
                    };
                    DisplayUnitSystem.prototype.shouldUseValuePrecision = function (value) {
                        if (this.units.length === 0)
                            return true;
                        // Check if the value is big enough to have a valid unit by checking against the smallest unit (that it's value bigger than 1).
                        var applicableRangeMin = 0;
                        for (var i = 0; i < this.units.length; i++) {
                            if (this.units[i].isScaling()) {
                                applicableRangeMin = this.units[i].applicableRangeMin;
                                break;
                            }
                        }
                        return Math.abs(value) < applicableRangeMin;
                    };
                    DisplayUnitSystem.prototype.isScientific = function (value) {
                        return value < -defaultScientificBigNumbersBoundary || value > defaultScientificBigNumbersBoundary ||
                            (-scientificSmallNumbersBoundary < value && value < scientificSmallNumbersBoundary && value !== 0);
                    };
                    DisplayUnitSystem.prototype.hasScientitifcFormat = function (format) {
                        return format && format.toUpperCase().indexOf("E") !== -1;
                    };
                    DisplayUnitSystem.prototype.supportsScientificFormat = function (format) {
                        if (format)
                            return SUPPORTED_SCIENTIFIC_FORMATS.test(format);
                        return true;
                    };
                    DisplayUnitSystem.prototype.shouldFallbackToScientific = function (value, format) {
                        return !this.hasScientitifcFormat(format)
                            && this.supportsScientificFormat(format)
                            && this.isScientific(value);
                    };
                    DisplayUnitSystem.prototype.getScientificFormat = function (data, format, decimals, trailingZeros) {
                        // Use scientific format outside of the range
                        if (this.isFormatSupported(format) && this.shouldFallbackToScientific(data, format)) {
                            var numericFormat = NumberFormat.getNumericFormat(data, format);
                            if (decimals)
                                numericFormat = NumberFormat.addDecimalsToFormat(numericFormat ? numericFormat : "0", Math.abs(decimals), trailingZeros);
                            if (numericFormat)
                                return numericFormat + SCIENTIFIC_FORMAT;
                            else
                                return DEFAULT_SCIENTIFIC_FORMAT;
                        }
                        return format;
                    };
                    DisplayUnitSystem.UNSUPPORTED_FORMATS = /^(p\d*)|(e\d*)$/i;
                    return DisplayUnitSystem;
                }());
                formatting.DisplayUnitSystem = DisplayUnitSystem;
                /** Provides a unit system that is defined by formatting in the model, and is suitable for visualizations shown in single number visuals in explore mode. */
                var NoDisplayUnitSystem = (function (_super) {
                    __extends(NoDisplayUnitSystem, _super);
                    // Constructor
                    function NoDisplayUnitSystem() {
                        _super.call(this, []);
                    }
                    return NoDisplayUnitSystem;
                }(DisplayUnitSystem));
                formatting.NoDisplayUnitSystem = NoDisplayUnitSystem;
                /** Provides a unit system that creates a more concise format for displaying values. This is suitable for most of the cases where
                    we are showing values (chart axes) and as such it is the default unit system. */
                var DefaultDisplayUnitSystem = (function (_super) {
                    __extends(DefaultDisplayUnitSystem, _super);
                    // Constructor
                    function DefaultDisplayUnitSystem(unitLookup) {
                        _super.call(this, DefaultDisplayUnitSystem.getUnits(unitLookup));
                    }
                    // Methods
                    DefaultDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros) {
                        format = this.getScientificFormat(data, format, decimals, trailingZeros);
                        return _super.prototype.format.call(this, data, format, decimals, trailingZeros);
                    };
                    DefaultDisplayUnitSystem.reset = function () {
                        DefaultDisplayUnitSystem.units = null;
                    };
                    DefaultDisplayUnitSystem.getUnits = function (unitLookup) {
                        if (!DefaultDisplayUnitSystem.units) {
                            DefaultDisplayUnitSystem.units = createDisplayUnits(unitLookup, function (value, previousUnitValue, min) {
                                // When dealing with millions/billions/trillions we need to switch to millions earlier: for example instead of showing 100K 200K 300K we should show 0.1M 0.2M 0.3M etc
                                if (value - previousUnitValue >= 1000) {
                                    return value / 10;
                                }
                                return min;
                            });
                            // Ensure last unit has max of infinity
                            DefaultDisplayUnitSystem.units[DefaultDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;
                        }
                        return DefaultDisplayUnitSystem.units;
                    };
                    return DefaultDisplayUnitSystem;
                }(DisplayUnitSystem));
                formatting.DefaultDisplayUnitSystem = DefaultDisplayUnitSystem;
                /** Provides a unit system that creates a more concise format for displaying values, but only allows showing a unit if we have at least
                    one of those units (e.g. 0.9M is not allowed since it's less than 1 million). This is suitable for cases such as dashboard tiles
                    where we have restricted space but do not want to show partial units. */
                var WholeUnitsDisplayUnitSystem = (function (_super) {
                    __extends(WholeUnitsDisplayUnitSystem, _super);
                    // Constructor
                    function WholeUnitsDisplayUnitSystem(unitLookup) {
                        _super.call(this, WholeUnitsDisplayUnitSystem.getUnits(unitLookup));
                    }
                    WholeUnitsDisplayUnitSystem.reset = function () {
                        WholeUnitsDisplayUnitSystem.units = null;
                    };
                    WholeUnitsDisplayUnitSystem.getUnits = function (unitLookup) {
                        if (!WholeUnitsDisplayUnitSystem.units) {
                            WholeUnitsDisplayUnitSystem.units = createDisplayUnits(unitLookup);
                            // Ensure last unit has max of infinity
                            WholeUnitsDisplayUnitSystem.units[WholeUnitsDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;
                        }
                        return WholeUnitsDisplayUnitSystem.units;
                    };
                    WholeUnitsDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros) {
                        format = this.getScientificFormat(data, format, decimals, trailingZeros);
                        return _super.prototype.format.call(this, data, format, decimals, trailingZeros);
                    };
                    return WholeUnitsDisplayUnitSystem;
                }(DisplayUnitSystem));
                formatting.WholeUnitsDisplayUnitSystem = WholeUnitsDisplayUnitSystem;
                var DataLabelsDisplayUnitSystem = (function (_super) {
                    __extends(DataLabelsDisplayUnitSystem, _super);
                    function DataLabelsDisplayUnitSystem(unitLookup) {
                        _super.call(this, DataLabelsDisplayUnitSystem.getUnits(unitLookup));
                    }
                    DataLabelsDisplayUnitSystem.prototype.isFormatSupported = function (format) {
                        return !DataLabelsDisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);
                    };
                    DataLabelsDisplayUnitSystem.getUnits = function (unitLookup) {
                        if (!DataLabelsDisplayUnitSystem.units) {
                            var units = [];
                            var adjustMinBasedOnPreviousUnit = function (value, previousUnitValue, min) {
                                // Never returns true, we are always ignoring
                                // We do not early switch (e.g. 100K instead of 0.1M)
                                // Intended? If so, remove this function, otherwise, remove if statement
                                if (value === -1)
                                    if (value - previousUnitValue >= 1000) {
                                        return value / 10;
                                    }
                                return min;
                            };
                            // Add Auto & None
                            var names = unitLookup(-1);
                            addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.AUTO_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit);
                            names = unitLookup(0);
                            addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.NONE_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit);
                            // Add normal units
                            DataLabelsDisplayUnitSystem.units = units.concat(createDisplayUnits(unitLookup, adjustMinBasedOnPreviousUnit));
                            // Ensure last unit has max of infinity
                            DataLabelsDisplayUnitSystem.units[DataLabelsDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;
                        }
                        return DataLabelsDisplayUnitSystem.units;
                    };
                    DataLabelsDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros) {
                        format = this.getScientificFormat(data, format, decimals, trailingZeros);
                        return _super.prototype.format.call(this, data, format, decimals, trailingZeros);
                    };
                    // Constants
                    DataLabelsDisplayUnitSystem.AUTO_DISPLAYUNIT_VALUE = 0;
                    DataLabelsDisplayUnitSystem.NONE_DISPLAYUNIT_VALUE = 1;
                    DataLabelsDisplayUnitSystem.UNSUPPORTED_FORMATS = /^(e\d*)$/i;
                    return DataLabelsDisplayUnitSystem;
                }(DisplayUnitSystem));
                formatting.DataLabelsDisplayUnitSystem = DataLabelsDisplayUnitSystem;
                function createDisplayUnits(unitLookup, adjustMinBasedOnPreviousUnit) {
                    var units = [];
                    for (var i = 3; i < maxExponent; i++) {
                        var names = unitLookup(i);
                        if (names)
                            addUnitIfNonEmpty(units, Double.pow10(i), names.title, names.format, adjustMinBasedOnPreviousUnit);
                    }
                    return units;
                }
                function addUnitIfNonEmpty(units, value, title, labelFormat, adjustMinBasedOnPreviousUnit) {
                    if (title || labelFormat) {
                        var min = value;
                        if (units.length > 0) {
                            var previousUnit = units[units.length - 1];
                            if (adjustMinBasedOnPreviousUnit)
                                min = adjustMinBasedOnPreviousUnit(value, previousUnit.value, min);
                            previousUnit.applicableRangeMax = min;
                        }
                        var unit = new DisplayUnit();
                        unit.value = value;
                        unit.applicableRangeMin = min;
                        unit.applicableRangeMax = min * 1000;
                        unit.title = title;
                        unit.labelFormat = labelFormat;
                        units.push(unit);
                    }
                }
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/**
 * Contains functions/constants to aid in text manupilation.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                var textUtil;
                (function (textUtil) {
                    /**
                     * Remove breaking spaces from given string and replace by none breaking space (&nbsp).
                     */
                    function removeBreakingSpaces(str) {
                        return str.toString().replace(new RegExp(" ", "g"), "&nbsp");
                    }
                    textUtil.removeBreakingSpaces = removeBreakingSpaces;
                    /**
                     * Remove ellipses from a given string
                     */
                    function removeEllipses(str) {
                        return str.replace(/(…)|(\.\.\.)/g, "");
                    }
                    textUtil.removeEllipses = removeEllipses;
                    /**
                    * Replace every whitespace (0x20) with Non-Breaking Space (0xA0)
                     * @param {string} txt String to replace White spaces
                     * @returns Text after replcing white spaces
                     */
                    function replaceSpaceWithNBSP(txt) {
                        if (txt != null) {
                            return txt.replace(/ /g, "\xA0");
                        }
                    }
                    textUtil.replaceSpaceWithNBSP = replaceSpaceWithNBSP;
                })(textUtil = formatting.textUtil || (formatting.textUtil = {}));
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var formatting;
            (function (formatting) {
                // powerbi.extensibility.utils.type
                var ValueType = powerbi.extensibility.utils.type.ValueType;
                var PrimitiveType = powerbi.extensibility.utils.type.PrimitiveType;
                var Double = powerbi.extensibility.utils.type.Double;
                // powerbi.extensibility.utils.formatting
                var stringExtensions = powerbi.extensibility.utils.formatting.stringExtensions;
                var DisplayUnitSystemType = powerbi.extensibility.utils.formatting.DisplayUnitSystemType;
                var DefaultDisplayUnitSystem = powerbi.extensibility.utils.formatting.DefaultDisplayUnitSystem;
                var NumberFormat = powerbi.extensibility.utils.formatting.numberFormat;
                var WholeUnitsDisplayUnitSystem = powerbi.extensibility.utils.formatting.WholeUnitsDisplayUnitSystem;
                var DateTimeSequence = powerbi.extensibility.utils.formatting.DateTimeSequence;
                var NoDisplayUnitSystem = powerbi.extensibility.utils.formatting.NoDisplayUnitSystem;
                var DataLabelsDisplayUnitSystem = powerbi.extensibility.utils.formatting.DataLabelsDisplayUnitSystem;
                var formattingService = powerbi.extensibility.utils.formatting.formattingService;
                // powerbi.extensibility.utils.dataview
                var DataViewObjects = powerbi.extensibility.utils.dataview.DataViewObjects;
                var valueFormatter;
                (function (valueFormatter) {
                    var StringExtensions = stringExtensions;
                    var BeautifiedFormat = {
                        "0.00 %;-0.00 %;0.00 %": "Percentage",
                        "0.0 %;-0.0 %;0.0 %": "Percentage1",
                    };
                    valueFormatter.DefaultIntegerFormat = "g";
                    valueFormatter.DefaultNumericFormat = "#,0.00";
                    valueFormatter.DefaultDateFormat = "d";
                    var defaultLocalizedStrings = {
                        "NullValue": "(Blank)",
                        "BooleanTrue": "True",
                        "BooleanFalse": "False",
                        "NaNValue": "NaN",
                        "InfinityValue": "+Infinity",
                        "NegativeInfinityValue": "-Infinity",
                        "RestatementComma": "{0}, {1}",
                        "RestatementCompoundAnd": "{0} and {1}",
                        "RestatementCompoundOr": "{0} or {1}",
                        "DisplayUnitSystem_EAuto_Title": "Auto",
                        "DisplayUnitSystem_E0_Title": "None",
                        "DisplayUnitSystem_E3_LabelFormat": "{0}K",
                        "DisplayUnitSystem_E3_Title": "Thousands",
                        "DisplayUnitSystem_E6_LabelFormat": "{0}M",
                        "DisplayUnitSystem_E6_Title": "Millions",
                        "DisplayUnitSystem_E9_LabelFormat": "{0}bn",
                        "DisplayUnitSystem_E9_Title": "Billions",
                        "DisplayUnitSystem_E12_LabelFormat": "{0}T",
                        "DisplayUnitSystem_E12_Title": "Trillions",
                        "Percentage": "#,0.##%",
                        "Percentage1": "#,0.#%",
                        "TableTotalLabel": "Total",
                        "Tooltip_HighlightedValueDisplayName": "Highlighted",
                        "Funnel_PercentOfFirst": "Percent of first",
                        "Funnel_PercentOfPrevious": "Percent of previous",
                        "Funnel_PercentOfFirst_Highlight": "Percent of first (highlighted)",
                        "Funnel_PercentOfPrevious_Highlight": "Percent of previous (highlighted)",
                        // Geotagging strings
                        "GeotaggingString_Continent": "continent",
                        "GeotaggingString_Continents": "continents",
                        "GeotaggingString_Country": "country",
                        "GeotaggingString_Countries": "countries",
                        "GeotaggingString_State": "state",
                        "GeotaggingString_States": "states",
                        "GeotaggingString_City": "city",
                        "GeotaggingString_Cities": "cities",
                        "GeotaggingString_Town": "town",
                        "GeotaggingString_Towns": "towns",
                        "GeotaggingString_Province": "province",
                        "GeotaggingString_Provinces": "provinces",
                        "GeotaggingString_County": "county",
                        "GeotaggingString_Counties": "counties",
                        "GeotaggingString_Village": "village",
                        "GeotaggingString_Villages": "villages",
                        "GeotaggingString_Post": "post",
                        "GeotaggingString_Zip": "zip",
                        "GeotaggingString_Code": "code",
                        "GeotaggingString_Place": "place",
                        "GeotaggingString_Places": "places",
                        "GeotaggingString_Address": "address",
                        "GeotaggingString_Addresses": "addresses",
                        "GeotaggingString_Street": "street",
                        "GeotaggingString_Streets": "streets",
                        "GeotaggingString_Longitude": "longitude",
                        "GeotaggingString_Longitude_Short": "lon",
                        "GeotaggingString_Longitude_Short2": "long",
                        "GeotaggingString_Latitude": "latitude",
                        "GeotaggingString_Latitude_Short": "lat",
                        "GeotaggingString_PostalCode": "postal code",
                        "GeotaggingString_PostalCodes": "postal codes",
                        "GeotaggingString_ZipCode": "zip code",
                        "GeotaggingString_ZipCodes": "zip codes",
                        "GeotaggingString_Territory": "territory",
                        "GeotaggingString_Territories": "territories",
                    };
                    function beautify(format) {
                        var key = BeautifiedFormat[format];
                        if (key)
                            return defaultLocalizedStrings[key] || format;
                        return format;
                    }
                    function describeUnit(exponent) {
                        var exponentLookup = (exponent === -1) ? "Auto" : exponent.toString();
                        var title = defaultLocalizedStrings["DisplayUnitSystem_E" + exponentLookup + "_Title"];
                        var format = (exponent <= 0) ? "{0}" : defaultLocalizedStrings["DisplayUnitSystem_E" + exponentLookup + "_LabelFormat"];
                        if (title || format)
                            return { title: title, format: format };
                    }
                    function getLocalizedString(stringId) {
                        return defaultLocalizedStrings[stringId];
                    }
                    valueFormatter.getLocalizedString = getLocalizedString;
                    // NOTE: Define default locale options, but these can be overriden by setLocaleOptions.
                    var locale = {
                        null: defaultLocalizedStrings["NullValue"],
                        true: defaultLocalizedStrings["BooleanTrue"],
                        false: defaultLocalizedStrings["BooleanFalse"],
                        NaN: defaultLocalizedStrings["NaNValue"],
                        infinity: defaultLocalizedStrings["InfinityValue"],
                        negativeInfinity: defaultLocalizedStrings["NegativeInfinityValue"],
                        beautify: function (format) { return beautify(format); },
                        describe: function (exponent) { return describeUnit(exponent); },
                        restatementComma: defaultLocalizedStrings["RestatementComma"],
                        restatementCompoundAnd: defaultLocalizedStrings["RestatementCompoundAnd"],
                        restatementCompoundOr: defaultLocalizedStrings["RestatementCompoundOr"],
                    };
                    var MaxScaledDecimalPlaces = 2;
                    var MaxValueForDisplayUnitRounding = 1000;
                    var MinIntegerValueForDisplayUnits = 10000;
                    var MinPrecisionForDisplayUnits = 2;
                    var DateTimeMetadataColumn = {
                        displayName: "",
                        type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.DateTime),
                    };
                    function getFormatMetadata(format) {
                        return NumberFormat.getCustomFormatMetadata(format);
                    }
                    valueFormatter.getFormatMetadata = getFormatMetadata;
                    function setLocaleOptions(options) {
                        locale = options;
                        DefaultDisplayUnitSystem.reset();
                        WholeUnitsDisplayUnitSystem.reset();
                    }
                    valueFormatter.setLocaleOptions = setLocaleOptions;
                    function createDefaultFormatter(formatString, allowFormatBeautification) {
                        if (allowFormatBeautification === void 0) { allowFormatBeautification = false; }
                        var formatBeaut = allowFormatBeautification ? locale.beautify(formatString) : formatString;
                        return {
                            format: function (value) {
                                if (value == null)
                                    return locale.null;
                                return formatCore(value, formatBeaut);
                            }
                        };
                    }
                    valueFormatter.createDefaultFormatter = createDefaultFormatter;
                    /** Creates an IValueFormatter to be used for a range of values. */
                    function create(options) {
                        var format = !!options.allowFormatBeautification ? locale.beautify(options.format) : options.format;
                        if (shouldUseNumericDisplayUnits(options)) {
                            var displayUnitSystem_1 = createDisplayUnitSystem(options.displayUnitSystemType);
                            var singleValueFormattingMode_1 = !!options.formatSingleValues;
                            displayUnitSystem_1.update(Math.max(Math.abs(options.value || 0), Math.abs(options.value2 || 0)));
                            var forcePrecision_1 = options.precision != null;
                            var decimals_1;
                            if (forcePrecision_1)
                                decimals_1 = -options.precision;
                            else if (displayUnitSystem_1.displayUnit && displayUnitSystem_1.displayUnit.value > 1)
                                decimals_1 = -MaxScaledDecimalPlaces;
                            return {
                                format: function (value) {
                                    var formattedValue = getStringFormat(value, true /*nullsAreBlank*/);
                                    if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue))
                                        return formattedValue;
                                    // Round to Double.DEFAULT_PRECISION
                                    if (value && !displayUnitSystem_1.isScalingUnit() && Math.abs(value) < MaxValueForDisplayUnitRounding && !forcePrecision_1)
                                        value = Double.roundToPrecision(value);
                                    return singleValueFormattingMode_1 ?
                                        displayUnitSystem_1.formatSingleValue(value, format, decimals_1, forcePrecision_1) :
                                        displayUnitSystem_1.format(value, format, decimals_1, forcePrecision_1);
                                },
                                displayUnit: displayUnitSystem_1.displayUnit,
                                options: options
                            };
                        }
                        if (shouldUseDateUnits(options.value, options.value2, options.tickCount)) {
                            var unit_1 = DateTimeSequence.getIntervalUnit(options.value /* minDate */, options.value2 /* maxDate */, options.tickCount);
                            return {
                                format: function (value) {
                                    if (value == null)
                                        return locale.null;
                                    var formatString = formattingService.dateFormatString(unit_1);
                                    return formatCore(value, formatString);
                                },
                                options: options
                            };
                        }
                        return createDefaultFormatter(format);
                    }
                    valueFormatter.create = create;
                    function format(value, format, allowFormatBeautification) {
                        if (value == null)
                            return locale.null;
                        return formatCore(value, !!allowFormatBeautification ? locale.beautify(format) : format);
                    }
                    valueFormatter.format = format;
                    /**
                     * Value formatting function to handle variant measures.
                     * For a Date/Time value within a non-date/time field, it's formatted with the default date/time formatString instead of as a number
                     * @param {any} value Value to be formatted
                     * @param {DataViewMetadataColumn} column Field which the value belongs to
                     * @param {DataViewObjectPropertyIdentifier} formatStringProp formatString Property ID
                     * @param {boolean} nullsAreBlank? Whether to show "(Blank)" instead of empty string for null values
                     * @returns Formatted value
                     */
                    function formatVariantMeasureValue(value, column, formatStringProp, nullsAreBlank) {
                        // If column type is not datetime, but the value is of time datetime,
                        // then use the default date format string
                        if (!(column && column.type && column.type.dateTime) && value instanceof Date) {
                            var valueFormat = getFormatString(DateTimeMetadataColumn, null, false);
                            return formatCore(value, valueFormat, nullsAreBlank);
                        }
                        else {
                            return formatCore(value, getFormatString(column, formatStringProp), nullsAreBlank);
                        }
                    }
                    valueFormatter.formatVariantMeasureValue = formatVariantMeasureValue;
                    function createDisplayUnitSystem(displayUnitSystemType) {
                        if (displayUnitSystemType == null)
                            return new DefaultDisplayUnitSystem(locale.describe);
                        switch (displayUnitSystemType) {
                            case DisplayUnitSystemType.Default:
                                return new DefaultDisplayUnitSystem(locale.describe);
                            case DisplayUnitSystemType.WholeUnits:
                                return new WholeUnitsDisplayUnitSystem(locale.describe);
                            case DisplayUnitSystemType.Verbose:
                                return new NoDisplayUnitSystem();
                            case DisplayUnitSystemType.DataLabels:
                                return new DataLabelsDisplayUnitSystem(locale.describe);
                            default:
                                return new DefaultDisplayUnitSystem(locale.describe);
                        }
                    }
                    valueFormatter.createDisplayUnitSystem = createDisplayUnitSystem;
                    function shouldUseNumericDisplayUnits(options) {
                        var value = options.value;
                        var value2 = options.value2;
                        var format = options.format;
                        // For singleValue visuals like card, gauge we don't want to roundoff data to the nearest thousands so format the whole number / integers below 10K to not use display units
                        if (options.formatSingleValues && format) {
                            if (Math.abs(value) < MinIntegerValueForDisplayUnits) {
                                var isCustomFormat = !NumberFormat.isStandardFormat(format);
                                if (isCustomFormat) {
                                    var precision = NumberFormat.getCustomFormatMetadata(format, true /*calculatePrecision*/).precision;
                                    if (precision < MinPrecisionForDisplayUnits)
                                        return false;
                                }
                                else if (Double.isInteger(value))
                                    return false;
                            }
                        }
                        if ((typeof value === "number") || (typeof value2 === "number")) {
                            return true;
                        }
                    }
                    function shouldUseDateUnits(value, value2, tickCount) {
                        // must check both value and value2 because we'll need to get an interval for date units
                        return (value instanceof Date) && (value2 instanceof Date) && (tickCount !== undefined && tickCount !== null);
                    }
                    /*
                     * Get the column format. Order of precendence is:
                     *  1. Column format
                     *  2. Default PowerView policy for column type
                     */
                    function getFormatString(column, formatStringProperty, suppressTypeFallback) {
                        if (column) {
                            if (formatStringProperty) {
                                var propertyValue = DataViewObjects.getValue(column.objects, formatStringProperty);
                                if (propertyValue)
                                    return propertyValue;
                            }
                            if (!suppressTypeFallback) {
                                var columnType = column.type;
                                if (columnType) {
                                    if (columnType.dateTime)
                                        return valueFormatter.DefaultDateFormat;
                                    if (columnType.integer) {
                                        if (columnType.temporal && columnType.temporal.year)
                                            return "0";
                                        return valueFormatter.DefaultIntegerFormat;
                                    }
                                    if (columnType.numeric)
                                        return valueFormatter.DefaultNumericFormat;
                                }
                            }
                        }
                    }
                    valueFormatter.getFormatString = getFormatString;
                    function getFormatStringByColumn(column, suppressTypeFallback) {
                        if (column) {
                            if (column.format) {
                                return column.format;
                            }
                            if (!suppressTypeFallback) {
                                var columnType = column.type;
                                if (columnType) {
                                    if (columnType.dateTime)
                                        return valueFormatter.DefaultDateFormat;
                                    if (columnType.integer) {
                                        if (columnType.temporal && columnType.temporal.year)
                                            return "0";
                                        return valueFormatter.DefaultIntegerFormat;
                                    }
                                    if (columnType.numeric)
                                        return valueFormatter.DefaultNumericFormat;
                                }
                            }
                        }
                        return undefined;
                    }
                    valueFormatter.getFormatStringByColumn = getFormatStringByColumn;
                    function formatListCompound(strings, conjunction) {
                        var result;
                        if (!strings) {
                            return null;
                        }
                        var length = strings.length;
                        if (length > 0) {
                            result = strings[0];
                            var lastIndex = length - 1;
                            for (var i = 1, len = lastIndex; i < len; i++) {
                                var value = strings[i];
                                result = StringExtensions.format(locale.restatementComma, result, value);
                            }
                            if (length > 1) {
                                var value = strings[lastIndex];
                                result = StringExtensions.format(conjunction, result, value);
                            }
                        }
                        else {
                            result = null;
                        }
                        return result;
                    }
                    /** The returned string will look like 'A, B, ..., and C'  */
                    function formatListAnd(strings) {
                        return formatListCompound(strings, locale.restatementCompoundAnd);
                    }
                    valueFormatter.formatListAnd = formatListAnd;
                    /** The returned string will look like 'A, B, ..., or C' */
                    function formatListOr(strings) {
                        return formatListCompound(strings, locale.restatementCompoundOr);
                    }
                    valueFormatter.formatListOr = formatListOr;
                    function formatCore(value, format, nullsAreBlank) {
                        var formattedValue = getStringFormat(value, nullsAreBlank ? nullsAreBlank : false /*nullsAreBlank*/);
                        if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue))
                            return formattedValue;
                        return formattingService.formatValue(value, format);
                    }
                    function getStringFormat(value, nullsAreBlank) {
                        if (value == null && nullsAreBlank)
                            return locale.null;
                        if (value === true)
                            return locale.true;
                        if (value === false)
                            return locale.false;
                        if (typeof value === "number" && isNaN(value))
                            return locale.NaN;
                        if (value === Number.NEGATIVE_INFINITY)
                            return locale.negativeInfinity;
                        if (value === Number.POSITIVE_INFINITY)
                            return locale.infinity;
                        return "";
                    }
                    function getDisplayUnits(displayUnitSystemType) {
                        var displayUnitSystem = createDisplayUnitSystem(displayUnitSystemType);
                        return displayUnitSystem.units;
                    }
                    valueFormatter.getDisplayUnits = getDisplayUnits;
                })(valueFormatter = formatting.valueFormatter || (formatting.valueFormatter = {}));
            })(formatting = utils.formatting || (utils.formatting = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var interactivity;
            (function (interactivity) {
                // powerbi.extensibility.utils.type
                var ArrayExtensions = powerbi.extensibility.utils.type.ArrayExtensions;
                /**
                 * Factory method to create an IInteractivityService instance.
                 */
                function createInteractivityService(hostServices) {
                    return new InteractivityService(hostServices);
                }
                interactivity.createInteractivityService = createInteractivityService;
                /**
                * Creates a clear an svg rect to catch clear clicks.
                */
                function appendClearCatcher(selection) {
                    return selection
                        .append("rect")
                        .classed("clearCatcher", true)
                        .attr({ width: "100%", height: "100%" });
                }
                interactivity.appendClearCatcher = appendClearCatcher;
                function dataHasSelection(data) {
                    for (var i = 0, ilen = data.length; i < ilen; i++) {
                        if (data[i].selected)
                            return true;
                    }
                    return false;
                }
                interactivity.dataHasSelection = dataHasSelection;
                var InteractivityService = (function () {
                    function InteractivityService(hostServices) {
                        this.renderSelectionInVisual = function () { };
                        this.renderSelectionInLegend = function () { };
                        this.renderSelectionInLabels = function () { };
                        // Selection state
                        this.selectedIds = [];
                        this.isInvertedSelectionMode = false;
                        this.dataPointObjectName = "dataPoint";
                        this.hostService = hostServices;
                        this.selectionManager = hostServices.createSelectionManager();
                    }
                    // IInteractivityService Implementation
                    /** Binds the vsiual to the interactivityService */
                    InteractivityService.prototype.bind = function (dataPoints, behavior, behaviorOptions, options) {
                        var _this = this;
                        var didThePreviousStateHaveSelectedIds = this.selectedIds.length > 0;
                        // Bind the data
                        if (options && options.overrideSelectionFromData) {
                            // Override selection state from data points if needed
                            this.takeSelectionStateFromDataPoints(dataPoints);
                        }
                        if (options) {
                            if (options.isLegend) {
                                // Bind to legend data instead of normal data if isLegend
                                this.selectableLegendDataPoints = dataPoints;
                                this.renderSelectionInLegend = function () { return behavior.renderSelection(_this.legendHasSelection()); };
                            }
                            else if (options.isLabels) {
                                // Bind to label data instead of normal data if isLabels
                                this.selectableLabelsDataPoints = dataPoints;
                                this.renderSelectionInLabels = function () { return behavior.renderSelection(_this.labelsHasSelection()); };
                            }
                            else {
                                this.selectableDataPoints = dataPoints;
                                this.renderSelectionInVisual = function () { return behavior.renderSelection(_this.hasSelection()); };
                            }
                            if (options.hasSelectionOverride != null) {
                                this.hasSelectionOverride = options.hasSelectionOverride;
                            }
                        }
                        else {
                            this.selectableDataPoints = dataPoints;
                            this.renderSelectionInVisual = function () { return behavior.renderSelection(_this.hasSelection()); };
                        }
                        // Bind to the behavior
                        this.behavior = behavior;
                        behavior.bindEvents(behaviorOptions, this);
                        // Sync data points with current selection state
                        this.syncSelectionState(didThePreviousStateHaveSelectedIds);
                    };
                    /**
                     * Sets the selected state of all selectable data points to false and invokes the behavior's select command.
                     */
                    InteractivityService.prototype.clearSelection = function () {
                        this.hasSelectionOverride = undefined;
                        ArrayExtensions.clear(this.selectedIds);
                        this.applyToAllSelectableDataPoints(function (dataPoint) { return dataPoint.selected = false; });
                        this.renderAll();
                    };
                    InteractivityService.prototype.applySelectionStateToData = function (dataPoints, hasHighlights) {
                        if (hasHighlights && this.hasSelection()) {
                            var selectionIds = (this.selectionManager.getSelectionIds() || []);
                            ArrayExtensions.clear(this.selectedIds);
                            ArrayExtensions.clear(selectionIds);
                        }
                        for (var _i = 0, dataPoints_1 = dataPoints; _i < dataPoints_1.length; _i++) {
                            var dataPoint = dataPoints_1[_i];
                            dataPoint.selected = InteractivityService.checkDatapointAgainstSelectedIds(dataPoint, this.selectedIds);
                        }
                        return this.hasSelection();
                    };
                    /**
                     * Checks whether there is at least one item selected.
                     */
                    InteractivityService.prototype.hasSelection = function () {
                        return this.selectedIds.length > 0;
                    };
                    InteractivityService.prototype.legendHasSelection = function () {
                        return this.selectableLegendDataPoints ? dataHasSelection(this.selectableLegendDataPoints) : false;
                    };
                    InteractivityService.prototype.labelsHasSelection = function () {
                        return this.selectableLabelsDataPoints ? dataHasSelection(this.selectableLabelsDataPoints) : false;
                    };
                    InteractivityService.prototype.isSelectionModeInverted = function () {
                        return this.isInvertedSelectionMode;
                    };
                    // ISelectionHandler Implementation
                    InteractivityService.prototype.handleSelection = function (dataPoint, multiSelect) {
                        // defect 7067397: should not happen so assert but also don't continue as it's
                        // causing a lot of error telemetry in desktop.
                        if (!dataPoint)
                            return;
                        if (!dataPoint.identity) {
                            this.handleClearSelection();
                        }
                        else {
                            this.select(dataPoint, multiSelect);
                            this.sendSelectionToHost(dataPoint, multiSelect);
                            this.renderAll();
                        }
                    };
                    InteractivityService.prototype.handleClearSelection = function () {
                        this.clearSelection();
                        this.sendSelectionToHost();
                    };
                    // Private utility methods
                    InteractivityService.prototype.renderAll = function () {
                        this.renderSelectionInVisual();
                        this.renderSelectionInLegend();
                        this.renderSelectionInLabels();
                    };
                    /** Marks a data point as selected and syncs selection with the host. */
                    InteractivityService.prototype.select = function (d, multiSelect) {
                        var id = d.identity;
                        if (!id)
                            return;
                        var selected = !d.selected || (!multiSelect && this.selectedIds.length > 1);
                        // If we have a multiselect flag, we attempt a multiselect
                        if (multiSelect) {
                            if (selected) {
                                d.selected = true;
                                this.selectedIds.push(id);
                                if (id.hasIdentity()) {
                                    this.removeSelectionIdsWithOnlyMeasures();
                                }
                                else {
                                    this.removeSelectionIdsExceptOnlyMeasures();
                                }
                            }
                            else {
                                d.selected = false;
                                this.removeId(id);
                            }
                        }
                        // We do a single select if we didn't do a multiselect or if we find out that the multiselect is invalid.
                        if (!multiSelect) {
                            this.clearSelection();
                            if (selected) {
                                d.selected = true;
                                this.selectedIds.push(id);
                            }
                        }
                        this.syncSelectionState();
                    };
                    InteractivityService.prototype.removeId = function (toRemove) {
                        var selectedIds = this.selectedIds;
                        for (var i = selectedIds.length - 1; i > -1; i--) {
                            var currentId = selectedIds[i];
                            if (toRemove.includes(currentId))
                                selectedIds.splice(i, 1);
                        }
                    };
                    InteractivityService.prototype.sendSelectionToHost = function (dataPoint, multiSelection) {
                        if (!this.selectionManager) {
                            return;
                        }
                        if (dataPoint && dataPoint.identity) {
                            this.selectionManager.select(dataPoint.identity, multiSelection);
                        }
                        else {
                            this.selectionManager.clear();
                        }
                    };
                    InteractivityService.prototype.takeSelectionStateFromDataPoints = function (dataPoints) {
                        var selectedIds = this.selectedIds;
                        // Replace the existing selectedIds rather than merging.
                        ArrayExtensions.clear(selectedIds);
                        for (var _i = 0, dataPoints_2 = dataPoints; _i < dataPoints_2.length; _i++) {
                            var dataPoint = dataPoints_2[_i];
                            if (dataPoint.selected)
                                selectedIds.push(dataPoint.identity);
                        }
                    };
                    /**
                     * Syncs the selection state for all data points that have the same category. Returns
                     * true if the selection state was out of sync and corrections were made; false if
                     * the data is already in sync with the service.
                     *
                     * If the data is not compatible with the current service's current selection state,
                     * the state is cleared and the cleared selection is sent to the host.
                     *
                     * Ignores series for now, since we don't support series selection at the moment.
                     */
                    InteractivityService.prototype.syncSelectionState = function (didThePreviousStateHaveSelectedIds) {
                        if (didThePreviousStateHaveSelectedIds === void 0) { didThePreviousStateHaveSelectedIds = false; }
                        var selectedIds = this.selectedIds;
                        var selectableDataPoints = this.selectableDataPoints;
                        var selectableLegendDataPoints = this.selectableLegendDataPoints;
                        var selectableLabelsDataPoints = this.selectableLabelsDataPoints;
                        var foundMatchingId = false; // Checked only against the visual's data points; it's possible to have stuff selected in the visual that's not in the legend, but not vice-verse
                        if (!selectableDataPoints && !selectableLegendDataPoints)
                            return;
                        if (selectableDataPoints) {
                            if (InteractivityService.updateSelectableDataPointsBySelectedIds(selectableDataPoints, selectedIds))
                                foundMatchingId = true;
                        }
                        if (selectableLegendDataPoints) {
                            if (InteractivityService.updateSelectableDataPointsBySelectedIds(selectableLegendDataPoints, selectedIds))
                                foundMatchingId = true;
                        }
                        if (selectableLabelsDataPoints) {
                            var labelsDataPoint_1;
                            for (var i = 0, ilen = selectableLabelsDataPoints.length; i < ilen; i++) {
                                labelsDataPoint_1 = selectableLabelsDataPoints[i];
                                if (selectedIds.some(function (value) { return value.includes(labelsDataPoint_1.identity); }))
                                    labelsDataPoint_1.selected = true;
                                else
                                    labelsDataPoint_1.selected = false;
                            }
                        }
                        if (!foundMatchingId && (selectedIds.length > 0 || didThePreviousStateHaveSelectedIds)) {
                            this.clearSelection();
                            this.sendSelectionToHost();
                        }
                    };
                    InteractivityService.prototype.applyToAllSelectableDataPoints = function (action) {
                        var selectableDataPoints = this.selectableDataPoints;
                        var selectableLegendDataPoints = this.selectableLegendDataPoints;
                        var selectableLabelsDataPoints = this.selectableLabelsDataPoints;
                        if (selectableDataPoints) {
                            for (var _i = 0, selectableDataPoints_1 = selectableDataPoints; _i < selectableDataPoints_1.length; _i++) {
                                var dataPoint = selectableDataPoints_1[_i];
                                action(dataPoint);
                            }
                        }
                        if (selectableLegendDataPoints) {
                            for (var _a = 0, selectableLegendDataPoints_1 = selectableLegendDataPoints; _a < selectableLegendDataPoints_1.length; _a++) {
                                var dataPoint = selectableLegendDataPoints_1[_a];
                                action(dataPoint);
                            }
                        }
                        if (selectableLabelsDataPoints) {
                            for (var _b = 0, selectableLabelsDataPoints_1 = selectableLabelsDataPoints; _b < selectableLabelsDataPoints_1.length; _b++) {
                                var dataPoint = selectableLabelsDataPoints_1[_b];
                                action(dataPoint);
                            }
                        }
                    };
                    InteractivityService.updateSelectableDataPointsBySelectedIds = function (selectableDataPoints, selectedIds) {
                        var foundMatchingId = false;
                        for (var _i = 0, selectableDataPoints_2 = selectableDataPoints; _i < selectableDataPoints_2.length; _i++) {
                            var dataPoint = selectableDataPoints_2[_i];
                            dataPoint.selected = InteractivityService.checkDatapointAgainstSelectedIds(dataPoint, selectedIds);
                            if (dataPoint.selected)
                                foundMatchingId = true;
                        }
                        return foundMatchingId;
                    };
                    InteractivityService.checkDatapointAgainstSelectedIds = function (datapoint, selectedIds) {
                        return selectedIds.some(function (value) { return value.includes(datapoint.identity); });
                    };
                    InteractivityService.prototype.removeSelectionIdsWithOnlyMeasures = function () {
                        this.selectedIds = this.selectedIds.filter(function (identity) { return identity.hasIdentity(); });
                    };
                    InteractivityService.prototype.removeSelectionIdsExceptOnlyMeasures = function () {
                        this.selectedIds = this.selectedIds.filter(function (identity) { return !identity.hasIdentity(); });
                    };
                    return InteractivityService;
                }());
                interactivity.InteractivityService = InteractivityService;
                ;
            })(interactivity = utils.interactivity || (utils.interactivity = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var interactivity;
            (function (interactivity) {
                var interactivityUtils;
                (function (interactivityUtils) {
                    function getPositionOfLastInputEvent() {
                        return {
                            x: d3.event.clientX,
                            y: d3.event.clientY
                        };
                    }
                    interactivityUtils.getPositionOfLastInputEvent = getPositionOfLastInputEvent;
                    function registerStandardSelectionHandler(selection, selectionHandler) {
                        selection.on("click", function (d) { return handleSelection(d, selectionHandler); });
                    }
                    interactivityUtils.registerStandardSelectionHandler = registerStandardSelectionHandler;
                    function registerGroupSelectionHandler(group, selectionHandler) {
                        group.on("click", function () {
                            var target = d3.event.target, d = d3.select(target).datum();
                            handleSelection(d, selectionHandler);
                        });
                    }
                    interactivityUtils.registerGroupSelectionHandler = registerGroupSelectionHandler;
                    function handleSelection(d, selectionHandler) {
                        selectionHandler.handleSelection(d, d3.event.ctrlKey);
                    }
                })(interactivityUtils = interactivity.interactivityUtils || (interactivity.interactivityUtils = {}));
            })(interactivity = utils.interactivity || (utils.interactivity = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var axis;
                (function (axis) {
                    var scale;
                    (function (scale) {
                        scale.linear = "linear";
                        scale.log = "log";
                    })(scale = axis.scale || (axis.scale = {}));
                })(axis = chart.axis || (chart.axis = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var axis;
                (function (axis) {
                    var style;
                    (function (style) {
                        style.showBoth = "showBoth";
                        style.showTitleOnly = "showTitleOnly";
                        style.showUnitOnly = "showUnitOnly";
                    })(style = axis.style || (axis.style = {}));
                })(axis = chart.axis || (chart.axis = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var axis;
                (function (axis) {
                    (function (AxisOrientation) {
                        // Names of these enums match the values passed into axis.orient([orientation])
                        AxisOrientation[AxisOrientation["top"] = 0] = "top";
                        AxisOrientation[AxisOrientation["bottom"] = 1] = "bottom";
                        AxisOrientation[AxisOrientation["left"] = 2] = "left";
                        AxisOrientation[AxisOrientation["right"] = 3] = "right";
                    })(axis.AxisOrientation || (axis.AxisOrientation = {}));
                    var AxisOrientation = axis.AxisOrientation;
                })(axis = chart.axis || (chart.axis = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var axis;
                (function (axis_1) {
                    // powerbi.extensibility.utils.type
                    var ValueType = powerbi.extensibility.utils.type.ValueType;
                    var Double = powerbi.extensibility.utils.type.Double;
                    // powerbi.extensibility.utils.formatting
                    var DateTimeSequence = powerbi.extensibility.utils.formatting.DateTimeSequence;
                    var wordBreaker = powerbi.extensibility.utils.formatting.wordBreaker;
                    var valueFormatter = powerbi.extensibility.utils.formatting.valueFormatter;
                    var numberFormat = powerbi.extensibility.utils.formatting.numberFormat;
                    var textUtil = powerbi.extensibility.utils.formatting.textUtil;
                    var textMeasurementService = powerbi.extensibility.utils.formatting.textMeasurementService;
                    // powerbi.extensibility.utils.chart
                    var axisScale = powerbi.extensibility.utils.chart.axis.scale;
                    var axisStyle = powerbi.extensibility.utils.chart.axis.style;
                    var XLabelMaxAllowedOverflow = 35;
                    var TextHeightConstant = 10;
                    var MinTickCount = 2;
                    var DefaultBestTickCount = 3;
                    var LeftPadding = 10;
                    var ScalarTickLabelPadding = 3;
                    var TickLabelPadding = 2;
                    var MinOrdinalRectThickness = 20;
                    var InnerPaddingRatio = 0.2;
                    /**
                     * Default ranges are for when we have a field chosen for the axis,
                     * but no values are returned by the query.
                     */
                    axis_1.emptyDomain = [0, 0];
                    axis_1.stackedAxisPadding = 5;
                    function getRecommendedNumberOfTicksForXAxis(availableWidth) {
                        if (availableWidth < 300) {
                            return 3;
                        }
                        if (availableWidth < 500) {
                            return 5;
                        }
                        return 8;
                    }
                    axis_1.getRecommendedNumberOfTicksForXAxis = getRecommendedNumberOfTicksForXAxis;
                    function getRecommendedNumberOfTicksForYAxis(availableWidth) {
                        if (availableWidth < 150) {
                            return 3;
                        }
                        if (availableWidth < 300) {
                            return 5;
                        }
                        return 8;
                    }
                    axis_1.getRecommendedNumberOfTicksForYAxis = getRecommendedNumberOfTicksForYAxis;
                    /**
                     * Get the best number of ticks based on minimum value, maximum value,
                     * measure metadata and max tick count.
                     *
                     * @param min The minimum of the data domain.
                     * @param max The maximum of the data domain.
                     * @param valuesMetadata The measure metadata array.
                     * @param maxTickCount The max count of intervals.
                     * @param isDateTime - flag to show single tick when min is equal to max.
                     */
                    function getBestNumberOfTicks(min, max, valuesMetadata, maxTickCount, isDateTime) {
                        if (isNaN(min) || isNaN(max)) {
                            return DefaultBestTickCount;
                        }
                        if (maxTickCount <= 1 || (max <= 1 && min >= -1)) {
                            return maxTickCount;
                        }
                        if (min === max) {
                            // datetime needs to only show one tick value in this case so formatting works correctly
                            if (!!isDateTime) {
                                return 1;
                            }
                            return DefaultBestTickCount;
                        }
                        if (hasNonIntegerData(valuesMetadata)) {
                            return maxTickCount;
                        }
                        // e.g. 5 - 2 + 1 = 4, => [2,3,4,5]
                        return Math.min(max - min + 1, maxTickCount);
                    }
                    axis_1.getBestNumberOfTicks = getBestNumberOfTicks;
                    function hasNonIntegerData(valuesMetadata) {
                        for (var i = 0, len = valuesMetadata.length; i < len; i++) {
                            var currentMetadata = valuesMetadata[i];
                            if (currentMetadata && currentMetadata.type && !currentMetadata.type.integer) {
                                return true;
                            }
                        }
                        return false;
                    }
                    axis_1.hasNonIntegerData = hasNonIntegerData;
                    function getRecommendedTickValues(maxTicks, scale, axisType, isScalar, minTickInterval) {
                        if (!isScalar || isOrdinalScale(scale)) {
                            return getRecommendedTickValuesForAnOrdinalRange(maxTicks, scale.domain());
                        }
                        else if (isDateTime(axisType)) {
                            return getRecommendedTickValuesForADateTimeRange(maxTicks, scale.domain());
                        }
                        return getRecommendedTickValuesForAQuantitativeRange(maxTicks, scale, minTickInterval);
                    }
                    axis_1.getRecommendedTickValues = getRecommendedTickValues;
                    function getRecommendedTickValuesForAnOrdinalRange(maxTicks, labels) {
                        var tickLabels = [];
                        // return no ticks in this case
                        if (maxTicks <= 0)
                            return tickLabels;
                        var len = labels.length;
                        if (maxTicks > len)
                            return labels;
                        for (var i = 0, step = Math.ceil(len / maxTicks); i < len; i += step) {
                            tickLabels.push(labels[i]);
                        }
                        return tickLabels;
                    }
                    axis_1.getRecommendedTickValuesForAnOrdinalRange = getRecommendedTickValuesForAnOrdinalRange;
                    function getRecommendedTickValuesForAQuantitativeRange(maxTicks, scale, minInterval) {
                        var tickLabels = [];
                        // if maxticks is zero return none
                        if (maxTicks === 0)
                            return tickLabels;
                        var quantitiveScale = scale;
                        if (quantitiveScale.ticks) {
                            tickLabels = quantitiveScale.ticks(maxTicks);
                            if (tickLabels.length > maxTicks && maxTicks > 1)
                                tickLabels = quantitiveScale.ticks(maxTicks - 1);
                            if (tickLabels.length < MinTickCount) {
                                tickLabels = quantitiveScale.ticks(maxTicks + 1);
                            }
                            tickLabels = createTrueZeroTickLabel(tickLabels);
                            if (minInterval && tickLabels.length > 1) {
                                var tickInterval = tickLabels[1] - tickLabels[0];
                                while (tickInterval > 0 && tickInterval < minInterval) {
                                    for (var i = 1; i < tickLabels.length; i++) {
                                        tickLabels.splice(i, 1);
                                    }
                                    tickInterval = tickInterval * 2;
                                }
                                // keep at least two labels - the loop above may trim all but one if we have odd # of tick labels and dynamic range < minInterval
                                if (tickLabels.length === 1) {
                                    tickLabels.push(tickLabels[0] + minInterval);
                                }
                            }
                            return tickLabels;
                        }
                        return tickLabels;
                    }
                    axis_1.getRecommendedTickValuesForAQuantitativeRange = getRecommendedTickValuesForAQuantitativeRange;
                    /**
                     * Round out very small zero tick values (e.g. -1e-33 becomes 0).
                     *
                     * @param ticks Array of numbers (from d3.scale.ticks([maxTicks])).
                     * @param epsilon Max ratio of calculated tick interval which we will recognize as zero.
                     *
                     * e.g.
                     *     ticks = [-2, -1, 1e-10, 3, 4]; epsilon = 1e-5;
                     *     closeZero = 1e-5 * | 2 - 1 | = 1e-5
                     *     // Tick values <= 1e-5 replaced with 0
                     *     return [-2, -1, 0, 3, 4];
                     */
                    function createTrueZeroTickLabel(ticks, epsilon) {
                        if (epsilon === void 0) { epsilon = 1e-5; }
                        if (!ticks || ticks.length < 2)
                            return ticks;
                        var closeZero = epsilon * Math.abs(ticks[1] - ticks[0]);
                        return ticks.map(function (tick) { return Math.abs(tick) <= closeZero ? 0 : tick; });
                    }
                    function getRecommendedTickValuesForADateTimeRange(maxTicks, dataDomain) {
                        var tickLabels = [];
                        if (dataDomain[0] === 0 && dataDomain[1] === 0)
                            return [];
                        var dateTimeTickLabels = DateTimeSequence.calculate(new Date(dataDomain[0]), new Date(dataDomain[1]), maxTicks).sequence;
                        tickLabels = dateTimeTickLabels.map(function (d) { return d.getTime(); });
                        tickLabels = ensureValuesInRange(tickLabels, dataDomain[0], dataDomain[1]);
                        return tickLabels;
                    }
                    function normalizeLinearDomain(domain) {
                        if (isNaN(domain.min) || isNaN(domain.max)) {
                            domain.min = axis_1.emptyDomain[0];
                            domain.max = axis_1.emptyDomain[1];
                        }
                        else if (domain.min === domain.max) {
                            // d3 linear scale will give zero tickValues if max === min, so extend a little
                            domain.min = domain.min < 0 ? domain.min * 1.2 : domain.min * 0.8;
                            domain.max = domain.max < 0 ? domain.max * 0.8 : domain.max * 1.2;
                        }
                        else {
                            // Check that min is very small and is a negligable portion of the whole domain.
                            // (fix floating pt precision bugs)
                            // sometimes highlight value math causes small negative numbers which makes the axis add
                            // a large tick interval instead of just rendering at zero.
                            if (Math.abs(domain.min) < 0.0001 && domain.min / (domain.max - domain.min) < 0.0001) {
                                domain.min = 0;
                            }
                        }
                        return domain;
                    }
                    function getMargin(availableWidth, availableHeight, xMargin, yMargin) {
                        if (getRecommendedNumberOfTicksForXAxis(availableWidth - xMargin) === 0
                            || getRecommendedNumberOfTicksForYAxis(availableHeight - yMargin) === 0) {
                            return {
                                top: 0,
                                right: xMargin,
                                bottom: yMargin,
                                left: 0
                            };
                        }
                        return {
                            top: 20,
                            right: 30,
                            bottom: 40,
                            left: 30
                        };
                    }
                    axis_1.getMargin = getMargin;
                    // TODO: Put the parameters into one object
                    function getTickLabelMargins(viewport, yMarginLimit, textWidthMeasurer, textHeightMeasurer, axes, bottomMarginLimit, properties, scrollbarVisible, showOnRight, renderXAxis, renderY1Axis, renderY2Axis) {
                        var xAxisProperties = axes.x;
                        var y1AxisProperties = axes.y1;
                        var y2AxisProperties = axes.y2;
                        var xLabels = xAxisProperties.values;
                        var y1Labels = y1AxisProperties.values;
                        var leftOverflow = 0;
                        var rightOverflow = 0;
                        var maxWidthY1 = 0;
                        var maxWidthY2 = 0;
                        var xMax = 0; // bottom margin
                        var ordinalLabelOffset = xAxisProperties.categoryThickness ? xAxisProperties.categoryThickness / 2 : 0;
                        var scaleIsOrdinal = isOrdinalScale(xAxisProperties.scale);
                        var hasHierarchy = !_.isEmpty(axes.xStack);
                        var xLabelOuterPadding = 0;
                        if (xAxisProperties.outerPadding !== undefined) {
                            xLabelOuterPadding = xAxisProperties.outerPadding;
                        }
                        else if (xAxisProperties.xLabelMaxWidth !== undefined) {
                            xLabelOuterPadding = Math.max(0, (viewport.width - xAxisProperties.xLabelMaxWidth * xLabels.length) / 2);
                        }
                        var textHeight;
                        if (getRecommendedNumberOfTicksForXAxis(viewport.width) !== 0
                            || getRecommendedNumberOfTicksForYAxis(viewport.height) !== 0) {
                            var rotation = void 0;
                            if (scrollbarVisible || hasHierarchy)
                                rotation = LabelLayoutStrategy.DefaultRotationWithScrollbar;
                            else
                                rotation = LabelLayoutStrategy.DefaultRotation;
                            if (renderY1Axis) {
                                for (var i = 0, len = y1Labels.length; i < len; i++) {
                                    properties.text = y1Labels[i];
                                    maxWidthY1 = Math.max(maxWidthY1, textWidthMeasurer(properties));
                                }
                            }
                            if (y2AxisProperties && renderY2Axis) {
                                var y2Labels = y2AxisProperties.values;
                                for (var i = 0, len = y2Labels.length; i < len; i++) {
                                    properties.text = y2Labels[i];
                                    maxWidthY2 = Math.max(maxWidthY2, textWidthMeasurer(properties));
                                }
                            }
                            textHeight = textHeightMeasurer(properties);
                            var maxNumLines = Math.floor(bottomMarginLimit / textHeight);
                            var xScale = xAxisProperties.scale;
                            var xDomain = xScale.domain();
                            if (renderXAxis && xLabels.length > 0) {
                                for (var i = 0, len = xLabels.length; i < len; i++) {
                                    // find the max height of the x-labels, perhaps rotated or wrapped
                                    var height = void 0;
                                    properties.text = xLabels[i];
                                    var width = textWidthMeasurer(properties);
                                    if (xAxisProperties.willLabelsWordBreak) {
                                        // Split label and count rows
                                        var wordBreaks = wordBreaker.splitByWidth(properties.text, properties, textWidthMeasurer, xAxisProperties.xLabelMaxWidth, maxNumLines);
                                        height = wordBreaks.length * textHeight;
                                        // word wrapping will truncate at xLabelMaxWidth
                                        width = xAxisProperties.xLabelMaxWidth;
                                    }
                                    else if (!xAxisProperties.willLabelsFit && scaleIsOrdinal) {
                                        height = width * rotation.sine;
                                        width = width * rotation.cosine;
                                    }
                                    else {
                                        height = TextHeightConstant;
                                    }
                                    // calculate left and right overflow due to wide X labels
                                    // (Note: no right overflow when rotated)
                                    if (i === 0) {
                                        if (scaleIsOrdinal) {
                                            if (!xAxisProperties.willLabelsFit /*rotated text*/)
                                                leftOverflow = width - ordinalLabelOffset - xLabelOuterPadding;
                                            else
                                                leftOverflow = (width / 2) - ordinalLabelOffset - xLabelOuterPadding;
                                            leftOverflow = Math.max(leftOverflow, 0);
                                        }
                                        else if (xDomain.length > 1) {
                                            // Scalar - do some math
                                            var xPos = xScale(xDomain[0]);
                                            // xPos already incorporates xLabelOuterPadding, don't subtract it twice
                                            leftOverflow = (width / 2) - xPos;
                                            leftOverflow = Math.max(leftOverflow, 0);
                                        }
                                    }
                                    else if (i === len - 1) {
                                        if (scaleIsOrdinal) {
                                            // if we are rotating text (!willLabelsFit) there won't be any right overflow
                                            if (xAxisProperties.willLabelsFit || xAxisProperties.willLabelsWordBreak) {
                                                // assume this label is placed near the edge
                                                rightOverflow = (width / 2) - ordinalLabelOffset - xLabelOuterPadding;
                                                rightOverflow = Math.max(rightOverflow, 0);
                                            }
                                        }
                                        else if (xDomain.length > 1) {
                                            // Scalar - do some math
                                            var xPos = xScale(xDomain[1]);
                                            // xPos already incorporates xLabelOuterPadding, don't subtract it twice
                                            rightOverflow = (width / 2) - (viewport.width - xPos);
                                            rightOverflow = Math.max(rightOverflow, 0);
                                        }
                                    }
                                    xMax = Math.max(xMax, height);
                                }
                                // trim any actual overflow to the limit
                                leftOverflow = Math.min(leftOverflow, XLabelMaxAllowedOverflow);
                                rightOverflow = Math.min(rightOverflow, XLabelMaxAllowedOverflow);
                            }
                        }
                        var rightMargin = 0, leftMargin = 0, bottomMargin = Math.min(Math.ceil(xMax), bottomMarginLimit);
                        if (showOnRight) {
                            leftMargin = Math.min(Math.max(leftOverflow, maxWidthY2), yMarginLimit);
                            rightMargin = Math.min(Math.max(rightOverflow, maxWidthY1), yMarginLimit);
                        }
                        else {
                            leftMargin = Math.min(Math.max(leftOverflow, maxWidthY1), yMarginLimit);
                            rightMargin = Math.min(Math.max(rightOverflow, maxWidthY2), yMarginLimit);
                        }
                        if (hasHierarchy) {
                            bottomMargin += (textHeight + axis_1.stackedAxisPadding) * (axes.xStack.length - 1);
                        }
                        return {
                            xMax: Math.ceil(bottomMargin),
                            yLeft: Math.ceil(leftMargin),
                            yRight: Math.ceil(rightMargin),
                            stackHeight: textHeight + axis_1.stackedAxisPadding,
                        };
                    }
                    axis_1.getTickLabelMargins = getTickLabelMargins;
                    function columnDataTypeHasValue(dataType) {
                        return dataType && (dataType.bool || dataType.numeric || dataType.text || dataType.dateTime);
                    }
                    axis_1.columnDataTypeHasValue = columnDataTypeHasValue;
                    function createOrdinalType() {
                        return ValueType.fromDescriptor({ text: true });
                    }
                    axis_1.createOrdinalType = createOrdinalType;
                    function isOrdinal(type) {
                        return !!(type && (type.text || type.bool || (type.misc && type.misc.barcode) || (type.geography && type.geography.postalCode)));
                    }
                    axis_1.isOrdinal = isOrdinal;
                    function isOrdinalScale(scale) {
                        return typeof scale.rangePoints === "function";
                    }
                    axis_1.isOrdinalScale = isOrdinalScale;
                    function isDateTime(type) {
                        return !!(type && type.dateTime);
                    }
                    axis_1.isDateTime = isDateTime;
                    function invertScale(scale, x) {
                        if (isOrdinalScale(scale)) {
                            return invertOrdinalScale(scale, x);
                        }
                        return scale.invert(x);
                    }
                    axis_1.invertScale = invertScale;
                    function extent(scale) {
                        if (isOrdinalScale(scale)) {
                            return scale.rangeExtent();
                        }
                        return scale.range();
                    }
                    axis_1.extent = extent;
                    /**
                     * Uses the D3 scale to get the actual category thickness.
                     * @return The difference between the 1st and 2nd items in the range if there are 2 or more items in the range.
                     * Otherwise, the length of the entire range.
                     */
                    function getCategoryThickness(scale) {
                        var leftEdges = scale.range();
                        if (leftEdges.length < 2) {
                            // We have 1 item if we don't have 2 edges. If we have 1 item, just use the entire axis length as the thickness.
                            if (isOrdinalScale(scale)) {
                                // We should only hit this if we have an ordinal scale. Other scales should always have 2 items in their range.
                                var rangeExtent = scale.rangeExtent();
                                return rangeExtent[1] - rangeExtent[0];
                            }
                        }
                        return leftEdges[1] - leftEdges[0];
                    }
                    axis_1.getCategoryThickness = getCategoryThickness;
                    /**
                     * Inverts the ordinal scale. If x < scale.range()[0], then scale.domain()[0] is returned.
                     * Otherwise, it returns the greatest item in scale.domain() that's <= x.
                     */
                    function invertOrdinalScale(scale, x) {
                        var leftEdges = scale.range();
                        if (leftEdges.length < 2) {
                            return 0;
                        }
                        var width = scale.rangeBand();
                        var halfInnerPadding = (leftEdges[1] - leftEdges[0] - width) / 2;
                        var range = scale.range();
                        var domain = scale.domain();
                        // If x is less than the range, just return the 1st item in the domain
                        if (range[0] > x) {
                            return domain[0];
                        }
                        // d3.bisect returns the index at which we can insert something so that everything before it is lesser and everything after it is greater.
                        // The leftEdges don't include the inner padding, so we need to shift x over by halfInnerPadding to account it.
                        // We want index - 1 since that's the greatest value less than x, meaning that's the band we're in.
                        // Use that index to find the right value in the domain.
                        return domain[d3.bisect(range, x + halfInnerPadding) - 1];
                    }
                    axis_1.invertOrdinalScale = invertOrdinalScale;
                    function findClosestXAxisIndex(categoryValue, categoryAxisValues) {
                        var closestValueIndex = -1, minDistance = Number.MAX_VALUE;
                        for (var i in categoryAxisValues) {
                            var distance = Math.abs(categoryValue - categoryAxisValues[i].categoryValue);
                            if (distance < minDistance) {
                                minDistance = distance;
                                closestValueIndex = parseInt(i, 10);
                            }
                        }
                        return closestValueIndex;
                    }
                    axis_1.findClosestXAxisIndex = findClosestXAxisIndex;
                    function lookupOrdinalIndex(scale, pixelValue) {
                        var closestValueIndex = -1;
                        var minDistance = Number.MAX_VALUE;
                        var domain = scale.domain();
                        if (domain.length < 2) {
                            return 0;
                        }
                        var halfWidth = (scale(1) - scale(0)) / 2;
                        for (var idx in domain) {
                            var leftEdgeInPixels = scale(idx);
                            var midPoint = leftEdgeInPixels + halfWidth;
                            var distance = Math.abs(pixelValue - midPoint);
                            if (distance < minDistance) {
                                minDistance = distance;
                                closestValueIndex = parseInt(idx, 10);
                            }
                        }
                        return closestValueIndex;
                    }
                    axis_1.lookupOrdinalIndex = lookupOrdinalIndex;
                    /** scale(value1) - scale(value2) with zero checking and min(+/-1, result) */
                    function diffScaled(scale, value1, value2) {
                        var value = scale(value1) - scale(value2);
                        if (value === 0) {
                            return 0;
                        }
                        if (value < 0) {
                            return Math.min(value, -1);
                        }
                        return Math.max(value, 1);
                    }
                    axis_1.diffScaled = diffScaled;
                    function createDomain(data, axisType, isScalar, forcedScalarDomain, ensureDomain) {
                        if (isScalar && !isOrdinal(axisType)) {
                            var userMin = void 0, userMax = void 0;
                            if (forcedScalarDomain && forcedScalarDomain.length === 2) {
                                userMin = forcedScalarDomain[0];
                                userMax = forcedScalarDomain[1];
                            }
                            return createScalarDomain(data, userMin, userMax, axisType, ensureDomain);
                        }
                        return createOrdinalDomain(data);
                    }
                    axis_1.createDomain = createDomain;
                    function ensureValuesInRange(values, min, max) {
                        var filteredValues = values.filter(function (v) { return v >= min && v <= max; });
                        if (filteredValues.length < 2) {
                            filteredValues = [min, max];
                        }
                        return filteredValues;
                    }
                    axis_1.ensureValuesInRange = ensureValuesInRange;
                    /**
                     * Gets the ValueType of a category column, defaults to Text if the type is not present.
                     */
                    function getCategoryValueType(metadataColumn, isScalar) {
                        if (metadataColumn && columnDataTypeHasValue(metadataColumn.type)) {
                            return metadataColumn.type;
                        }
                        if (isScalar) {
                            return ValueType.fromDescriptor({ numeric: true });
                        }
                        return ValueType.fromDescriptor({ text: true });
                    }
                    axis_1.getCategoryValueType = getCategoryValueType;
                    /**
                     * Create a D3 axis including scale. Can be vertical or horizontal, and either datetime, numeric, or text.
                     * @param options The properties used to create the axis.
                     */
                    function createAxis(options) {
                        var pixelSpan = options.pixelSpan, dataDomain = options.dataDomain, metaDataColumn = options.metaDataColumn, formatString = options.formatString, outerPadding = options.outerPadding || 0, isCategoryAxis = !!options.isCategoryAxis, isScalar = !!options.isScalar, isVertical = !!options.isVertical, useTickIntervalForDisplayUnits = !!options.useTickIntervalForDisplayUnits, // DEPRECATE: same meaning as isScalar?
                        getValueFn = options.getValueFn, categoryThickness = options.categoryThickness, axisDisplayUnits = options.axisDisplayUnits, axisPrecision = options.axisPrecision, is100Pct = !!options.is100Pct, disableNice = options.disableNice;
                        var dataType = getCategoryValueType(metaDataColumn, isScalar);
                        // Create the Scale
                        var scaleResult = createScale(options);
                        var scale = scaleResult.scale;
                        var bestTickCount = scaleResult.bestTickCount;
                        var scaleDomain = scale.domain();
                        var isLogScaleAllowed = isLogScalePossible(dataDomain, dataType);
                        // fix categoryThickness if scalar and the domain was adjusted when making the scale "nice"
                        if (categoryThickness && isScalar && dataDomain && dataDomain.length === 2) {
                            var oldSpan = dataDomain[1] - dataDomain[0];
                            var newSpan = scaleDomain[1] - scaleDomain[0];
                            if (oldSpan > 0 && newSpan > 0) {
                                categoryThickness = categoryThickness * oldSpan / newSpan;
                            }
                        }
                        // Prepare Tick Values for formatting
                        var tickValues;
                        if (isScalar && !_.isEmpty(dataDomain) && bestTickCount === 1) {
                            tickValues = [dataDomain[0]];
                        }
                        else {
                            var minTickInterval = isScalar ? getMinTickValueInterval(formatString, dataType, is100Pct) : undefined;
                            tickValues = getRecommendedTickValues(bestTickCount, scale, dataType, isScalar, minTickInterval);
                        }
                        if (options.scaleType && options.scaleType === axisScale.log && isLogScaleAllowed) {
                            tickValues = tickValues.filter(function (d) { return powerOfTen(d); });
                        }
                        var formatter = createFormatter(scaleDomain, dataDomain, dataType, isScalar, formatString, bestTickCount, tickValues, getValueFn, useTickIntervalForDisplayUnits, axisDisplayUnits, axisPrecision);
                        // sets default orientation only, cartesianChart will fix y2 for comboChart
                        // tickSize(pixelSpan) is used to create gridLines
                        var axis = d3.svg.axis()
                            .scale(scale)
                            .tickSize(6, 0)
                            .orient(isVertical ? "left" : "bottom")
                            .ticks(bestTickCount)
                            .tickValues(tickValues);
                        var formattedTickValues = [];
                        if (metaDataColumn)
                            formattedTickValues = formatAxisTickValues(axis, tickValues, formatter, dataType, getValueFn);
                        var xLabelMaxWidth;
                        // Use category layout of labels if specified, otherwise use scalar layout of labels
                        if (!isScalar && categoryThickness) {
                            xLabelMaxWidth = Math.max(1, categoryThickness - TickLabelPadding * 2);
                        }
                        else {
                            // When there are 0 or 1 ticks, then xLabelMaxWidth = pixelSpan       
                            xLabelMaxWidth = tickValues.length > 1 ? getScalarLabelMaxWidth(scale, tickValues) : pixelSpan;
                            xLabelMaxWidth = xLabelMaxWidth - ScalarTickLabelPadding * 2;
                        }
                        return {
                            scale: scale,
                            axis: axis,
                            formatter: formatter,
                            values: formattedTickValues,
                            axisType: dataType,
                            axisLabel: null,
                            isCategoryAxis: isCategoryAxis,
                            xLabelMaxWidth: xLabelMaxWidth,
                            categoryThickness: categoryThickness,
                            outerPadding: outerPadding,
                            usingDefaultDomain: scaleResult.usingDefaultDomain,
                            isLogScaleAllowed: isLogScaleAllowed,
                            dataDomain: dataDomain,
                        };
                    }
                    axis_1.createAxis = createAxis;
                    /**
                     * Creates a D3 axis for stacked axis usage. `options.innerTickSize` and `options.outerTickSize` will be defaulted to 0 if not set.
                     * `options.orientation` will be defaulted to "bottom" if not specified.
                     */
                    function createStackedAxis(options) {
                        var axis = options.axis;
                        var orientation = options.orient != null ? axis_1.AxisOrientation[options.orient] : axis_1.AxisOrientation[axis_1.AxisOrientation.bottom];
                        return d3.svg.axis()
                            .scale(options.scale)
                            .tickSize(options.innerTickSize || 0, options.outerTickSize || 0)
                            .orient(orientation)
                            .ticks(axis.ticks())
                            .tickValues(axis.tickValues())
                            .tickFormat(options.tickFormat);
                    }
                    axis_1.createStackedAxis = createStackedAxis;
                    function getScalarLabelMaxWidth(scale, tickValues) {
                        // find the distance between two ticks. scalar ticks can be anywhere, such as:
                        // |---50----------100--------|
                        if (scale && !_.isEmpty(tickValues)) {
                            return Math.abs(scale(tickValues[1]) - scale(tickValues[0]));
                        }
                        return 1;
                    }
                    function createScale(options) {
                        var pixelSpan = options.pixelSpan, dataDomain = options.dataDomain, metaDataColumn = options.metaDataColumn, outerPadding = options.outerPadding || 0, isScalar = !!options.isScalar, isVertical = !!options.isVertical, forcedTickCount = options.forcedTickCount, categoryThickness = options.categoryThickness, shouldClamp = !!options.shouldClamp, maxTickCount = options.maxTickCount, disableNice = options.disableNice;
                        var dataType = getCategoryValueType(metaDataColumn, isScalar);
                        var maxTicks = isVertical ? getRecommendedNumberOfTicksForYAxis(pixelSpan) : getRecommendedNumberOfTicksForXAxis(pixelSpan);
                        if (maxTickCount &&
                            maxTicks > maxTickCount)
                            maxTicks = maxTickCount;
                        var scalarDomain = dataDomain ? dataDomain.slice() : null;
                        var bestTickCount = maxTicks;
                        if (disableNice)
                            bestTickCount = null;
                        var scale;
                        var usingDefaultDomain = false;
                        if (dataDomain == null || (dataDomain.length === 2 && dataDomain[0] == null && dataDomain[1] == null) || (dataDomain.length !== 2 && isScalar)) {
                            usingDefaultDomain = true;
                            if (dataType.dateTime || !isOrdinal(dataType))
                                dataDomain = axis_1.emptyDomain;
                            else
                                dataDomain = [];
                            if (isOrdinal(dataType)) {
                                scale = createOrdinalScale(pixelSpan, dataDomain, categoryThickness ? outerPadding / categoryThickness : 0);
                            }
                            else {
                                scale = createNumericalScale(options.scaleType, pixelSpan, dataDomain, dataType, outerPadding, bestTickCount);
                            }
                        }
                        else {
                            if (isScalar && dataDomain.length > 0) {
                                if (!disableNice)
                                    bestTickCount = forcedTickCount !== undefined
                                        ? (maxTicks !== 0 ? forcedTickCount : 0)
                                        : getBestNumberOfTicks(dataDomain[0], dataDomain[dataDomain.length - 1], [metaDataColumn], maxTicks, dataType.dateTime);
                                var normalizedRange = normalizeLinearDomain({ min: dataDomain[0], max: dataDomain[dataDomain.length - 1] });
                                scalarDomain = [normalizedRange.min, normalizedRange.max];
                            }
                            if (isScalar && dataType.numeric && !dataType.dateTime) {
                                if (scalarDomain && scalarDomain.length === 2 && scalarDomain[0] === 0 && scalarDomain[1] === 0 && options.zeroScalarDomain) {
                                    scalarDomain[0] = options.zeroScalarDomain[0];
                                    scalarDomain[1] = options.zeroScalarDomain[1];
                                }
                                scale = createNumericalScale(options.scaleType, pixelSpan, scalarDomain, dataType, outerPadding, bestTickCount, shouldClamp);
                            }
                            else if (isScalar && dataType.dateTime) {
                                // Use of a linear scale, instead of a D3.time.scale, is intentional since we want
                                // to control the formatting of the time values, since d3's implementation isn't
                                // in accordance to our design.
                                //     scalarDomain: should already be in long-int time (via category.values[0].getTime())
                                scale = createLinearScale(pixelSpan, scalarDomain, outerPadding, null, shouldClamp); // DO NOT PASS TICKCOUNT
                            }
                            else if (dataType.text || dataType.dateTime || dataType.numeric || dataType.bool) {
                                scale = createOrdinalScale(pixelSpan, scalarDomain, categoryThickness ? outerPadding / categoryThickness : 0);
                                bestTickCount = maxTicks === 0 ? 0
                                    : Math.min(scalarDomain.length, (pixelSpan - outerPadding * 2) / MinOrdinalRectThickness);
                            }
                        }
                        // vertical ordinal axis (e.g. categorical bar chart) does not need to reverse
                        if (isVertical && isScalar) {
                            scale.range(scale.range().reverse());
                        }
                        normalizeInfinityInScale(scale);
                        return {
                            scale: scale,
                            bestTickCount: bestTickCount,
                            usingDefaultDomain: usingDefaultDomain,
                        };
                    }
                    axis_1.createScale = createScale;
                    function normalizeInfinityInScale(scale) {
                        // When large values (eg Number.MAX_VALUE) are involved, a call to scale.nice occasionally
                        // results in infinite values being included in the domain. To correct for that, we need to
                        // re-normalize the domain now to not include infinities.
                        var scaledDomain = scale.domain();
                        for (var i = 0, len = scaledDomain.length; i < len; ++i) {
                            if (scaledDomain[i] === Number.POSITIVE_INFINITY) {
                                scaledDomain[i] = Number.MAX_VALUE;
                            }
                            else if (scaledDomain[i] === Number.NEGATIVE_INFINITY) {
                                scaledDomain[i] = -Number.MAX_VALUE;
                            }
                        }
                        scale.domain(scaledDomain);
                    }
                    axis_1.normalizeInfinityInScale = normalizeInfinityInScale;
                    function createFormatter(scaleDomain, dataDomain, dataType, isScalar, formatString, bestTickCount, tickValues, getValueFn, useTickIntervalForDisplayUnits, axisDisplayUnits, axisPrecision) {
                        if (useTickIntervalForDisplayUnits === void 0) { useTickIntervalForDisplayUnits = false; }
                        var formatter;
                        if (dataType.dateTime) {
                            if (isScalar) {
                                var value = new Date(scaleDomain[0]);
                                var value2 = new Date(scaleDomain[1]);
                                // datetime with only one value needs to pass the same value
                                // (from the original dataDomain value, not the adjusted scaleDomain)
                                // so formatting works correctly.
                                if (bestTickCount === 1)
                                    value = value2 = new Date(dataDomain[0]);
                                // this will ignore the formatString and create one based on the smallest non-zero portion of the values supplied.
                                formatter = valueFormatter.create({
                                    format: formatString,
                                    value: value,
                                    value2: value2,
                                    tickCount: bestTickCount,
                                });
                            }
                            else {
                                // Use the model formatString for ordinal datetime
                                formatter = valueFormatter.createDefaultFormatter(formatString, true);
                            }
                        }
                        else {
                            if (useTickIntervalForDisplayUnits && isScalar && tickValues.length > 1) {
                                var value1 = axisDisplayUnits ? axisDisplayUnits : tickValues[1] - tickValues[0];
                                var options = {
                                    format: formatString,
                                    value: value1,
                                    value2: 0,
                                    allowFormatBeautification: true,
                                };
                                if (axisPrecision)
                                    options.precision = axisPrecision;
                                else
                                    options.precision = calculateAxisPrecision(tickValues[0], tickValues[1], axisDisplayUnits, formatString);
                                formatter = valueFormatter.create(options);
                            }
                            else {
                                // do not use display units, just the basic value formatter
                                // datetime is handled above, so we are ordinal and either boolean, numeric, or text.
                                formatter = valueFormatter.createDefaultFormatter(formatString, true);
                            }
                        }
                        return formatter;
                    }
                    axis_1.createFormatter = createFormatter;
                    // returns # of decimal places necessary to distinguish between tick mark values
                    function calculateAxisPrecision(tickValue0, tickValue1, axisDisplayUnits, formatString) {
                        if (!axisDisplayUnits) {
                            var displayUnitSystem = valueFormatter.createDisplayUnitSystem();
                            displayUnitSystem.update(tickValue1 - tickValue0);
                            axisDisplayUnits = displayUnitSystem.displayUnit && displayUnitSystem.displayUnit.value || 1;
                        }
                        var value0 = (tickValue0 || 0) / axisDisplayUnits;
                        var value1 = (tickValue1 || 0) / axisDisplayUnits;
                        if (formatString) {
                            var partsPerScale = numberFormat.getCustomFormatMetadata(formatString, false, false, true).partsPerScale;
                            value0 *= partsPerScale;
                            value1 *= partsPerScale;
                        }
                        return Math.max(calculateAxisPrecisionForValue(value0), calculateAxisPrecisionForValue(value1));
                    }
                    axis_1.calculateAxisPrecision = calculateAxisPrecision;
                    function calculateAxisPrecisionForValue(value) {
                        if (value === 0)
                            return 0;
                        if (value < 0)
                            value = -value;
                        // calculate place of of the most significant decimal digit.
                        // 1 means tens digit
                        // 0 means the ones digit
                        // -1 means tenths digit
                        var mostSignificantDigit = Math.floor(Double.log10(value));
                        // rounding in various calculations can introduce extraneous amounts of precision in the number
                        // no need in an axis label to allow more than this number of digits as the *difference* between
                        // ticks
                        var MaxDigits = 5;
                        if (mostSignificantDigit >= 0) {
                            // value has an integer part but may also have a fraction part. get the number of significant
                            // digits in the integer part then see how many that leaves us for the fractional part
                            var integerSignificantDigits = mostSignificantDigit + 1;
                            var maxFractionDigits = MaxDigits - integerSignificantDigits;
                            if (maxFractionDigits <= 0) {
                                // the value's integer part has at least MaxDigits of precision
                                // so there aren't any left for the fractional part
                                return 0;
                            }
                            return numberOfDecimalPlaces(value, maxFractionDigits);
                        }
                        else {
                            // the interval has no integer part - it is a pure decimal fraction. we want the number
                            // of decimal places we have to allow so the precision doesn't exceed MaxDigits.
                            // knowing where there most significant digit is in the fraction, we can scale
                            // the number to the range [0.1, 1)
                            var rescaledValue = value / Double.pow10(mostSignificantDigit + 1);
                            // get the actual number of significant digits respecting the maximum
                            var fractionSignificantDigits = numberOfDecimalPlaces(rescaledValue, MaxDigits);
                            // this is the number of zeroes that are required due to the true scale of the decimal fraction
                            var fractionScaleDigits = -mostSignificantDigit - 1;
                            // number of decimal places is the number of zeros plus the limited number of significant digits
                            return fractionScaleDigits + fractionSignificantDigits;
                        }
                    }
                    // if we're limiting the decimal places to maxDecimalPlaces, how many decimal places do
                    // we actually need to avoid trailing zeroes? for example, if the value is 1.500001 and
                    // we want a maximum of three decimal places, the number rounded to three places is 1.500
                    // so only one decimal place is necessary.
                    function numberOfDecimalPlaces(value, maxDecimalPlaces) {
                        var formattedValue = value.toFixed(maxDecimalPlaces);
                        var decimalPoint = formattedValue.indexOf(".");
                        if (decimalPoint !== -1) {
                            for (var i = formattedValue.length; i-- > decimalPoint;) {
                                if (formattedValue[i] !== "0") {
                                    return i - decimalPoint;
                                }
                            }
                        }
                        return 0;
                    }
                    /**
                     * Format the linear tick labels or the category labels.
                     */
                    function formatAxisTickValues(axis, tickValues, formatter, dataType, getValueFn) {
                        var formattedTickValues = [];
                        if (!getValueFn)
                            getValueFn = function (data) { return data; };
                        if (formatter) {
                            axis.tickFormat(function (d) { return formatter.format(getValueFn(d, dataType)); });
                            formattedTickValues = tickValues.map(function (d) { return formatter.format(getValueFn(d, dataType)); });
                        }
                        else {
                            formattedTickValues = tickValues.map(function (d) { return getValueFn(d, dataType); });
                        }
                        return formattedTickValues;
                    }
                    function getMinTickValueInterval(formatString, columnType, is100Pct) {
                        var isCustomFormat = formatString && !numberFormat.isStandardFormat(formatString);
                        if (isCustomFormat) {
                            var precision = numberFormat.getCustomFormatMetadata(formatString, true /*calculatePrecision*/).precision;
                            if (formatString.indexOf("%") > -1)
                                precision += 2; // percent values are multiplied by 100 during formatting
                            return Math.pow(10, -precision);
                        }
                        else if (is100Pct) {
                            return 0.01;
                        }
                        else if (columnType.integer) {
                            return 1;
                        }
                        return 0;
                    }
                    axis_1.getMinTickValueInterval = getMinTickValueInterval;
                    function createScalarDomain(data, userMin, userMax, axisType, ensureDomain) {
                        if (data.length === 0) {
                            return null;
                        }
                        var defaultMinX = d3.min(data, function (kv) { return d3.min(kv.data, function (d) { return d && d.categoryValue; }); });
                        var defaultMaxX = d3.max(data, function (kv) { return d3.max(kv.data, function (d) { return d && d.categoryValue; }); });
                        return combineDomain([userMin, userMax], [defaultMinX, defaultMaxX], ensureDomain);
                    }
                    /**
                     * Creates a [min,max] from your Cartiesian data values.
                     *
                     * @param data The series array of CartesianDataPoints.
                     * @param includeZero Columns and bars includeZero, line and scatter do not.
                     */
                    function createValueDomain(data, includeZero) {
                        if (data.length === 0)
                            return null;
                        var minY = d3.min(data, function (kv) { return d3.min(kv.data, function (d) { return d && d.value; }); });
                        var maxY = d3.max(data, function (kv) { return d3.max(kv.data, function (d) { return d && d.value; }); });
                        if (includeZero) {
                            return [Math.min(minY, 0), Math.max(maxY, 0)];
                        }
                        return [minY, maxY];
                    }
                    axis_1.createValueDomain = createValueDomain;
                    function createOrdinalDomain(data) {
                        if (_.isEmpty(data)) {
                            return [];
                        }
                        // each series shares the same categories for oridinal axes (even if a series has some nulls)
                        var domain = [];
                        var firstSeries = data[0];
                        for (var _i = 0, _a = firstSeries.data; _i < _a.length; _i++) {
                            var dp = _a[_i];
                            if (!dp.highlight) {
                                domain.push(dp.categoryIndex);
                            }
                        }
                        return domain;
                    }
                    var LabelLayoutStrategy;
                    (function (LabelLayoutStrategy) {
                        function willLabelsFit(axisProperties, availableWidth, textMeasurer, properties) {
                            var labels = axisProperties.values;
                            if (labels.length === 0)
                                return false;
                            var labelMaxWidth = axisProperties.xLabelMaxWidth !== undefined
                                ? axisProperties.xLabelMaxWidth
                                : availableWidth / labels.length;
                            return !labels.some(function (d) {
                                properties.text = d;
                                return textMeasurer(properties) > labelMaxWidth;
                            });
                        }
                        LabelLayoutStrategy.willLabelsFit = willLabelsFit;
                        function willLabelsWordBreak(axisProperties, margin, availableWidth, textWidthMeasurer, textHeightMeasurer, textTruncator, properties) {
                            var labels = axisProperties.values;
                            var labelMaxWidth = axisProperties.xLabelMaxWidth !== undefined
                                ? axisProperties.xLabelMaxWidth
                                : availableWidth / labels.length;
                            var maxRotatedLength = margin.bottom / LabelLayoutStrategy.DefaultRotation.sine;
                            var height = textHeightMeasurer(properties);
                            var maxNumLines = Math.max(1, Math.floor(margin.bottom / height));
                            if (labels.length === 0)
                                return false;
                            // If no break character and exceeds max width, word breaking will not work, return false
                            var mustRotate = labels.some(function (label) {
                                // Detect must rotate and return immediately
                                properties.text = label;
                                return !wordBreaker.hasBreakers(label) && textWidthMeasurer(properties) > labelMaxWidth;
                            });
                            if (mustRotate) {
                                return false;
                            }
                            var moreWordBreakChars = labels.filter(function (label, index) {
                                // ...otherwise compare rotation versus word breaking
                                var allowedLengthProjectedOnXAxis = 
                                // Left margin is the width of Y axis.
                                margin.left
                                    + axisProperties.outerPadding
                                    + axisProperties.categoryThickness * (index + 0.5)
                                    - LeftPadding;
                                var allowedLength = allowedLengthProjectedOnXAxis / LabelLayoutStrategy.DefaultRotation.cosine;
                                var rotatedLength = Math.min(allowedLength, maxRotatedLength);
                                // Which shows more characters? Rotated or maxNumLines truncated to labelMaxWidth?
                                var wordBreakChars = wordBreaker.splitByWidth(label, properties, textWidthMeasurer, labelMaxWidth, maxNumLines, textTruncator).join(" ");
                                properties.text = label;
                                var rotateChars = textTruncator(properties, rotatedLength);
                                // prefer word break (>=) as it takes up less plot area
                                return textUtil.removeEllipses(wordBreakChars).length >= textUtil.removeEllipses(rotateChars).length;
                            });
                            // prefer word break (>=) as it takes up less plot area
                            return moreWordBreakChars.length >= Math.floor(labels.length / 2);
                        }
                        LabelLayoutStrategy.willLabelsWordBreak = willLabelsWordBreak;
                        LabelLayoutStrategy.DefaultRotation = {
                            sine: Math.sin(Math.PI * (35 / 180)),
                            cosine: Math.cos(Math.PI * (35 / 180)),
                            tangent: Math.tan(Math.PI * (35 / 180)),
                            transform: "rotate(-35)",
                            dy: "-0.5em",
                        };
                        LabelLayoutStrategy.DefaultRotationWithScrollbar = {
                            sine: Math.sin(Math.PI * (90 / 180)),
                            cosine: Math.cos(Math.PI * (90 / 180)),
                            tangent: Math.tan(Math.PI * (90 / 180)),
                            transform: "rotate(-90)",
                            dy: "-0.8em",
                        };
                        // NOTE: the above rotations are matched to D3 tickSize(6,0) and do not work with other tick sizes.
                        // we hide these default ticks anyway (on category axes that require rotation), we should make this work
                        // with any tick size. For now just hardcode a TickSizeZero structure
                        LabelLayoutStrategy.DefaultRotationWithScrollbarTickSizeZero = {
                            sine: Math.sin(Math.PI * (90 / 180)),
                            cosine: Math.cos(Math.PI * (90 / 180)),
                            tangent: Math.tan(Math.PI * (90 / 180)),
                            transform: "rotate(-90)",
                            dy: "-0.3em",
                        };
                        /**
                         * Perform rotation and/or truncation of axis tick labels (SVG text) with ellipsis
                         */
                        function rotate(labelSelection, maxBottomMargin, textTruncator, textProperties, needRotate, needEllipsis, axisProperties, margin, scrollbarVisible) {
                            var rotatedLength;
                            var defaultRotation;
                            var tickSize = axisProperties.axis.tickSize();
                            if (scrollbarVisible) {
                                if (!tickSize)
                                    defaultRotation = LabelLayoutStrategy.DefaultRotationWithScrollbarTickSizeZero;
                                else
                                    defaultRotation = LabelLayoutStrategy.DefaultRotationWithScrollbar;
                            }
                            else {
                                defaultRotation = LabelLayoutStrategy.DefaultRotation;
                            }
                            if (needRotate) {
                                rotatedLength = maxBottomMargin / defaultRotation.sine;
                            }
                            labelSelection.each(function (datum) {
                                var axisLabel = d3.select(this);
                                var labelText = axisLabel.text();
                                textProperties.text = labelText;
                                if (needRotate) {
                                    var textContentIndex = axisProperties.values.indexOf(this.textContent);
                                    var allowedLengthProjectedOnXAxis = 
                                    // Left margin is the width of Y axis.
                                    margin.left
                                        + axisProperties.outerPadding
                                        + axisProperties.categoryThickness * (textContentIndex + 0.5);
                                    // Subtracting the left padding space from the allowed length.
                                    if (!scrollbarVisible)
                                        allowedLengthProjectedOnXAxis -= LeftPadding;
                                    // Truncate if scrollbar is visible or rotatedLength exceeds allowedLength
                                    var allowedLength = allowedLengthProjectedOnXAxis / defaultRotation.cosine;
                                    if (scrollbarVisible || needEllipsis || (allowedLength < rotatedLength)) {
                                        labelText = textTruncator(textProperties, Math.min(allowedLength, rotatedLength));
                                        axisLabel.text(labelText);
                                    }
                                    // NOTE: see note above - rotation only lines up with default d3 tickSize(6,0)
                                    // TODO don't do these rotations if we already did them
                                    axisLabel.style("text-anchor", "end")
                                        .attr({
                                        "dx": "-0.5em",
                                        "dy": defaultRotation.dy,
                                        "transform": defaultRotation.transform
                                    });
                                }
                                else {
                                    var maxLabelWidth = !_.isEmpty(axisProperties.xLabelMaxWidths) ? axisProperties.xLabelMaxWidths[datum] : axisProperties.xLabelMaxWidth;
                                    var newLabelText = textTruncator(textProperties, maxLabelWidth);
                                    if (newLabelText !== labelText)
                                        axisLabel.text(newLabelText);
                                    // TODO don't do these rotations if we already did them
                                    axisLabel.style("text-anchor", "middle")
                                        .attr({
                                        "dx": "0em",
                                        "dy": "1em",
                                        "transform": "rotate(0)"
                                    });
                                }
                            });
                        }
                        LabelLayoutStrategy.rotate = rotate;
                        function wordBreak(text, axisProperties, maxHeight) {
                            var allowedLength = axisProperties.xLabelMaxWidth;
                            text.each(function () {
                                var node = d3.select(this);
                                // Reset style of text node
                                node
                                    .style("text-anchor", "middle")
                                    .attr({
                                    "dx": "0em",
                                    "dy": "1em",
                                    "transform": "rotate(0)"
                                });
                                textMeasurementService.wordBreak(this, allowedLength, maxHeight);
                            });
                        }
                        LabelLayoutStrategy.wordBreak = wordBreak;
                        function clip(text, availableWidth, svgEllipsis) {
                            if (text.size() === 0) {
                                return;
                            }
                            text.each(function () {
                                var text = d3.select(this);
                                svgEllipsis(text[0][0], availableWidth);
                            });
                        }
                        LabelLayoutStrategy.clip = clip;
                    })(LabelLayoutStrategy = axis_1.LabelLayoutStrategy || (axis_1.LabelLayoutStrategy = {}));
                    function createOrdinalScale(pixelSpan, dataDomain, outerPaddingRatio) {
                        if (outerPaddingRatio === void 0) { outerPaddingRatio = 0; }
                        return d3.scale.ordinal()
                            .rangeBands([0, pixelSpan], InnerPaddingRatio, outerPaddingRatio)
                            .domain(dataDomain);
                    }
                    axis_1.createOrdinalScale = createOrdinalScale;
                    function isLogScalePossible(domain, axisType) {
                        if (domain == null) {
                            return false;
                        }
                        if (isDateTime(axisType)) {
                            return false;
                        }
                        return (domain[0] > 0 && domain[1] > 0) || (domain[0] < 0 && domain[1] < 0); // doman must exclude 0
                    }
                    axis_1.isLogScalePossible = isLogScalePossible;
                    // this function can return different scales e.g. log, linear
                    // NOTE: export only for testing, do not access directly
                    function createNumericalScale(axisScaleType, pixelSpan, dataDomain, dataType, outerPadding, niceCount, shouldClamp) {
                        if (outerPadding === void 0) { outerPadding = 0; }
                        if (axisScaleType === axisScale.log && isLogScalePossible(dataDomain, dataType)) {
                            return createLogScale(pixelSpan, dataDomain, outerPadding, niceCount);
                        }
                        return createLinearScale(pixelSpan, dataDomain, outerPadding, niceCount, shouldClamp);
                    }
                    axis_1.createNumericalScale = createNumericalScale;
                    function createLogScale(pixelSpan, dataDomain, outerPadding, niceCount) {
                        if (outerPadding === void 0) { outerPadding = 0; }
                        var scale = d3.scale.log()
                            .range([outerPadding, pixelSpan - outerPadding])
                            .domain([dataDomain[0], dataDomain[1]])
                            .clamp(true);
                        if (niceCount) {
                            scale.nice(niceCount);
                        }
                        return scale;
                    }
                    // NOTE: export only for testing, do not access directly
                    function createLinearScale(pixelSpan, dataDomain, outerPadding, niceCount, shouldClamp) {
                        if (outerPadding === void 0) { outerPadding = 0; }
                        var scale = d3.scale.linear()
                            .range([outerPadding, pixelSpan - outerPadding])
                            .domain([dataDomain[0], dataDomain[1]])
                            .clamp(shouldClamp);
                        // .nice(undefined) still modifies the scale boundaries, and for datetime this messes things up.
                        // we use millisecond ticks since epoch for datetime, so we don't want any "nice" with numbers like 17398203392.
                        if (niceCount) {
                            scale.nice(niceCount);
                        }
                        return scale;
                    }
                    axis_1.createLinearScale = createLinearScale;
                    function getRangeForColumn(sizeColumn) {
                        var result = {};
                        if (sizeColumn) {
                            result.min = (sizeColumn.min == null
                                ? sizeColumn.minLocal == null ? d3.min(sizeColumn.values) : sizeColumn.minLocal
                                : sizeColumn.min);
                            result.max = (sizeColumn.max == null
                                ? sizeColumn.maxLocal == null ? d3.max(sizeColumn.values) : sizeColumn.maxLocal
                                : sizeColumn.max);
                        }
                        return result;
                    }
                    axis_1.getRangeForColumn = getRangeForColumn;
                    /**
                     * Set customized domain, but don't change when nothing is set
                     */
                    function applyCustomizedDomain(customizedDomain, forcedDomain) {
                        var domain = [undefined, undefined];
                        if (forcedDomain && forcedDomain.length === 2) {
                            domain = [forcedDomain[0], forcedDomain[1]];
                        }
                        if (customizedDomain && customizedDomain.length === 2) {
                            if (customizedDomain[0] != null) {
                                domain[0] = customizedDomain[0];
                            }
                            if (customizedDomain[1] != null) {
                                domain[1] = customizedDomain[1];
                            }
                        }
                        if (domain[0] == null && domain[1] == null) {
                            return forcedDomain; // return untouched object
                        }
                        // do extra check to see if the user input was valid with the merged axis values.
                        if (domain[0] != null && domain[1] != null) {
                            if (domain[0] > domain[1]) {
                                return forcedDomain;
                            }
                        }
                        return domain;
                    }
                    axis_1.applyCustomizedDomain = applyCustomizedDomain;
                    /**
                     * Combine the forced domain with the actual domain if one of the values was set.
                     * The forcedDomain is in 1st priority. Extends the domain if the any reference point requires it.
                     */
                    function combineDomain(forcedDomain, domain, ensureDomain) {
                        var combinedDomain = domain ? [domain[0], domain[1]] : [];
                        if (ensureDomain) {
                            if (combinedDomain[0] == null || ensureDomain.min < combinedDomain[0])
                                combinedDomain[0] = ensureDomain.min;
                            if (combinedDomain[1] == null || ensureDomain.max > combinedDomain[1])
                                combinedDomain[1] = ensureDomain.max;
                        }
                        var domainBeforeForced = [combinedDomain[0], combinedDomain[1]];
                        if (forcedDomain && forcedDomain.length === 2) {
                            if (forcedDomain[0] != null) {
                                combinedDomain[0] = forcedDomain[0];
                            }
                            if (forcedDomain[1] != null) {
                                combinedDomain[1] = forcedDomain[1];
                            }
                            if (combinedDomain[0] > combinedDomain[1]) {
                                combinedDomain = domainBeforeForced; // this is invalid, so take the original domain considering the values and the reference line
                            }
                        }
                        return combinedDomain;
                    }
                    axis_1.combineDomain = combineDomain;
                    function createAxisLabel(properties, label, unitType, y2) {
                        if (y2 === void 0) { y2 = false; }
                        var propertyName = y2 ? "secAxisStyle" : "axisStyle";
                        if (!properties || !properties[propertyName]) {
                            return label;
                        }
                        var modifiedLabel;
                        if (properties[propertyName] === axisStyle.showBoth) {
                            modifiedLabel = label + " (" + unitType + ")";
                        }
                        else if (properties[propertyName] === axisStyle.showUnitOnly) {
                            modifiedLabel = unitType;
                        }
                        else {
                            modifiedLabel = label;
                        }
                        return modifiedLabel;
                    }
                    axis_1.createAxisLabel = createAxisLabel;
                    function scaleShouldClamp(combinedDomain, domain) {
                        if (!combinedDomain || !domain || combinedDomain.length < 2 || domain.length < 2) {
                            return false;
                        }
                        // when the start or end is different, clamp it
                        return combinedDomain[0] !== domain[0] || combinedDomain[1] !== domain[1];
                    }
                    axis_1.scaleShouldClamp = scaleShouldClamp;
                    function normalizeNonFiniteNumber(value) {
                        if (isNaN(value)) {
                            return null;
                        }
                        else if (value === Number.POSITIVE_INFINITY) {
                            return Number.MAX_VALUE;
                        }
                        else if (value === Number.NEGATIVE_INFINITY) {
                            return -Number.MAX_VALUE;
                        }
                        return value;
                    }
                    axis_1.normalizeNonFiniteNumber = normalizeNonFiniteNumber;
                    /**
                     * Indicates whether the number is power of 10.
                     */
                    function powerOfTen(d) {
                        var value = Math.abs(d);
                        // formula log2(Y)/log2(10) = log10(Y)
                        // because double issues this won't return exact value
                        // we need to ceil it to nearest number.
                        var log10 = Math.log(value) / Math.LN10;
                        log10 = Math.ceil(log10 - 1e-12);
                        return value / Math.pow(10, log10) === 1;
                    }
                    axis_1.powerOfTen = powerOfTen;
                })(axis = chart.axis || (chart.axis = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var legend;
                (function (legend) {
                    (function (LegendIcon) {
                        LegendIcon[LegendIcon["Box"] = 0] = "Box";
                        LegendIcon[LegendIcon["Circle"] = 1] = "Circle";
                        LegendIcon[LegendIcon["Line"] = 2] = "Line";
                    })(legend.LegendIcon || (legend.LegendIcon = {}));
                    var LegendIcon = legend.LegendIcon;
                    (function (LegendPosition) {
                        LegendPosition[LegendPosition["Top"] = 0] = "Top";
                        LegendPosition[LegendPosition["Bottom"] = 1] = "Bottom";
                        LegendPosition[LegendPosition["Right"] = 2] = "Right";
                        LegendPosition[LegendPosition["Left"] = 3] = "Left";
                        LegendPosition[LegendPosition["None"] = 4] = "None";
                        LegendPosition[LegendPosition["TopCenter"] = 5] = "TopCenter";
                        LegendPosition[LegendPosition["BottomCenter"] = 6] = "BottomCenter";
                        LegendPosition[LegendPosition["RightCenter"] = 7] = "RightCenter";
                        LegendPosition[LegendPosition["LeftCenter"] = 8] = "LeftCenter";
                    })(legend.LegendPosition || (legend.LegendPosition = {}));
                    var LegendPosition = legend.LegendPosition;
                    legend.legendProps = {
                        show: "show",
                        position: "position",
                        titleText: "titleText",
                        showTitle: "showTitle",
                        labelColor: "labelColor",
                        fontSize: "fontSize",
                    };
                })(legend = chart.legend || (chart.legend = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var legend;
                (function (legend) {
                    var interactivityUtils = powerbi.extensibility.utils.interactivity.interactivityUtils;
                    var LegendBehavior = (function () {
                        function LegendBehavior() {
                        }
                        LegendBehavior.prototype.bindEvents = function (options, selectionHandler) {
                            var legendItems = options.legendItems;
                            this.legendIcons = options.legendIcons;
                            var clearCatcher = options.clearCatcher;
                            interactivityUtils.registerStandardSelectionHandler(legendItems, selectionHandler);
                            clearCatcher.on("click", function () {
                                selectionHandler.handleClearSelection();
                            });
                        };
                        LegendBehavior.prototype.renderSelection = function (hasSelection) {
                            if (hasSelection) {
                                this.legendIcons.style({
                                    "fill": function (d) {
                                        if (!d.selected) {
                                            return LegendBehavior.dimmedLegendColor;
                                        }
                                        else {
                                            return d.color;
                                        }
                                    }
                                });
                            }
                            else {
                                this.legendIcons.style({
                                    "fill": function (d) {
                                        return d.color;
                                    }
                                });
                            }
                        };
                        LegendBehavior.dimmedLegendColor = "#A6A6A6";
                        return LegendBehavior;
                    }());
                    legend.LegendBehavior = LegendBehavior;
                })(legend = chart.legend || (chart.legend = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var legend;
                (function (legend) {
                    var position;
                    (function (position) {
                        position.top = "Top";
                        position.bottom = "Bottom";
                        position.left = "Left";
                        position.right = "Right";
                        position.topCenter = "TopCenter";
                        position.bottomCenter = "BottomCenter";
                        position.leftCenter = "LeftCenter";
                        position.rightCenter = "RightCenter";
                    })(position = legend.position || (legend.position = {}));
                })(legend = chart.legend || (chart.legend = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var legend;
                (function (legend_1) {
                    function createLegend(legendParentElement, interactive, interactivityService, isScrollable, legendPosition) {
                        if (isScrollable === void 0) { isScrollable = false; }
                        if (legendPosition === void 0) { legendPosition = legend_1.LegendPosition.Top; }
                        if (interactive) {
                            return new legend_1.InteractiveLegend(legendParentElement);
                        }
                        return new legend_1.SVGLegend(legendParentElement, legendPosition, interactivityService, isScrollable);
                    }
                    legend_1.createLegend = createLegend;
                    function isLeft(orientation) {
                        switch (orientation) {
                            case legend_1.LegendPosition.Left:
                            case legend_1.LegendPosition.LeftCenter:
                                return true;
                            default:
                                return false;
                        }
                    }
                    legend_1.isLeft = isLeft;
                    function isTop(orientation) {
                        switch (orientation) {
                            case legend_1.LegendPosition.Top:
                            case legend_1.LegendPosition.TopCenter:
                                return true;
                            default:
                                return false;
                        }
                    }
                    legend_1.isTop = isTop;
                    function positionChartArea(chartArea, legend) {
                        var legendMargins = legend.getMargins(), legendOrientation = legend.getOrientation();
                        chartArea.style({
                            "margin-left": isLeft(legendOrientation)
                                ? legendMargins.width + "px"
                                : null,
                            "margin-top": isTop(legendOrientation)
                                ? legendMargins.height + "px"
                                : null,
                        });
                    }
                    legend_1.positionChartArea = positionChartArea;
                })(legend = chart.legend || (chart.legend = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var legend;
                (function (legend) {
                    var data;
                    (function (data) {
                        data.DefaultLegendLabelFillColor = "#666666";
                        function update(legendData, legendObject) {
                            if (legendObject[legend.legendProps.show] == null) {
                                legendObject[legend.legendProps.show] = true;
                            }
                            if (legendObject[legend.legendProps.show] === false) {
                                legendData.dataPoints = [];
                            }
                            if (legendObject[legend.legendProps.show] === true && legendObject[legend.legendProps.position] == null) {
                                legendObject[legend.legendProps.position] = legend.position.top;
                            }
                            if (legendObject[legend.legendProps.fontSize] !== undefined) {
                                legendData.fontSize = legendObject[legend.legendProps.fontSize];
                            }
                            if (legendObject[legend.legendProps.labelColor] !== undefined) {
                                var fillColor = legendObject[legend.legendProps.labelColor];
                                if (fillColor != null) {
                                    legendData.labelColor = fillColor.solid.color;
                                }
                            }
                            if (legendObject[legend.legendProps.showTitle] === false) {
                                legendData.title = "";
                            }
                            else if (legendObject[legend.legendProps.titleText] !== undefined) {
                                legendData.title = legendObject[legend.legendProps.titleText];
                            }
                        }
                        data.update = update;
                    })(data = legend.data || (legend.data = {}));
                })(legend = chart.legend || (chart.legend = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var legend;
                (function (legend) {
                    // powerbi.extensibility.utils.formatting
                    var textUtil = powerbi.extensibility.utils.formatting.textUtil;
                    // powerbi.extensibility.utils.svg
                    var translateXWithPixels = powerbi.extensibility.utils.svg.translateXWithPixels;
                    var InteractiveLegend = (function () {
                        function InteractiveLegend(element) {
                            this.legendContainerParent = d3.select(element.get(0));
                        }
                        InteractiveLegend.prototype.getMargins = function () {
                            return {
                                height: InteractiveLegend.LegendHeight,
                                width: 0
                            };
                        };
                        InteractiveLegend.prototype.drawLegend = function (legendData) {
                            var data = legendData.dataPoints;
                            if (data.length < 1) {
                                return;
                            }
                            var legendContainerDiv = this.legendContainerParent.select(InteractiveLegend.LegendContainerSelector);
                            if (legendContainerDiv.empty()) {
                                if (!data.length) {
                                    return;
                                }
                                var divToPrepend = $("<div></div>")
                                    .height(this.getMargins().height)
                                    .addClass(InteractiveLegend.LegendContainerClass);
                                // Prepending, as legend should always be on topmost visual.
                                $(this.legendContainerParent[0]).prepend(divToPrepend);
                                legendContainerDiv = d3.select(divToPrepend.get(0));
                            }
                            this.legendContainerDiv = legendContainerDiv;
                            // Construct the legend title and items.
                            this.drawTitle(data);
                            this.drawLegendItems(data);
                        };
                        InteractiveLegend.prototype.reset = function () {
                            if (this.legendContainerDiv) {
                                this.legendContainerDiv.remove();
                                this.legendContainerDiv = null;
                            }
                        };
                        InteractiveLegend.prototype.isVisible = function () {
                            return true;
                        };
                        /**
                         * Not supported
                         */
                        InteractiveLegend.prototype.changeOrientation = function (orientation) { };
                        InteractiveLegend.prototype.getOrientation = function () {
                            return legend.LegendPosition.Top;
                        };
                        /**
                         * Draw the legend title
                         */
                        InteractiveLegend.prototype.drawTitle = function (data) {
                            var titleDiv = this.legendContainerDiv.selectAll("div." + InteractiveLegend.LegendTitleClass), item = titleDiv.data([data[0]]);
                            // Enter
                            var itemEnter = item.enter(), titleDivEnter = itemEnter
                                .append("div")
                                .attr("class", InteractiveLegend.LegendTitleClass);
                            titleDivEnter
                                .filter(function (d) { return d.iconOnlyOnLabel; })
                                .append("span")
                                .attr("class", InteractiveLegend.legendIconClass)
                                .html(InteractiveLegend.legendPlaceSelector);
                            titleDivEnter.append("span");
                            // Update
                            item.filter(function (d) { return d.iconOnlyOnLabel; })
                                .select("span." + InteractiveLegend.legendIconClass)
                                .style(InteractiveLegend.legendColorCss, function (d) { return d.color; });
                            item.select("span:last-child").text(function (d) { return d.category; });
                        };
                        /**
                         * Draw the legend items
                         */
                        InteractiveLegend.prototype.drawLegendItems = function (data) {
                            // Add Mesaures - the items of the category in the legend
                            this.ensureLegendTableCreated();
                            var dataPointsMatrix = [data];
                            var legendItemsContainer = this.legendContainerDiv
                                .select("tbody")
                                .selectAll("tr")
                                .data(dataPointsMatrix);
                            // Enter
                            var legendItemsEnter = legendItemsContainer.enter(), rowEnter = legendItemsEnter.append("tr");
                            var cellEnter = rowEnter
                                .selectAll("td")
                                .data(function (d) { return d; }, function (d) { return d.label; })
                                .enter()
                                .append("td")
                                .attr("class", InteractiveLegend.LegendItem);
                            var cellSpanEnter = cellEnter.append("span");
                            cellSpanEnter.filter(function (d) { return !d.iconOnlyOnLabel; })
                                .append("span")
                                .html(InteractiveLegend.legendPlaceSelector)
                                .attr("class", InteractiveLegend.legendIconClass)
                                .attr("white-space", "nowrap")
                                .style({
                                "font-size": "20px",
                                "margin-bottom": "7px"
                            });
                            cellSpanEnter
                                .append("span")
                                .attr("class", InteractiveLegend.legendItemNameClass);
                            cellSpanEnter
                                .append("span")
                                .attr("class", InteractiveLegend.legendItemMeasureClass);
                            // Update
                            var legendCells = legendItemsContainer
                                .selectAll("td")
                                .data(function (d) { return d; }, function (d) { return d.label; });
                            legendCells
                                .select("span." + InteractiveLegend.legendItemNameClass)
                                .html(function (d) { return textUtil.removeBreakingSpaces(d.label); });
                            legendCells
                                .select("span." + InteractiveLegend.legendItemMeasureClass)
                                .html(function (d) { return "&nbsp;" + d.measure; });
                            legendCells
                                .select("span." + InteractiveLegend.legendIconClass)
                                .style("color", function (d) { return d.color; });
                            // Exit
                            legendCells
                                .exit()
                                .remove();
                        };
                        /**
                         * Ensure legend table is created and set horizontal pan gestures on it
                         */
                        InteractiveLegend.prototype.ensureLegendTableCreated = function () {
                            if (this.legendContainerDiv.select("div table").empty()) {
                                var legendTable = this.legendContainerDiv
                                    .append("div")
                                    .append("table");
                                legendTable.style("table-layout", "fixed").append("tbody");
                                // Setup Pan Gestures of the legend
                                this.setPanGestureOnLegend(legendTable);
                            }
                        };
                        /**
                         * Set Horizontal Pan gesture for the legend
                         */
                        InteractiveLegend.prototype.setPanGestureOnLegend = function (legendTable) {
                            var viewportWidth = $(this.legendContainerParent[0]).width();
                            var xscale = d3.scale.linear()
                                .domain([0, viewportWidth])
                                .range([0, viewportWidth]);
                            var zoom = d3.behavior.zoom()
                                .scaleExtent([1, 1]) // disable scaling
                                .x(xscale)
                                .on("zoom", function () {
                                // horizontal pan is valid only in case the legend items width are bigger than the viewport width
                                if ($(legendTable[0]).width() > viewportWidth) {
                                    var t = zoom.translate();
                                    var tx_1 = t[0];
                                    var ty = t[1];
                                    tx_1 = Math.min(tx_1, 0);
                                    tx_1 = Math.max(tx_1, viewportWidth - $(legendTable[0]).width());
                                    zoom.translate([tx_1, ty]);
                                    legendTable.style("-ms-transform", function () {
                                        return translateXWithPixels(tx_1);
                                    });
                                    legendTable.style("-webkit-transform", function () {
                                        return translateXWithPixels(tx_1);
                                    });
                                    legendTable.style("transform", function () {
                                        return translateXWithPixels(tx_1);
                                    });
                                }
                            });
                            if (this.legendContainerDiv) {
                                this.legendContainerDiv.call(zoom);
                            }
                            else {
                                legendTable.call(zoom);
                            }
                        };
                        InteractiveLegend.LegendHeight = 70;
                        InteractiveLegend.LegendContainerClass = "interactive-legend";
                        InteractiveLegend.LegendContainerSelector = ".interactive-legend";
                        InteractiveLegend.LegendTitleClass = "title";
                        InteractiveLegend.LegendItem = "item";
                        InteractiveLegend.legendPlaceSelector = "\u25CF";
                        InteractiveLegend.legendIconClass = "icon";
                        InteractiveLegend.legendColorCss = "color";
                        InteractiveLegend.legendItemNameClass = "itemName";
                        InteractiveLegend.legendItemMeasureClass = "itemMeasure";
                        return InteractiveLegend;
                    }());
                    legend.InteractiveLegend = InteractiveLegend;
                })(legend = chart.legend || (chart.legend = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var legend;
                (function (legend) {
                    var textMeasurementService = powerbi.extensibility.utils.formatting.textMeasurementService;
                    var font = powerbi.extensibility.utils.formatting.font;
                    // powerbi.extensibility.utils.type
                    var PixelConverter = powerbi.extensibility.utils.type.PixelConverter;
                    var Prototype = powerbi.extensibility.utils.type.Prototype;
                    var createClassAndSelector = powerbi.extensibility.utils.svg.CssConstants.createClassAndSelector;
                    var translate = powerbi.extensibility.utils.svg.translate;
                    var createArrow = powerbi.extensibility.utils.svg.createArrow;
                    var appendClearCatcher = powerbi.extensibility.utils.interactivity.appendClearCatcher;
                    var dataHasSelection = powerbi.extensibility.utils.interactivity.dataHasSelection;
                    var SVGLegend = (function () {
                        function SVGLegend(element, legendPosition, interactivityService, isScrollable) {
                            this.legendDataStartIndex = 0;
                            this.arrowPosWindow = 1;
                            this.lastCalculatedWidth = 0;
                            this.visibleLegendWidth = 0;
                            this.visibleLegendHeight = 0;
                            this.legendFontSizeMarginDifference = 0;
                            this.legendFontSizeMarginValue = 0;
                            this.svg = d3.select(element.get(0))
                                .append("svg")
                                .style("position", "absolute");
                            this.svg.style("display", "inherit");
                            this.svg.classed("legend", true);
                            if (interactivityService) {
                                this.clearCatcher = appendClearCatcher(this.svg);
                            }
                            this.group = this.svg
                                .append("g")
                                .attr("id", "legendGroup");
                            this.interactivityService = interactivityService;
                            this.isScrollable = isScrollable;
                            this.element = element;
                            this.changeOrientation(legendPosition);
                            this.parentViewport = { height: 0, width: 0 };
                            this.calculateViewport();
                            this.updateLayout();
                        }
                        SVGLegend.prototype.updateLayout = function () {
                            var legendViewport = this.viewport;
                            var orientation = this.orientation;
                            this.svg.attr({
                                "height": legendViewport.height || (orientation === legend.LegendPosition.None ? 0 : this.parentViewport.height),
                                "width": legendViewport.width || (orientation === legend.LegendPosition.None ? 0 : this.parentViewport.width)
                            });
                            var isRight = orientation === legend.LegendPosition.Right || orientation === legend.LegendPosition.RightCenter, isBottom = orientation === legend.LegendPosition.Bottom || orientation === legend.LegendPosition.BottomCenter;
                            this.svg.style({
                                "margin-left": isRight ? (this.parentViewport.width - legendViewport.width) + "px" : null,
                                "margin-top": isBottom ? (this.parentViewport.height - legendViewport.height) + "px" : null,
                            });
                        };
                        SVGLegend.prototype.calculateViewport = function () {
                            switch (this.orientation) {
                                case legend.LegendPosition.Top:
                                case legend.LegendPosition.Bottom:
                                case legend.LegendPosition.TopCenter:
                                case legend.LegendPosition.BottomCenter:
                                    var pixelHeight = PixelConverter.fromPointToPixel(this.data && this.data.fontSize
                                        ? this.data.fontSize
                                        : SVGLegend.DefaultFontSizeInPt);
                                    var fontHeightSize = SVGLegend.TopLegendHeight + (pixelHeight - SVGLegend.DefaultFontSizeInPt);
                                    this.viewport = { height: fontHeightSize, width: 0 };
                                    return;
                                case legend.LegendPosition.Right:
                                case legend.LegendPosition.Left:
                                case legend.LegendPosition.RightCenter:
                                case legend.LegendPosition.LeftCenter:
                                    var width = this.lastCalculatedWidth
                                        ? this.lastCalculatedWidth
                                        : this.parentViewport.width * SVGLegend.LegendMaxWidthFactor;
                                    this.viewport = { height: 0, width: width };
                                    return;
                                case legend.LegendPosition.None:
                                    this.viewport = { height: 0, width: 0 };
                            }
                        };
                        SVGLegend.prototype.getMargins = function () {
                            return this.viewport;
                        };
                        SVGLegend.prototype.isVisible = function () {
                            return this.orientation !== legend.LegendPosition.None;
                        };
                        SVGLegend.prototype.changeOrientation = function (orientation) {
                            if (orientation) {
                                this.orientation = orientation;
                            }
                            else {
                                this.orientation = legend.LegendPosition.Top;
                            }
                            this.svg.attr("orientation", orientation);
                        };
                        SVGLegend.prototype.getOrientation = function () {
                            return this.orientation;
                        };
                        SVGLegend.prototype.drawLegend = function (data, viewport) {
                            // clone because we modify legend item label with ellipsis if it is truncated
                            var clonedData = Prototype.inherit(data), newDataPoints = [];
                            for (var _i = 0, _a = data.dataPoints; _i < _a.length; _i++) {
                                var dp = _a[_i];
                                newDataPoints.push(Prototype.inherit(dp));
                            }
                            clonedData.dataPoints = newDataPoints;
                            this.setTooltipToLegendItems(clonedData);
                            this.drawLegendInternal(clonedData, viewport, true /* perform auto width */);
                        };
                        SVGLegend.prototype.drawLegendInternal = function (data, viewport, autoWidth) {
                            this.parentViewport = viewport;
                            this.data = data;
                            if (this.interactivityService)
                                this.interactivityService.applySelectionStateToData(data.dataPoints);
                            if (data.dataPoints.length === 0) {
                                this.changeOrientation(legend.LegendPosition.None);
                            }
                            if (this.getOrientation() === legend.LegendPosition.None) {
                                data.dataPoints = [];
                            }
                            // Adding back the workaround for Legend Left/Right position for Map
                            var mapControl = this.element.children(".mapControl");
                            if (mapControl.length > 0 && !this.isTopOrBottom(this.orientation)) {
                                mapControl.css("display", "inline-block");
                            }
                            this.calculateViewport();
                            var layout = this.calculateLayout(data, autoWidth);
                            var titleLayout = layout.title;
                            var titleData = titleLayout ? [titleLayout] : [];
                            var hasSelection = this.interactivityService && dataHasSelection(data.dataPoints);
                            var group = this.group;
                            // transform the wrapping group if position is centered
                            if (this.isCentered(this.orientation)) {
                                var centerOffset = 0;
                                if (this.isTopOrBottom(this.orientation)) {
                                    centerOffset = Math.max(0, (this.parentViewport.width - this.visibleLegendWidth) / 2);
                                    group.attr("transform", translate(centerOffset, 0));
                                }
                                else {
                                    centerOffset = Math.max((this.parentViewport.height - this.visibleLegendHeight) / 2);
                                    group.attr("transform", translate(0, centerOffset));
                                }
                            }
                            else {
                                group.attr("transform", null);
                            }
                            var legendTitle = group
                                .selectAll(SVGLegend.LegendTitle.selector)
                                .data(titleData);
                            legendTitle.enter()
                                .append("text")
                                .classed(SVGLegend.LegendTitle.class, true);
                            legendTitle
                                .style({
                                "fill": data.labelColor,
                                "font-size": PixelConverter.fromPoint(data.fontSize),
                                "font-family": SVGLegend.DefaultTitleFontFamily
                            })
                                .text(function (d) { return d.text; })
                                .attr({
                                "x": function (d) { return d.x; },
                                "y": function (d) { return d.y; }
                            })
                                .append("title")
                                .text(data.title);
                            legendTitle
                                .exit()
                                .remove();
                            var virtualizedDataPoints = data.dataPoints.slice(this.legendDataStartIndex, this.legendDataStartIndex + layout.numberOfItems);
                            var iconRadius = textMeasurementService.estimateSvgTextHeight(SVGLegend.getTextProperties(false, "", this.data.fontSize)) / SVGLegend.LegendIconRadiusFactor;
                            iconRadius = (this.legendFontSizeMarginValue > SVGLegend.DefaultTextMargin) && iconRadius > SVGLegend.LegendIconRadius
                                ? iconRadius :
                                SVGLegend.LegendIconRadius;
                            var legendItems = group
                                .selectAll(SVGLegend.LegendItem.selector)
                                .data(virtualizedDataPoints, function (d) {
                                return d.identity.getKey() + (d.layerNumber != null ? d.layerNumber : "");
                            });
                            var itemsEnter = legendItems.enter()
                                .append("g")
                                .classed(SVGLegend.LegendItem.class, true);
                            itemsEnter
                                .append("circle")
                                .classed(SVGLegend.LegendIcon.class, true);
                            itemsEnter
                                .append("text")
                                .classed(SVGLegend.LegendText.class, true);
                            itemsEnter
                                .append("title")
                                .text(function (d) { return d.tooltip; });
                            legendItems
                                .select(SVGLegend.LegendIcon.selector)
                                .attr({
                                "cx": function (d, i) { return d.glyphPosition.x; },
                                "cy": function (d) { return d.glyphPosition.y; },
                                "r": iconRadius,
                            })
                                .style({
                                "fill": function (d) {
                                    if (hasSelection && !d.selected)
                                        return legend.LegendBehavior.dimmedLegendColor;
                                    else
                                        return d.color;
                                }
                            });
                            legendItems
                                .select("title")
                                .text(function (d) { return d.tooltip; });
                            legendItems
                                .select(SVGLegend.LegendText.selector)
                                .attr({
                                "x": function (d) { return d.textPosition.x; },
                                "y": function (d) { return d.textPosition.y; },
                            })
                                .text(function (d) { return d.label; })
                                .style({
                                "fill": data.labelColor,
                                "font-size": PixelConverter.fromPoint(data.fontSize)
                            });
                            if (this.interactivityService) {
                                var iconsSelection = legendItems.select(SVGLegend.LegendIcon.selector);
                                var behaviorOptions = {
                                    legendItems: legendItems,
                                    legendIcons: iconsSelection,
                                    clearCatcher: this.clearCatcher,
                                };
                                this.interactivityService.bind(data.dataPoints, new legend.LegendBehavior(), behaviorOptions, { isLegend: true });
                            }
                            legendItems.exit().remove();
                            this.drawNavigationArrows(layout.navigationArrows);
                            this.updateLayout();
                        };
                        SVGLegend.prototype.normalizePosition = function (points) {
                            if (this.legendDataStartIndex >= points.length) {
                                this.legendDataStartIndex = points.length - 1;
                            }
                            if (this.legendDataStartIndex < 0) {
                                this.legendDataStartIndex = 0;
                            }
                        };
                        SVGLegend.prototype.calculateTitleLayout = function (title) {
                            var width = 0, hasTitle = !_.isEmpty(title);
                            if (hasTitle) {
                                var isHorizontal = this.isTopOrBottom(this.orientation), maxMeasureLength = void 0;
                                if (isHorizontal) {
                                    var fontSizeMargin = this.legendFontSizeMarginValue > SVGLegend.DefaultTextMargin
                                        ? SVGLegend.TextAndIconPadding + this.legendFontSizeMarginDifference
                                        : SVGLegend.TextAndIconPadding;
                                    var fixedHorizontalIconShift = SVGLegend.TextAndIconPadding + SVGLegend.LegendIconRadius;
                                    var fixedHorizontalTextShift = SVGLegend.LegendIconRadius + fontSizeMargin + fixedHorizontalIconShift;
                                    // TODO This can be negative for narrow viewports. May need to rework this logic.
                                    maxMeasureLength = this.parentViewport.width * SVGLegend.LegendMaxWidthFactor - fixedHorizontalTextShift - SVGLegend.LegendEdgeMariginWidth;
                                }
                                else {
                                    maxMeasureLength = this.legendFontSizeMarginValue < SVGLegend.DefaultTextMargin ? SVGLegend.MaxTitleLength :
                                        SVGLegend.MaxTitleLength + (SVGLegend.DefaultMaxLegendFactor * this.legendFontSizeMarginDifference);
                                }
                                var textProperties = SVGLegend.getTextProperties(true, title, this.data.fontSize);
                                var text = title;
                                width = textMeasurementService.measureSvgTextWidth(textProperties);
                                if (width > maxMeasureLength) {
                                    text = textMeasurementService.getTailoredTextOrDefault(textProperties, maxMeasureLength);
                                    textProperties.text = text;
                                    // Remeasure the text since its measurement may be different than the max (ex. when the max is negative, the text will be ellipsis, and not have a negative width)
                                    width = textMeasurementService.measureSvgTextWidth(textProperties);
                                }
                                ;
                                if (isHorizontal) {
                                    width += SVGLegend.TitlePadding;
                                }
                                else {
                                    text = textMeasurementService.getTailoredTextOrDefault(textProperties, this.viewport.width);
                                }
                                return {
                                    x: 0,
                                    y: 0,
                                    text: text,
                                    width: width,
                                    height: textMeasurementService.estimateSvgTextHeight(textProperties)
                                };
                            }
                            return null;
                        };
                        /** Performs layout offline for optimal perfomance */
                        SVGLegend.prototype.calculateLayout = function (data, autoWidth) {
                            var dataPoints = data.dataPoints;
                            if (data.dataPoints.length === 0) {
                                return {
                                    numberOfItems: 0,
                                    title: null,
                                    navigationArrows: []
                                };
                            }
                            this.legendFontSizeMarginValue = PixelConverter.fromPointToPixel(this.data && this.data.fontSize !== undefined ? this.data.fontSize : SVGLegend.DefaultFontSizeInPt);
                            this.legendFontSizeMarginDifference = (this.legendFontSizeMarginValue - SVGLegend.DefaultTextMargin);
                            this.normalizePosition(dataPoints);
                            if (this.legendDataStartIndex < dataPoints.length) {
                                dataPoints = dataPoints.slice(this.legendDataStartIndex);
                            }
                            var title = this.calculateTitleLayout(data.title);
                            var navArrows;
                            var numberOfItems;
                            if (this.isTopOrBottom(this.orientation)) {
                                navArrows = this.isScrollable ? this.calculateHorizontalNavigationArrowsLayout(title) : [];
                                numberOfItems = this.calculateHorizontalLayout(dataPoints, title, navArrows);
                            }
                            else {
                                navArrows = this.isScrollable ? this.calculateVerticalNavigationArrowsLayout(title) : [];
                                numberOfItems = this.calculateVerticalLayout(dataPoints, title, navArrows, autoWidth);
                            }
                            return {
                                numberOfItems: numberOfItems,
                                title: title,
                                navigationArrows: navArrows
                            };
                        };
                        SVGLegend.prototype.updateNavigationArrowLayout = function (navigationArrows, remainingDataLength, visibleDataLength) {
                            if (this.legendDataStartIndex === 0) {
                                navigationArrows.shift();
                            }
                            var lastWindow = this.arrowPosWindow;
                            this.arrowPosWindow = visibleDataLength;
                            if (navigationArrows && navigationArrows.length > 0 && this.arrowPosWindow === remainingDataLength) {
                                this.arrowPosWindow = lastWindow;
                                navigationArrows.length = navigationArrows.length - 1;
                            }
                        };
                        SVGLegend.prototype.calculateHorizontalNavigationArrowsLayout = function (title) {
                            var height = SVGLegend.LegendArrowHeight;
                            var width = SVGLegend.LegendArrowWidth;
                            var translateY = (this.viewport.height / 2) - (height / 2);
                            var data = [];
                            var rightShift = title ? title.x + title.width : 0;
                            var arrowLeft = createArrow(width, height, 180 /*angle*/);
                            var arrowRight = createArrow(width, height, 0 /*angle*/);
                            data.push({
                                x: rightShift,
                                y: translateY,
                                path: arrowLeft.path,
                                rotateTransform: arrowLeft.transform,
                                type: 1 /* Decrease */
                            });
                            data.push({
                                x: this.parentViewport.width - width,
                                y: translateY,
                                path: arrowRight.path,
                                rotateTransform: arrowRight.transform,
                                type: 0 /* Increase */
                            });
                            return data;
                        };
                        SVGLegend.prototype.calculateVerticalNavigationArrowsLayout = function (title) {
                            var height = SVGLegend.LegendArrowHeight;
                            var width = SVGLegend.LegendArrowWidth;
                            var verticalCenter = this.viewport.height / 2;
                            var data = [];
                            var rightShift = verticalCenter + height / 2;
                            var arrowTop = createArrow(width, height, 270 /*angle*/);
                            var arrowBottom = createArrow(width, height, 90 /*angle*/);
                            var titleHeight = title ? title.height : 0;
                            data.push({
                                x: rightShift,
                                y: width + titleHeight,
                                path: arrowTop.path,
                                rotateTransform: arrowTop.transform,
                                type: 1 /* Decrease */
                            });
                            data.push({
                                x: rightShift,
                                y: this.parentViewport.height - height,
                                path: arrowBottom.path,
                                rotateTransform: arrowBottom.transform,
                                type: 0 /* Increase */
                            });
                            return data;
                        };
                        /**
                         * Calculates the widths for each horizontal legend item.
                         */
                        SVGLegend.calculateHorizontalLegendItemsWidths = function (dataPoints, availableWidth, iconPadding, fontSize) {
                            var dataPointsLength = dataPoints.length;
                            // Set the maximum amount of space available to each item. They can use less, but can't go over this number.
                            var maxItemWidth = dataPointsLength > 0 ? availableWidth / dataPointsLength | 0 : 0;
                            var maxItemTextWidth = maxItemWidth - iconPadding;
                            // Makes sure the amount of space available to each item is at least SVGLegend.MaxTextLength wide.
                            // If you had many items and/or a narrow amount of available width, the availableTextWidthPerItem would be small, essentially making everything ellipsis.
                            // This prevents that from happening by giving each item at least SVGLegend.MaxTextLength of space.
                            if (maxItemTextWidth < SVGLegend.MaxTextLength) {
                                maxItemTextWidth = SVGLegend.MaxTextLength;
                                maxItemWidth = maxItemTextWidth + iconPadding;
                            }
                            // Make sure the availableWidthPerItem is less than the availableWidth. This lets the long text properly add ellipsis when we're displaying one item at a time.
                            if (maxItemWidth > availableWidth) {
                                maxItemWidth = availableWidth;
                                maxItemTextWidth = maxItemWidth - iconPadding;
                            }
                            var occupiedWidth = 0;
                            var legendItems = [];
                            // Add legend items until we can't fit any more (the last one doesn't fit) or we've added all of them
                            for (var _i = 0, dataPoints_1 = dataPoints; _i < dataPoints_1.length; _i++) {
                                var dataPoint = dataPoints_1[_i];
                                var textProperties = SVGLegend.getTextProperties(false, dataPoint.label, fontSize);
                                var itemTextWidth = textMeasurementService.measureSvgTextWidth(textProperties);
                                var desiredWidth = itemTextWidth + iconPadding;
                                var overMaxWidth = desiredWidth > maxItemWidth;
                                var actualWidth = overMaxWidth ? maxItemWidth : desiredWidth;
                                occupiedWidth += actualWidth;
                                if (occupiedWidth >= availableWidth) {
                                    // Always add at least 1 element
                                    if (legendItems.length === 0) {
                                        legendItems.push({
                                            dataPoint: dataPoint,
                                            textProperties: textProperties,
                                            desiredWidth: desiredWidth,
                                            desiredOverMaxWidth: true,
                                            width: desiredWidth
                                        });
                                        // Set the width to the amount of space we actually have
                                        occupiedWidth = availableWidth;
                                    }
                                    else {
                                        // Subtract the width from what was just added since it won't fit
                                        occupiedWidth -= actualWidth;
                                    }
                                    break;
                                }
                                legendItems.push({
                                    dataPoint: dataPoint,
                                    textProperties: textProperties,
                                    desiredWidth: desiredWidth,
                                    desiredOverMaxWidth: overMaxWidth,
                                    width: desiredWidth
                                });
                            }
                            // If there are items at max width, evenly redistribute the extra space to them
                            var itemsOverMax = _.filter(legendItems, function (li) { return li.desiredOverMaxWidth; });
                            var numItemsOverMax = itemsOverMax.length;
                            if (numItemsOverMax > 0) {
                                var extraWidth = availableWidth - occupiedWidth;
                                for (var _a = 0, itemsOverMax_1 = itemsOverMax; _a < itemsOverMax_1.length; _a++) {
                                    var item = itemsOverMax_1[_a];
                                    // Divvy up the extra space and add it to the max
                                    // We need to do this calculation in every loop since the remainingWidth may not be changed by the same amount every time
                                    var extraWidthPerItem = extraWidth / numItemsOverMax;
                                    var newMaxItemWidth = maxItemWidth + extraWidthPerItem;
                                    var usedExtraWidth = void 0;
                                    if (item.desiredWidth <= newMaxItemWidth) {
                                        // If the item doesn't need all the extra space, it's not at max anymore
                                        item.desiredOverMaxWidth = false;
                                        usedExtraWidth = item.desiredWidth - maxItemWidth;
                                    }
                                    else {
                                        // Otherwise the item is taking up all the extra space so update the actual width to indicate that
                                        item.width = newMaxItemWidth;
                                        usedExtraWidth = newMaxItemWidth - maxItemWidth;
                                    }
                                    extraWidth -= usedExtraWidth;
                                    numItemsOverMax--;
                                }
                            }
                            return legendItems;
                        };
                        SVGLegend.prototype.calculateHorizontalLayout = function (dataPoints, title, navigationArrows) {
                            // calculate the text shift
                            var HorizontalTextShift = 4 + SVGLegend.LegendIconRadius;
                            // check if we need more space for the margin, or use the default text padding
                            var fontSizeBiggerThanDefault = this.legendFontSizeMarginDifference > 0;
                            var fontSizeMargin = fontSizeBiggerThanDefault ? SVGLegend.TextAndIconPadding + this.legendFontSizeMarginDifference : SVGLegend.TextAndIconPadding;
                            var fixedTextShift = (fontSizeMargin / (SVGLegend.LegendIconRadiusFactor / 2)) + HorizontalTextShift;
                            var occupiedWidth = 0;
                            // calculate the size of the space for both sides of the radius
                            var iconTotalItemPadding = SVGLegend.LegendIconRadius * 2 + fontSizeMargin * 1.5;
                            var numberOfItems = dataPoints.length;
                            // get the Y coordinate which is the middle of the container + the middle of the text height - the delta of the text 
                            var defaultTextProperties = SVGLegend.getTextProperties(false, "", this.data.fontSize);
                            var verticalCenter = this.viewport.height / 2;
                            var textYCoordinate = verticalCenter + textMeasurementService.estimateSvgTextHeight(defaultTextProperties) / 2
                                - textMeasurementService.estimateSvgTextBaselineDelta(defaultTextProperties);
                            if (title) {
                                occupiedWidth += title.width;
                                // get the Y coordinate which is the middle of the container + the middle of the text height - the delta of the text 
                                title.y = verticalCenter + title.height / 2 - textMeasurementService.estimateSvgTextBaselineDelta(SVGLegend.getTextProperties(true, title.text, this.data.fontSize));
                            }
                            // if an arrow should be added, we add space for it
                            if (this.legendDataStartIndex > 0) {
                                occupiedWidth += SVGLegend.LegendArrowOffset;
                            }
                            // Calculate the width for each of the legend items
                            var dataPointsLength = dataPoints.length;
                            var availableWidth = this.parentViewport.width - occupiedWidth;
                            var legendItems = SVGLegend.calculateHorizontalLegendItemsWidths(dataPoints, availableWidth, iconTotalItemPadding, this.data.fontSize);
                            numberOfItems = legendItems.length;
                            // If we can't show all the legend items, subtract the "next" arrow space from the available space and re-run the width calculations 
                            if (numberOfItems !== dataPointsLength) {
                                availableWidth -= SVGLegend.LegendArrowOffset;
                                legendItems = SVGLegend.calculateHorizontalLegendItemsWidths(dataPoints, availableWidth, iconTotalItemPadding, this.data.fontSize);
                                numberOfItems = legendItems.length;
                            }
                            for (var _i = 0, legendItems_1 = legendItems; _i < legendItems_1.length; _i++) {
                                var legendItem = legendItems_1[_i];
                                var dataPoint = legendItem.dataPoint;
                                dataPoint.glyphPosition = {
                                    // the space taken so far + the radius + the margin / radiusFactor to prevent huge spaces
                                    x: occupiedWidth + SVGLegend.LegendIconRadius + (this.legendFontSizeMarginDifference / SVGLegend.LegendIconRadiusFactor),
                                    // The middle of the container but a bit lower due to text not being in the middle (qP for example making middle between q and P)
                                    y: (this.viewport.height * SVGLegend.LegendIconYRatio),
                                };
                                dataPoint.textPosition = {
                                    x: occupiedWidth + fixedTextShift,
                                    y: textYCoordinate,
                                };
                                // If we're over the max width, process it so it fits
                                if (legendItem.desiredOverMaxWidth) {
                                    var textWidth = legendItem.width - iconTotalItemPadding;
                                    var text = textMeasurementService.getTailoredTextOrDefault(legendItem.textProperties, textWidth);
                                    dataPoint.label = text;
                                }
                                occupiedWidth += legendItem.width;
                            }
                            this.visibleLegendWidth = occupiedWidth;
                            this.updateNavigationArrowLayout(navigationArrows, dataPointsLength, numberOfItems);
                            return numberOfItems;
                        };
                        SVGLegend.prototype.calculateVerticalLayout = function (dataPoints, title, navigationArrows, autoWidth) {
                            var _this = this;
                            // check if we need more space for the margin, or use the default text padding
                            var fontSizeBiggerThenDefault = this.legendFontSizeMarginDifference > 0;
                            var fontFactor = fontSizeBiggerThenDefault ? this.legendFontSizeMarginDifference : 0;
                            // calculate the size needed after font size change
                            var verticalLegendHeight = 20 + fontFactor;
                            var spaceNeededByTitle = 15 + fontFactor;
                            var extraShiftForTextAlignmentToIcon = 4 + fontFactor;
                            var totalSpaceOccupiedThusFar = verticalLegendHeight;
                            // the default space for text and icon radius + the margin after the font size change
                            var fixedHorizontalIconShift = SVGLegend.TextAndIconPadding + SVGLegend.LegendIconRadius + (this.legendFontSizeMarginDifference / SVGLegend.LegendIconRadiusFactor);
                            var fixedHorizontalTextShift = fixedHorizontalIconShift * 2;
                            // check how much space is needed
                            var maxHorizontalSpaceAvaliable = autoWidth
                                ? this.parentViewport.width * SVGLegend.LegendMaxWidthFactor
                                    - fixedHorizontalTextShift - SVGLegend.LegendEdgeMariginWidth
                                : this.lastCalculatedWidth
                                    - fixedHorizontalTextShift - SVGLegend.LegendEdgeMariginWidth;
                            var numberOfItems = dataPoints.length;
                            var maxHorizontalSpaceUsed = 0;
                            var parentHeight = this.parentViewport.height;
                            if (title) {
                                totalSpaceOccupiedThusFar += spaceNeededByTitle;
                                title.x = SVGLegend.TextAndIconPadding;
                                title.y = spaceNeededByTitle;
                                maxHorizontalSpaceUsed = title.width || 0;
                            }
                            // if an arrow should be added, we add space for it
                            if (this.legendDataStartIndex > 0)
                                totalSpaceOccupiedThusFar += SVGLegend.LegendArrowOffset;
                            var dataPointsLength = dataPoints.length;
                            for (var i = 0; i < dataPointsLength; i++) {
                                var dp = dataPoints[i];
                                var textProperties = SVGLegend.getTextProperties(false, dp.label, this.data.fontSize);
                                dp.glyphPosition = {
                                    x: fixedHorizontalIconShift,
                                    y: (totalSpaceOccupiedThusFar + extraShiftForTextAlignmentToIcon) - textMeasurementService.estimateSvgTextBaselineDelta(textProperties)
                                };
                                dp.textPosition = {
                                    x: fixedHorizontalTextShift,
                                    y: totalSpaceOccupiedThusFar + extraShiftForTextAlignmentToIcon
                                };
                                // TODO: [PERF] Get rid of this extra measurement, and modify
                                // getTailoredTextToReturnWidth + Text
                                var width = textMeasurementService.measureSvgTextWidth(textProperties);
                                if (width > maxHorizontalSpaceUsed) {
                                    maxHorizontalSpaceUsed = width;
                                }
                                if (width > maxHorizontalSpaceAvaliable) {
                                    var text = textMeasurementService.getTailoredTextOrDefault(textProperties, maxHorizontalSpaceAvaliable);
                                    dp.label = text;
                                }
                                totalSpaceOccupiedThusFar += verticalLegendHeight;
                                if (totalSpaceOccupiedThusFar > parentHeight) {
                                    numberOfItems = i;
                                    break;
                                }
                            }
                            if (autoWidth) {
                                if (maxHorizontalSpaceUsed < maxHorizontalSpaceAvaliable) {
                                    this.lastCalculatedWidth = this.viewport.width = Math.ceil(maxHorizontalSpaceUsed + fixedHorizontalTextShift + SVGLegend.LegendEdgeMariginWidth);
                                }
                                else {
                                    this.lastCalculatedWidth = this.viewport.width = Math.ceil(this.parentViewport.width * SVGLegend.LegendMaxWidthFactor);
                                }
                            }
                            else {
                                this.viewport.width = this.lastCalculatedWidth;
                            }
                            this.visibleLegendHeight = totalSpaceOccupiedThusFar;
                            navigationArrows.forEach(function (d) { return d.x = _this.lastCalculatedWidth / 2; });
                            this.updateNavigationArrowLayout(navigationArrows, dataPointsLength, numberOfItems);
                            return numberOfItems;
                        };
                        SVGLegend.prototype.drawNavigationArrows = function (layout) {
                            var _this = this;
                            var arrows = this.group.selectAll(SVGLegend.NavigationArrow.selector)
                                .data(layout);
                            arrows
                                .enter()
                                .append("g")
                                .on("click", function (d) {
                                var pos = _this.legendDataStartIndex;
                                _this.legendDataStartIndex = d.type === 0 /* Increase */
                                    ? pos + _this.arrowPosWindow : pos - _this.arrowPosWindow;
                                _this.drawLegendInternal(_this.data, _this.parentViewport, false);
                            })
                                .classed(SVGLegend.NavigationArrow.class, true)
                                .append("path");
                            arrows
                                .attr("transform", function (d) { return translate(d.x, d.y); })
                                .select("path")
                                .attr({
                                "d": function (d) { return d.path; },
                                "transform": function (d) { return d.rotateTransform; }
                            });
                            arrows
                                .exit()
                                .remove();
                        };
                        SVGLegend.prototype.isTopOrBottom = function (orientation) {
                            switch (orientation) {
                                case legend.LegendPosition.Top:
                                case legend.LegendPosition.Bottom:
                                case legend.LegendPosition.BottomCenter:
                                case legend.LegendPosition.TopCenter:
                                    return true;
                                default:
                                    return false;
                            }
                        };
                        SVGLegend.prototype.isCentered = function (orientation) {
                            switch (orientation) {
                                case legend.LegendPosition.BottomCenter:
                                case legend.LegendPosition.LeftCenter:
                                case legend.LegendPosition.RightCenter:
                                case legend.LegendPosition.TopCenter:
                                    return true;
                                default:
                                    return false;
                            }
                        };
                        SVGLegend.prototype.reset = function () { };
                        SVGLegend.getTextProperties = function (isTitle, text, fontSize) {
                            return {
                                text: text,
                                fontFamily: isTitle
                                    ? SVGLegend.DefaultTitleFontFamily
                                    : SVGLegend.DefaultFontFamily,
                                fontSize: PixelConverter.fromPoint(fontSize || SVGLegend.DefaultFontSizeInPt)
                            };
                        };
                        SVGLegend.prototype.setTooltipToLegendItems = function (data) {
                            // we save the values to tooltip before cut
                            for (var _i = 0, _a = data.dataPoints; _i < _a.length; _i++) {
                                var dataPoint = _a[_i];
                                dataPoint.tooltip = dataPoint.label;
                            }
                        };
                        SVGLegend.DefaultFontSizeInPt = 8;
                        SVGLegend.LegendIconRadius = 5;
                        SVGLegend.LegendIconRadiusFactor = 5;
                        SVGLegend.MaxTextLength = 60;
                        SVGLegend.MaxTitleLength = 80;
                        SVGLegend.TextAndIconPadding = 5;
                        SVGLegend.TitlePadding = 15;
                        SVGLegend.LegendEdgeMariginWidth = 10;
                        SVGLegend.LegendMaxWidthFactor = 0.3;
                        SVGLegend.TopLegendHeight = 24;
                        SVGLegend.DefaultTextMargin = PixelConverter.fromPointToPixel(SVGLegend.DefaultFontSizeInPt);
                        SVGLegend.DefaultMaxLegendFactor = SVGLegend.MaxTitleLength / SVGLegend.DefaultTextMargin;
                        SVGLegend.LegendIconYRatio = 0.52;
                        // Navigation Arrow constants
                        SVGLegend.LegendArrowOffset = 10;
                        SVGLegend.LegendArrowHeight = 15;
                        SVGLegend.LegendArrowWidth = 7.5;
                        SVGLegend.DefaultFontFamily = font.Family.regular.css;
                        SVGLegend.DefaultTitleFontFamily = font.Family.semibold.css;
                        SVGLegend.LegendItem = createClassAndSelector("legendItem");
                        SVGLegend.LegendText = createClassAndSelector("legendText");
                        SVGLegend.LegendIcon = createClassAndSelector("legendIcon");
                        SVGLegend.LegendTitle = createClassAndSelector("legendTitle");
                        SVGLegend.NavigationArrow = createClassAndSelector("navArrow");
                        return SVGLegend;
                    }());
                    legend.SVGLegend = SVGLegend;
                })(legend = chart.legend || (chart.legend = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var dataLabel;
                (function (dataLabel) {
                    /** Defines possible content positions.  */
                    (function (ContentPositions) {
                        /** Content position is not defined. */
                        ContentPositions[ContentPositions["None"] = 0] = "None";
                        /** Content aligned top left. */
                        ContentPositions[ContentPositions["TopLeft"] = 1] = "TopLeft";
                        /** Content aligned top center. */
                        ContentPositions[ContentPositions["TopCenter"] = 2] = "TopCenter";
                        /** Content aligned top right. */
                        ContentPositions[ContentPositions["TopRight"] = 4] = "TopRight";
                        /** Content aligned middle left. */
                        ContentPositions[ContentPositions["MiddleLeft"] = 8] = "MiddleLeft";
                        /** Content aligned middle center. */
                        ContentPositions[ContentPositions["MiddleCenter"] = 16] = "MiddleCenter";
                        /** Content aligned middle right. */
                        ContentPositions[ContentPositions["MiddleRight"] = 32] = "MiddleRight";
                        /** Content aligned bottom left. */
                        ContentPositions[ContentPositions["BottomLeft"] = 64] = "BottomLeft";
                        /** Content aligned bottom center. */
                        ContentPositions[ContentPositions["BottomCenter"] = 128] = "BottomCenter";
                        /** Content aligned bottom right. */
                        ContentPositions[ContentPositions["BottomRight"] = 256] = "BottomRight";
                        /** Content is placed inside the bounding rectangle in the center. */
                        ContentPositions[ContentPositions["InsideCenter"] = 512] = "InsideCenter";
                        /** Content is placed inside the bounding rectangle at the base. */
                        ContentPositions[ContentPositions["InsideBase"] = 1024] = "InsideBase";
                        /** Content is placed inside the bounding rectangle at the end. */
                        ContentPositions[ContentPositions["InsideEnd"] = 2048] = "InsideEnd";
                        /** Content is placed outside the bounding rectangle at the base. */
                        ContentPositions[ContentPositions["OutsideBase"] = 4096] = "OutsideBase";
                        /** Content is placed outside the bounding rectangle at the end. */
                        ContentPositions[ContentPositions["OutsideEnd"] = 8192] = "OutsideEnd";
                        /** Content supports all possible positions. */
                        ContentPositions[ContentPositions["All"] = 16383] = "All";
                    })(dataLabel.ContentPositions || (dataLabel.ContentPositions = {}));
                    var ContentPositions = dataLabel.ContentPositions;
                    /**
                     * Rectangle orientation. Rectangle orientation is used to define vertical or horizontal orientation
                     * and starting/ending side of the rectangle.
                     */
                    (function (RectOrientation) {
                        /** Rectangle with no specific orientation. */
                        RectOrientation[RectOrientation["None"] = 0] = "None";
                        /** Vertical rectangle with base at the bottom. */
                        RectOrientation[RectOrientation["VerticalBottomTop"] = 1] = "VerticalBottomTop";
                        /** Vertical rectangle with base at the top. */
                        RectOrientation[RectOrientation["VerticalTopBottom"] = 2] = "VerticalTopBottom";
                        /** Horizontal rectangle with base at the left. */
                        RectOrientation[RectOrientation["HorizontalLeftRight"] = 3] = "HorizontalLeftRight";
                        /** Horizontal rectangle with base at the right. */
                        RectOrientation[RectOrientation["HorizontalRightLeft"] = 4] = "HorizontalRightLeft";
                    })(dataLabel.RectOrientation || (dataLabel.RectOrientation = {}));
                    var RectOrientation = dataLabel.RectOrientation;
                    /**
                     * Defines if panel elements are allowed to be positioned
                     * outside of the panel boundaries.
                     */
                    (function (OutsidePlacement) {
                        /** Elements can be positioned outside of the panel. */
                        OutsidePlacement[OutsidePlacement["Allowed"] = 0] = "Allowed";
                        /** Elements can not be positioned outside of the panel. */
                        OutsidePlacement[OutsidePlacement["Disallowed"] = 1] = "Disallowed";
                        /** Elements can be partially outside of the panel. */
                        OutsidePlacement[OutsidePlacement["Partial"] = 2] = "Partial";
                    })(dataLabel.OutsidePlacement || (dataLabel.OutsidePlacement = {}));
                    var OutsidePlacement = dataLabel.OutsidePlacement;
                    var labelStyle;
                    (function (labelStyle) {
                        labelStyle.category = "Category";
                        labelStyle.data = "Data";
                        labelStyle.both = "Both";
                    })(labelStyle = dataLabel.labelStyle || (dataLabel.labelStyle = {}));
                    (function (PointLabelPosition) {
                        PointLabelPosition[PointLabelPosition["Above"] = 0] = "Above";
                        PointLabelPosition[PointLabelPosition["Below"] = 1] = "Below";
                    })(dataLabel.PointLabelPosition || (dataLabel.PointLabelPosition = {}));
                    var PointLabelPosition = dataLabel.PointLabelPosition;
                })(dataLabel = chart.dataLabel || (chart.dataLabel = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var dataLabel;
                (function (dataLabel) {
                    var locationConverter;
                    (function (locationConverter) {
                        function topInside(size, rect, offset) {
                            return {
                                left: rect.left + rect.width / 2.0 - size.width / 2.0,
                                top: rect.top + offset,
                                width: size.width,
                                height: size.height
                            };
                        }
                        locationConverter.topInside = topInside;
                        function bottomInside(size, rect, offset) {
                            return {
                                left: rect.left + rect.width / 2.0 - size.width / 2.0,
                                top: (rect.top + rect.height) - size.height - offset,
                                width: size.width,
                                height: size.height
                            };
                        }
                        locationConverter.bottomInside = bottomInside;
                        function rightInside(size, rect, offset) {
                            return {
                                left: (rect.left + rect.width) - size.width - offset,
                                top: rect.top + rect.height / 2.0 - size.height / 2.0,
                                width: size.width,
                                height: size.height
                            };
                        }
                        locationConverter.rightInside = rightInside;
                        function leftInside(size, rect, offset) {
                            return {
                                left: rect.left + offset,
                                top: rect.top + rect.height / 2.0 - size.height / 2.0,
                                width: size.width,
                                height: size.height
                            };
                        }
                        locationConverter.leftInside = leftInside;
                        function topOutside(size, rect, offset) {
                            return {
                                left: rect.left + rect.width / 2.0 - size.width / 2.0,
                                top: rect.top - size.height - offset,
                                width: size.width,
                                height: size.height
                            };
                        }
                        locationConverter.topOutside = topOutside;
                        function bottomOutside(size, rect, offset) {
                            return {
                                left: rect.left + rect.width / 2.0 - size.width / 2.0,
                                top: (rect.top + rect.height) + offset,
                                width: size.width,
                                height: size.height
                            };
                        }
                        locationConverter.bottomOutside = bottomOutside;
                        function rightOutside(size, rect, offset) {
                            return {
                                left: (rect.left + rect.width) + offset,
                                top: rect.top + rect.height / 2.0 - size.height / 2.0,
                                width: size.width,
                                height: size.height
                            };
                        }
                        locationConverter.rightOutside = rightOutside;
                        function leftOutside(size, rect, offset) {
                            return {
                                left: rect.left - size.width - offset,
                                top: rect.top + rect.height / 2.0 - size.height / 2.0,
                                width: size.width,
                                height: size.height
                            };
                        }
                        locationConverter.leftOutside = leftOutside;
                        function middleHorizontal(size, rect, offset) {
                            return {
                                left: rect.left + rect.width / 2.0 - size.width / 2.0 + offset,
                                top: rect.top + rect.height / 2.0 - size.height / 2.0,
                                width: size.width,
                                height: size.height
                            };
                        }
                        locationConverter.middleHorizontal = middleHorizontal;
                        function middleVertical(size, rect, offset) {
                            return {
                                left: rect.left + rect.width / 2.0 - size.width / 2.0,
                                top: rect.top + rect.height / 2.0 - size.height / 2.0 + offset,
                                width: size.width,
                                height: size.height
                            };
                        }
                        locationConverter.middleVertical = middleVertical;
                    })(locationConverter = dataLabel.locationConverter || (dataLabel.locationConverter = {}));
                })(dataLabel = chart.dataLabel || (chart.dataLabel = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var dataLabel;
                (function (dataLabel) {
                    var Rect = powerbi.extensibility.utils.svg.shapes.Rect;
                    // powerbi.extensibility.utils.type
                    var Double = powerbi.extensibility.utils.type.Double;
                    /**
                    * Arranges label elements using the anchor point or rectangle. Collisions
                    * between elements can be automatically detected and as a result elements
                    * can be repositioned or get hidden.
                    */
                    var DataLabelManager = (function () {
                        function DataLabelManager() {
                            this.movingStep = 3;
                            this.hideOverlapped = true;
                            // The global settings for all labels.
                            // They can be oweridden by each label we add into the panel, because contains same properties.
                            this.defaultDataLabelSettings = {
                                anchorMargin: DataLabelManager.DefaultAnchorMargin,
                                anchorRectOrientation: dataLabel.RectOrientation.None,
                                contentPosition: dataLabel.ContentPositions.BottomCenter,
                                outsidePlacement: dataLabel.OutsidePlacement.Disallowed,
                                maximumMovingDistance: DataLabelManager.DefaultMaximumMovingDistance,
                                minimumMovingDistance: DataLabelManager.DefaultMinimumMovingDistance,
                                validContentPositions: dataLabel.ContentPositions.BottomCenter,
                                opacity: 1
                            };
                        }
                        Object.defineProperty(DataLabelManager.prototype, "defaultSettings", {
                            get: function () {
                                return this.defaultDataLabelSettings;
                            },
                            enumerable: true,
                            configurable: true
                        });
                        /** Arranges the lables position and visibility*/
                        DataLabelManager.prototype.hideCollidedLabels = function (viewport, data, layout, addTransform) {
                            if (addTransform === void 0) { addTransform = false; }
                            // Split size into a grid
                            var arrangeGrid = new dataLabel.DataLabelArrangeGrid(viewport, data, layout);
                            var filteredData = [];
                            var transform = { x: 0, y: 0 };
                            if (addTransform) {
                                transform.x = viewport.width / 2;
                                transform.y = viewport.height / 2;
                            }
                            for (var i = 0, len = data.length; i < len; i++) {
                                // Filter unwanted data points
                                if (!layout.filter(data[i])) {
                                    continue;
                                }
                                // Set default values where properties values are undefined
                                var info = this.getLabelInfo(data[i]);
                                info.anchorPoint = {
                                    x: layout.labelLayout.x(data[i]) + transform.x,
                                    y: layout.labelLayout.y(data[i]) + transform.y,
                                };
                                var position = this.calculateContentPosition(info, info.contentPosition, data[i].size, info.anchorMargin);
                                if (DataLabelManager.isValid(position) && !this.hasCollisions(arrangeGrid, info, position, viewport)) {
                                    data[i].labelX = position.left - transform.x;
                                    data[i].labelY = position.top - transform.y;
                                    // Keep track of all panel elements positions.
                                    arrangeGrid.add(info, position);
                                    // Save all data points to display
                                    filteredData.push(data[i]);
                                }
                            }
                            return filteredData;
                        };
                        /**
                         * Merges the label element info with the panel element info and returns correct label info.
                         * @param source The label info.
                         */
                        DataLabelManager.prototype.getLabelInfo = function (source) {
                            var settings = this.defaultDataLabelSettings;
                            source.anchorMargin = source.anchorMargin !== undefined
                                ? source.anchorMargin
                                : settings.anchorMargin;
                            source.anchorRectOrientation = source.anchorRectOrientation !== undefined
                                ? source.anchorRectOrientation
                                : settings.anchorRectOrientation;
                            source.contentPosition = source.contentPosition !== undefined
                                ? source.contentPosition
                                : settings.contentPosition;
                            source.maximumMovingDistance = source.maximumMovingDistance !== undefined
                                ? source.maximumMovingDistance
                                : settings.maximumMovingDistance;
                            source.minimumMovingDistance = source.minimumMovingDistance !== undefined
                                ? source.minimumMovingDistance
                                : settings.minimumMovingDistance;
                            source.outsidePlacement = source.outsidePlacement !== undefined
                                ? source.outsidePlacement
                                : settings.outsidePlacement;
                            source.validContentPositions = source.validContentPositions !== undefined
                                ? source.validContentPositions
                                : settings.validContentPositions;
                            source.opacity = source.opacity !== undefined
                                ? source.opacity
                                : settings.opacity;
                            source.maximumMovingDistance += source.anchorMargin;
                            return source;
                        };
                        /**
                        * (Private) Calculates element position using anchor point..
                        */
                        DataLabelManager.prototype.calculateContentPositionFromPoint = function (anchorPoint, contentPosition, contentSize, offset) {
                            var position = { x: 0, y: 0 };
                            if (anchorPoint) {
                                if (anchorPoint.x !== undefined && isFinite(anchorPoint.x)) {
                                    position.x = anchorPoint.x;
                                    switch (contentPosition) {
                                        // D3 positions the label in the middle by default.
                                        // The algorithem asumed the label was positioned in right so this is why we add/substract half width
                                        case dataLabel.ContentPositions.TopLeft:
                                        case dataLabel.ContentPositions.MiddleLeft:
                                        case dataLabel.ContentPositions.BottomLeft:
                                            position.x -= contentSize.width / 2.0;
                                            break;
                                        case dataLabel.ContentPositions.TopRight:
                                        case dataLabel.ContentPositions.MiddleRight:
                                        case dataLabel.ContentPositions.BottomRight:
                                            position.x += contentSize.width / 2.0;
                                            break;
                                    }
                                }
                                if (anchorPoint.y !== undefined && isFinite(anchorPoint.y)) {
                                    position.y = anchorPoint.y;
                                    switch (contentPosition) {
                                        case dataLabel.ContentPositions.MiddleLeft:
                                        case dataLabel.ContentPositions.MiddleCenter:
                                        case dataLabel.ContentPositions.MiddleRight:
                                            position.y -= contentSize.height / 2.0;
                                            break;
                                        case dataLabel.ContentPositions.TopRight:
                                        case dataLabel.ContentPositions.TopLeft:
                                        case dataLabel.ContentPositions.TopCenter:
                                            position.y -= contentSize.height;
                                            break;
                                    }
                                }
                                if (offset !== undefined && isFinite(offset)) {
                                    switch (contentPosition) {
                                        case dataLabel.ContentPositions.TopLeft:
                                            position.x -= offset;
                                            position.y -= offset;
                                            break;
                                        case dataLabel.ContentPositions.MiddleLeft:
                                            position.x -= offset;
                                            break;
                                        case dataLabel.ContentPositions.BottomLeft:
                                            position.x -= offset;
                                            position.y += offset;
                                            break;
                                        case dataLabel.ContentPositions.TopCenter:
                                            position.y -= offset;
                                            break;
                                        case dataLabel.ContentPositions.MiddleCenter:
                                            // Offset is not applied
                                            break;
                                        case dataLabel.ContentPositions.BottomCenter:
                                            position.y += offset;
                                            break;
                                        case dataLabel.ContentPositions.TopRight:
                                            position.x += offset;
                                            position.y -= offset;
                                            break;
                                        case dataLabel.ContentPositions.MiddleRight:
                                            position.x += offset;
                                            break;
                                        case dataLabel.ContentPositions.BottomRight:
                                            position.x += offset;
                                            position.y += offset;
                                            break;
                                    }
                                }
                            }
                            return {
                                left: position.x,
                                top: position.y,
                                width: contentSize.width,
                                height: contentSize.height
                            };
                        };
                        /** (Private) Calculates element position using anchor rect. */
                        DataLabelManager.prototype.calculateContentPositionFromRect = function (anchorRect, anchorRectOrientation, contentPosition, contentSize, offset) {
                            switch (contentPosition) {
                                case dataLabel.ContentPositions.InsideCenter:
                                    return this.handleInsideCenterPosition(anchorRectOrientation, contentSize, anchorRect, offset);
                                case dataLabel.ContentPositions.InsideEnd:
                                    return this.handleInsideEndPosition(anchorRectOrientation, contentSize, anchorRect, offset);
                                case dataLabel.ContentPositions.InsideBase:
                                    return this.handleInsideBasePosition(anchorRectOrientation, contentSize, anchorRect, offset);
                                case dataLabel.ContentPositions.OutsideEnd:
                                    return this.handleOutsideEndPosition(anchorRectOrientation, contentSize, anchorRect, offset);
                                case dataLabel.ContentPositions.OutsideBase:
                                    return this.handleOutsideBasePosition(anchorRectOrientation, contentSize, anchorRect, offset);
                            }
                            return { left: 0, top: 0, width: -1, height: -1 };
                        };
                        /** (Private) Calculates element inside center position using anchor rect. */
                        DataLabelManager.prototype.handleInsideCenterPosition = function (anchorRectOrientation, contentSize, anchorRect, offset) {
                            switch (anchorRectOrientation) {
                                case dataLabel.RectOrientation.VerticalBottomTop:
                                case dataLabel.RectOrientation.VerticalTopBottom:
                                    return dataLabel.locationConverter.middleVertical(contentSize, anchorRect, offset);
                                case dataLabel.RectOrientation.HorizontalLeftRight:
                                case dataLabel.RectOrientation.HorizontalRightLeft:
                                default:
                                    return dataLabel.locationConverter.middleHorizontal(contentSize, anchorRect, offset);
                            }
                        };
                        /** (Private) Calculates element inside end position using anchor rect. */
                        DataLabelManager.prototype.handleInsideEndPosition = function (anchorRectOrientation, contentSize, anchorRect, offset) {
                            switch (anchorRectOrientation) {
                                case dataLabel.RectOrientation.VerticalBottomTop:
                                    return dataLabel.locationConverter.topInside(contentSize, anchorRect, offset);
                                case dataLabel.RectOrientation.VerticalTopBottom:
                                    return dataLabel.locationConverter.bottomInside(contentSize, anchorRect, offset);
                                case dataLabel.RectOrientation.HorizontalRightLeft:
                                    return dataLabel.locationConverter.leftInside(contentSize, anchorRect, offset);
                                case dataLabel.RectOrientation.HorizontalLeftRight:
                                default:
                                    return dataLabel.locationConverter.rightInside(contentSize, anchorRect, offset);
                            }
                        };
                        /** (Private) Calculates element inside base position using anchor rect. */
                        DataLabelManager.prototype.handleInsideBasePosition = function (anchorRectOrientation, contentSize, anchorRect, offset) {
                            switch (anchorRectOrientation) {
                                case dataLabel.RectOrientation.VerticalBottomTop:
                                    return dataLabel.locationConverter.bottomInside(contentSize, anchorRect, offset);
                                case dataLabel.RectOrientation.VerticalTopBottom:
                                    return dataLabel.locationConverter.topInside(contentSize, anchorRect, offset);
                                case dataLabel.RectOrientation.HorizontalRightLeft:
                                    return dataLabel.locationConverter.rightInside(contentSize, anchorRect, offset);
                                case dataLabel.RectOrientation.HorizontalLeftRight:
                                default:
                                    return dataLabel.locationConverter.leftInside(contentSize, anchorRect, offset);
                            }
                        };
                        /** (Private) Calculates element outside end position using anchor rect. */
                        DataLabelManager.prototype.handleOutsideEndPosition = function (anchorRectOrientation, contentSize, anchorRect, offset) {
                            switch (anchorRectOrientation) {
                                case dataLabel.RectOrientation.VerticalBottomTop:
                                    return dataLabel.locationConverter.topOutside(contentSize, anchorRect, offset);
                                case dataLabel.RectOrientation.VerticalTopBottom:
                                    return dataLabel.locationConverter.bottomOutside(contentSize, anchorRect, offset);
                                case dataLabel.RectOrientation.HorizontalRightLeft:
                                    return dataLabel.locationConverter.leftOutside(contentSize, anchorRect, offset);
                                case dataLabel.RectOrientation.HorizontalLeftRight:
                                default:
                                    return dataLabel.locationConverter.rightOutside(contentSize, anchorRect, offset);
                            }
                        };
                        /** (Private) Calculates element outside base position using anchor rect. */
                        DataLabelManager.prototype.handleOutsideBasePosition = function (anchorRectOrientation, contentSize, anchorRect, offset) {
                            switch (anchorRectOrientation) {
                                case dataLabel.RectOrientation.VerticalBottomTop:
                                    return dataLabel.locationConverter.bottomOutside(contentSize, anchorRect, offset);
                                case dataLabel.RectOrientation.VerticalTopBottom:
                                    return dataLabel.locationConverter.topOutside(contentSize, anchorRect, offset);
                                case dataLabel.RectOrientation.HorizontalRightLeft:
                                    return dataLabel.locationConverter.rightOutside(contentSize, anchorRect, offset);
                                case dataLabel.RectOrientation.HorizontalLeftRight:
                                default:
                                    return dataLabel.locationConverter.leftOutside(contentSize, anchorRect, offset);
                            }
                        };
                        /**  (Private) Calculates element position. */
                        DataLabelManager.prototype.calculateContentPosition = function (anchoredElementInfo, contentPosition, contentSize, offset) {
                            if (contentPosition !== dataLabel.ContentPositions.InsideEnd &&
                                contentPosition !== dataLabel.ContentPositions.InsideCenter &&
                                contentPosition !== dataLabel.ContentPositions.InsideBase &&
                                contentPosition !== dataLabel.ContentPositions.OutsideBase &&
                                contentPosition !== dataLabel.ContentPositions.OutsideEnd) {
                                // Determine position using anchor point.
                                return this.calculateContentPositionFromPoint(anchoredElementInfo.anchorPoint, contentPosition, contentSize, offset);
                            }
                            // Determine position using anchor rectangle.
                            return this.calculateContentPositionFromRect(anchoredElementInfo.anchorRect, anchoredElementInfo.anchorRectOrientation, contentPosition, contentSize, offset);
                        };
                        /** (Private) Check for collisions. */
                        DataLabelManager.prototype.hasCollisions = function (arrangeGrid, info, position, size) {
                            if (arrangeGrid.hasConflict(position)) {
                                return true;
                            }
                            // Since we divide the height by 2 we add it back to the top of the view port so labels won't be cut off
                            var intersection = { left: 0, top: position.height / 2, width: size.width, height: size.height };
                            intersection = Rect.inflate(intersection, { left: DataLabelManager.InflateAmount, top: 0, right: DataLabelManager.InflateAmount, bottom: 0 });
                            intersection = Rect.intersect(intersection, position);
                            if (Rect.isEmpty(intersection)) {
                                // Empty rectangle means there is a collision
                                return true;
                            }
                            switch (info.outsidePlacement) {
                                // D3 positions the label in the middle by default.
                                // The algorithem asumed the label was positioned in right so this is why we devide by 2 or 4
                                case dataLabel.OutsidePlacement.Disallowed:
                                    return Double.lessWithPrecision(intersection.width, position.width) ||
                                        Double.lessWithPrecision(intersection.height, position.height / 2);
                                case dataLabel.OutsidePlacement.Partial:
                                    return Double.lessWithPrecision(intersection.width, position.width / 2) ||
                                        Double.lessWithPrecision(intersection.height, position.height / 4);
                            }
                            return false;
                        };
                        DataLabelManager.isValid = function (rect) {
                            return !Rect.isEmpty(rect) && (rect.width > 0 && rect.height > 0);
                        };
                        DataLabelManager.DefaultAnchorMargin = 0; // For future use
                        DataLabelManager.DefaultMaximumMovingDistance = 12;
                        DataLabelManager.DefaultMinimumMovingDistance = 3;
                        DataLabelManager.InflateAmount = 5;
                        return DataLabelManager;
                    }());
                    dataLabel.DataLabelManager = DataLabelManager;
                })(dataLabel = chart.dataLabel || (chart.dataLabel = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var chart;
            (function (chart) {
                var dataLabel;
                (function (dataLabel) {
                    var Rect = powerbi.extensibility.utils.svg.shapes.Rect;
                    // powerbi.extensibility.utils.type
                    var Prototype = powerbi.extensibility.utils.type.Prototype;
                    var textMeasurementService = powerbi.extensibility.utils.formatting.textMeasurementService;
                    /**
                     * Utility class to speed up the conflict detection by collecting the arranged items in the DataLabelsPanel.
                     */
                    var DataLabelArrangeGrid = (function () {
                        /**
                         * Creates new ArrangeGrid.
                         * @param size The available size
                         */
                        function DataLabelArrangeGrid(size, elements, layout) {
                            this.grid = [];
                            if (size.width === 0 || size.height === 0) {
                                this.cellSize = size;
                                this.rowCount = this.colCount = 0;
                            }
                            var baseProperties = {
                                fontFamily: dataLabel.utils.LabelTextProperties.fontFamily,
                                fontSize: dataLabel.utils.LabelTextProperties.fontSize,
                                fontWeight: dataLabel.utils.LabelTextProperties.fontWeight,
                            };
                            // sets the cell size to be twice of the Max with and Max height of the elements 
                            this.cellSize = { width: 0, height: 0 };
                            for (var i = 0, len = elements.length; i < len; i++) {
                                var child = elements[i];
                                // Fill label field
                                child.labeltext = layout.labelText(child);
                                var properties = Prototype.inherit(baseProperties);
                                properties.text = child.labeltext;
                                properties.fontSize = child.data
                                    ? child.data.labelFontSize
                                    : child.labelFontSize
                                        ? child.labelFontSize
                                        : dataLabel.utils.LabelTextProperties.fontSize;
                                child.size = {
                                    width: textMeasurementService.measureSvgTextWidth(properties),
                                    height: textMeasurementService.estimateSvgTextHeight(properties),
                                };
                                var w = child.size.width * 2, h = child.size.height * 2;
                                if (w > this.cellSize.width) {
                                    this.cellSize.width = w;
                                }
                                if (h > this.cellSize.height) {
                                    this.cellSize.height = h;
                                }
                            }
                            if (this.cellSize.width === 0) {
                                this.cellSize.width = size.width;
                            }
                            if (this.cellSize.height === 0) {
                                this.cellSize.height = size.height;
                            }
                            this.colCount = this.getGridRowColCount(this.cellSize.width, size.width, DataLabelArrangeGrid.ARRANGEGRID_MIN_COUNT, DataLabelArrangeGrid.ARRANGEGRID_MAX_COUNT);
                            this.rowCount = this.getGridRowColCount(this.cellSize.height, size.height, DataLabelArrangeGrid.ARRANGEGRID_MIN_COUNT, DataLabelArrangeGrid.ARRANGEGRID_MAX_COUNT);
                            this.cellSize.width = size.width / this.colCount;
                            this.cellSize.height = size.height / this.rowCount;
                            var grid = this.grid;
                            for (var x = 0; x < this.colCount; x++) {
                                grid[x] = [];
                                for (var y = 0; y < this.rowCount; y++) {
                                    grid[x][y] = [];
                                }
                            }
                        }
                        /**
                         * Register a new label element.
                         * @param element The label element to register.
                         * @param rect The label element position rectangle.
                         */
                        DataLabelArrangeGrid.prototype.add = function (element, rect) {
                            var indexRect = this.getGridIndexRect(rect), grid = this.grid;
                            for (var x = indexRect.left; x < indexRect.right; x++) {
                                for (var y = indexRect.top; y < indexRect.bottom; y++) {
                                    grid[x][y].push({ element: element, rect: rect });
                                }
                            }
                        };
                        /**
                         * Checks for conflict of given rectangle in registered elements.
                         * @param rect The rectengle to check.
                         * @return True if conflict is detected.
                         */
                        DataLabelArrangeGrid.prototype.hasConflict = function (rect) {
                            var indexRect = this.getGridIndexRect(rect), grid = this.grid, isIntersecting = Rect.isIntersecting;
                            for (var x = indexRect.left; x < indexRect.right; x++) {
                                for (var y = indexRect.top; y < indexRect.bottom; y++) {
                                    for (var z = 0; z < grid[x][y].length; z++) {
                                        var item = grid[x][y][z];
                                        if (isIntersecting(item.rect, rect)) {
                                            return true;
                                        }
                                    }
                                }
                            }
                            return false;
                        };
                        /**
                         * Calculates the number of rows or columns in a grid
                         * @param step is the largest label size (width or height)
                         * @param length is the grid size (width or height)
                         * @param minCount is the minimum allowed size
                         * @param maxCount is the maximum allowed size
                         * @return the number of grid rows or columns
                         */
                        DataLabelArrangeGrid.prototype.getGridRowColCount = function (step, length, minCount, maxCount) {
                            return Math.min(Math.max(Math.ceil(length / step), minCount), maxCount);
                        };
                        /**
                         * Returns the grid index of a given recangle
                         * @param rect The rectengle to check.
                         * @return grid index as a thickness object.
                         */
                        DataLabelArrangeGrid.prototype.getGridIndexRect = function (rect) {
                            var restrict = function (n, min, max) { return Math.min(Math.max(n, min), max); };
                            return {
                                left: restrict(Math.floor(rect.left / this.cellSize.width), 0, this.colCount),
                                top: restrict(Math.floor(rect.top / this.cellSize.height), 0, this.rowCount),
                                right: restrict(Math.ceil((rect.left + rect.width) / this.cellSize.width), 0, this.colCount),
                                bottom: restrict(Math.ceil((rect.top + rect.height) / this.cellSize.height), 0, this.rowCount)
                            };
                        };
                        DataLabelArrangeGrid.ARRANGEGRID_MIN_COUNT = 1;
                        DataLabelArrangeGrid.ARRANGEGRID_MAX_COUNT = 100;
                        return DataLabelArrangeGrid;
                    }());
                    dataLabel.DataLabelArrangeGrid = DataLabelArrangeGrid;
                })(dataLabel = chart.dataLabel || (chart.dataLabel = {}));
            })(chart = utils.chart || (utils.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils_1) {
            var chart;
            (function (chart) {
                var dataLabel;
                (function (dataLabel) {
                    var utils;
                    (function (utils) {
                        var font = powerbi.extensibility.utils.formatting.font;
                        var numberFormat = powerbi.extensibility.utils.formatting.numberFormat;
                        var formattingService = powerbi.extensibility.utils.formatting.formattingService;
                        var textMeasurementService = powerbi.extensibility.utils.formatting.textMeasurementService;
                        var valueFormatter = powerbi.extensibility.utils.formatting.valueFormatter;
                        var DisplayUnitSystemType = powerbi.extensibility.utils.formatting.DisplayUnitSystemType;
                        // powerbi.extensibility.utils.type
                        var PixelConverter = powerbi.extensibility.utils.type.PixelConverter;
                        var createClassAndSelector = powerbi.extensibility.utils.svg.CssConstants.createClassAndSelector;
                        utils.maxLabelWidth = 50;
                        utils.defaultLabelDensity = "50";
                        utils.DefaultDy = "-0.15em";
                        utils.DefaultFontSizeInPt = 9;
                        utils.StandardFontFamily = font.Family.regular.css;
                        utils.LabelTextProperties = {
                            fontFamily: font.Family.regularSecondary.css,
                            fontSize: PixelConverter.fromPoint(utils.DefaultFontSizeInPt),
                            fontWeight: "normal",
                        };
                        utils.defaultLabelColor = "#777777";
                        utils.defaultInsideLabelColor = "#ffffff";
                        utils.hundredPercentFormat = "0.00 %;-0.00 %;0.00 %";
                        utils.defaultLabelPrecision = undefined;
                        var defaultCountLabelPrecision = 0;
                        var labelGraphicsContextClass = createClassAndSelector("labels");
                        var linesGraphicsContextClass = createClassAndSelector("lines");
                        var labelsClass = createClassAndSelector("data-labels");
                        var lineClass = createClassAndSelector("line-label");
                        var DimmedOpacity = 0.4;
                        var DefaultOpacity = 1.0;
                        function getFillOpacity(selected, highlight, hasSelection, hasPartialHighlights) {
                            if ((hasPartialHighlights && !highlight) || (hasSelection && !selected)) {
                                return DimmedOpacity;
                            }
                            return DefaultOpacity;
                        }
                        function updateLabelSettingsFromLabelsObject(labelsObj, labelSettings) {
                            if (labelsObj) {
                                if (labelsObj.show !== undefined) {
                                    labelSettings.show = labelsObj.show;
                                }
                                if (labelsObj.showSeries !== undefined) {
                                    labelSettings.show = labelsObj.showSeries;
                                }
                                if (labelsObj.color !== undefined) {
                                    labelSettings.labelColor = labelsObj.color.solid.color;
                                }
                                if (labelsObj.labelDisplayUnits !== undefined) {
                                    labelSettings.displayUnits = labelsObj.labelDisplayUnits;
                                }
                                if (labelsObj.labelPrecision !== undefined) {
                                    labelSettings.precision = (labelsObj.labelPrecision >= 0)
                                        ? labelsObj.labelPrecision
                                        : utils.defaultLabelPrecision;
                                }
                                if (labelsObj.fontSize !== undefined) {
                                    labelSettings.fontSize = labelsObj.fontSize;
                                }
                                if (labelsObj.showAll !== undefined) {
                                    labelSettings.showLabelPerSeries = labelsObj.showAll;
                                }
                                if (labelsObj.labelStyle !== undefined) {
                                    labelSettings.labelStyle = labelsObj.labelStyle;
                                }
                                if (labelsObj.labelPosition) {
                                    labelSettings.position = labelsObj.labelPosition;
                                }
                            }
                        }
                        utils.updateLabelSettingsFromLabelsObject = updateLabelSettingsFromLabelsObject;
                        function getDefaultLabelSettings(show, labelColor, fontSize) {
                            if (show === void 0) { show = false; }
                            return {
                                show: show,
                                position: dataLabel.PointLabelPosition.Above,
                                displayUnits: 0,
                                precision: utils.defaultLabelPrecision,
                                labelColor: labelColor || utils.defaultLabelColor,
                                fontSize: fontSize || utils.DefaultFontSizeInPt,
                            };
                        }
                        utils.getDefaultLabelSettings = getDefaultLabelSettings;
                        function getDefaultColumnLabelSettings(isLabelPositionInside) {
                            var labelSettings = getDefaultLabelSettings(false, undefined);
                            labelSettings.position = null;
                            labelSettings.labelColor = undefined;
                            return labelSettings;
                        }
                        utils.getDefaultColumnLabelSettings = getDefaultColumnLabelSettings;
                        function getDefaultPointLabelSettings() {
                            return {
                                show: false,
                                position: dataLabel.PointLabelPosition.Above,
                                displayUnits: 0,
                                precision: utils.defaultLabelPrecision,
                                labelColor: utils.defaultLabelColor,
                                fontSize: utils.DefaultFontSizeInPt,
                            };
                        }
                        utils.getDefaultPointLabelSettings = getDefaultPointLabelSettings;
                        function getLabelPrecision(precision, format) {
                            if (precision !== utils.defaultLabelPrecision) {
                                return precision;
                            }
                            if (format === "g" || format === "G") {
                                return;
                            }
                            if (format) {
                                // Calculate precision from positive format by default
                                var positiveFormat = numberFormat.getComponents(format).positive, formatMetadata = numberFormat.getCustomFormatMetadata(positiveFormat, true /*calculatePrecision*/);
                                if (formatMetadata.hasDots) {
                                    return formatMetadata.precision;
                                }
                            }
                            // For count fields we do not want a precision by default
                            return defaultCountLabelPrecision;
                        }
                        utils.getLabelPrecision = getLabelPrecision;
                        function drawDefaultLabelsForDataPointChart(data, context, layout, viewport, isAnimator, animationDuration, hasSelection) {
                            if (isAnimator === void 0) { isAnimator = false; }
                            // Hide and reposition labels that overlap
                            var dataLabelManager = new dataLabel.DataLabelManager(), filteredData = dataLabelManager.hideCollidedLabels(viewport, data, layout), hasAnimation = isAnimator && !!animationDuration, labels = selectLabels(filteredData, context, false, hasAnimation);
                            if (!labels) {
                                return;
                            }
                            if (hasAnimation) {
                                labels
                                    .text(function (d) { return d.labeltext; })
                                    .transition()
                                    .duration(animationDuration)
                                    .style(layout.style)
                                    .style("opacity", (hasSelection ? function (d) { return getFillOpacity(d.selected, false, hasSelection, false); } : 1))
                                    .attr({
                                    x: function (d) { return d.labelX; },
                                    y: function (d) { return d.labelY; }
                                });
                                labels
                                    .exit()
                                    .transition()
                                    .duration(animationDuration)
                                    .style("opacity", 0) // fade out labels that are removed
                                    .remove();
                            }
                            else {
                                labels
                                    .attr({ x: function (d) { return d.labelX; }, y: function (d) { return d.labelY; } })
                                    .text(function (d) { return d.labeltext; })
                                    .style(layout.style);
                                labels
                                    .exit()
                                    .remove();
                            }
                            return labels;
                        }
                        utils.drawDefaultLabelsForDataPointChart = drawDefaultLabelsForDataPointChart;
                        function selectLabels(filteredData, context, isDonut, forAnimation) {
                            if (isDonut === void 0) { isDonut = false; }
                            if (forAnimation === void 0) { forAnimation = false; }
                            // Check for a case where resizing leaves no labels - then we need to remove the labels "g"
                            if (filteredData.length === 0) {
                                cleanDataLabels(context, true);
                                return null;
                            }
                            if (context.select(labelGraphicsContextClass.selector).empty()) {
                                context.append("g").classed(labelGraphicsContextClass.class, true);
                            }
                            // line chart ViewModel has a special "key" property for point identification since the "identity" field is set to the series identity
                            var hasKey = filteredData[0].key != null;
                            var hasDataPointIdentity = filteredData[0].identity != null;
                            var getIdentifier = hasKey ?
                                function (d) { return d.key; }
                                : hasDataPointIdentity ?
                                    function (d) { return d.identity.getKey(); }
                                    : undefined;
                            var labels = isDonut ?
                                context.select(labelGraphicsContextClass.selector).selectAll(labelsClass.selector).data(filteredData, function (d) { return d.data.identity.getKey(); })
                                : getIdentifier != null ?
                                    context.select(labelGraphicsContextClass.selector).selectAll(labelsClass.selector).data(filteredData, getIdentifier)
                                    : context.select(labelGraphicsContextClass.selector).selectAll(labelsClass.selector).data(filteredData);
                            var newLabels = labels.enter()
                                .append("text")
                                .classed(labelsClass.class, true);
                            if (forAnimation) {
                                newLabels.style("opacity", 0);
                            }
                            return labels;
                        }
                        function cleanDataLabels(context, removeLines) {
                            if (removeLines === void 0) { removeLines = false; }
                            var empty = [], labels = context.selectAll(labelsClass.selector).data(empty);
                            labels
                                .exit()
                                .remove();
                            context
                                .selectAll(labelGraphicsContextClass.selector)
                                .remove();
                            if (removeLines) {
                                var lines = context
                                    .selectAll(lineClass.selector)
                                    .data(empty);
                                lines
                                    .exit()
                                    .remove();
                                context
                                    .selectAll(linesGraphicsContextClass.selector)
                                    .remove();
                            }
                        }
                        utils.cleanDataLabels = cleanDataLabels;
                        function setHighlightedLabelsOpacity(context, hasSelection, hasHighlights) {
                            context
                                .selectAll(labelsClass.selector)
                                .style("fill-opacity", function (d) {
                                var labelOpacity = getFillOpacity(d.selected, d.highlight, !d.highlight && hasSelection, !d.selected && hasHighlights) < 1 ? 0 : 1;
                                return labelOpacity;
                            });
                        }
                        utils.setHighlightedLabelsOpacity = setHighlightedLabelsOpacity;
                        function getLabelFormattedText(options) {
                            var properties = {
                                text: options.formatter
                                    ? options.formatter.format(options.label)
                                    : formattingService.formatValue(options.label, options.format),
                                fontFamily: utils.LabelTextProperties.fontFamily,
                                fontSize: PixelConverter.fromPoint(options.fontSize),
                                fontWeight: utils.LabelTextProperties.fontWeight,
                            };
                            return textMeasurementService.getTailoredTextOrDefault(properties, options.maxWidth
                                ? options.maxWidth
                                : utils.maxLabelWidth);
                        }
                        utils.getLabelFormattedText = getLabelFormattedText;
                        function enumerateDataLabels(options) {
                            if (!options.dataLabelsSettings) {
                                return;
                            }
                            var instance = {
                                objectName: "labels",
                                selector: options.selector,
                                properties: {},
                            };
                            if (options.show && options.selector) {
                                instance.properties["showSeries"] = options.dataLabelsSettings.show;
                            }
                            else if (options.show) {
                                instance.properties["show"] = options.dataLabelsSettings.show;
                            }
                            instance.properties["color"] = options.dataLabelsSettings.labelColor || utils.defaultLabelColor;
                            if (options.displayUnits) {
                                instance.properties["labelDisplayUnits"] = options.dataLabelsSettings.displayUnits;
                            }
                            if (options.precision) {
                                var precision = options.dataLabelsSettings.precision;
                                instance.properties["labelPrecision"] = precision === utils.defaultLabelPrecision ? null : precision;
                            }
                            if (options.position) {
                                instance.properties["labelPosition"] = options.dataLabelsSettings.position;
                                if (options.positionObject) {
                                    instance.validValues = { "labelPosition": options.positionObject };
                                }
                            }
                            if (options.labelStyle) {
                                instance.properties["labelStyle"] = options.dataLabelsSettings.labelStyle;
                            }
                            if (options.fontSize) {
                                instance.properties["fontSize"] = options.dataLabelsSettings.fontSize;
                            }
                            if (options.labelDensity) {
                                var lineChartSettings = options.dataLabelsSettings;
                                if (lineChartSettings) {
                                    instance.properties["labelDensity"] = lineChartSettings.labelDensity;
                                }
                            }
                            // Keep show all as the last property of the instance.
                            if (options.showAll) {
                                instance.properties["showAll"] = options.dataLabelsSettings.showLabelPerSeries;
                            }
                            options.instances.push(instance);
                            return instance;
                        }
                        utils.enumerateDataLabels = enumerateDataLabels;
                        function enumerateCategoryLabels(enumeration, dataLabelsSettings, withFill, isShowCategory, fontSize) {
                            if (isShowCategory === void 0) { isShowCategory = false; }
                            var labelSettings = (dataLabelsSettings)
                                ? dataLabelsSettings
                                : getDefaultPointLabelSettings();
                            var instance = {
                                objectName: "categoryLabels",
                                selector: null,
                                properties: {
                                    show: isShowCategory
                                        ? labelSettings.showCategory
                                        : labelSettings.show,
                                    fontSize: dataLabelsSettings ? dataLabelsSettings.fontSize : utils.DefaultFontSizeInPt,
                                },
                            };
                            if (withFill) {
                                instance.properties["color"] = labelSettings.categoryLabelColor
                                    ? labelSettings.categoryLabelColor
                                    : labelSettings.labelColor;
                            }
                            if (fontSize) {
                                instance.properties["fontSize"] = fontSize;
                            }
                            enumeration.instances.push(instance);
                        }
                        utils.enumerateCategoryLabels = enumerateCategoryLabels;
                        function getDisplayUnitValueFromAxisFormatter(axisFormatter, labelSettings) {
                            if (axisFormatter && axisFormatter.displayUnit && labelSettings.displayUnits === 0) {
                                return axisFormatter.displayUnit.value;
                            }
                            return null;
                        }
                        function createColumnFormatterCacheManager() {
                            return {
                                cache: { defaultFormatter: null },
                                getOrCreate: function (formatString, labelSetting, value2) {
                                    if (formatString) {
                                        var cacheKeyObject = {
                                            formatString: formatString,
                                            displayUnits: labelSetting.displayUnits,
                                            precision: getLabelPrecision(labelSetting.precision, formatString),
                                            value2: value2
                                        };
                                        var cacheKey = JSON.stringify(cacheKeyObject);
                                        if (!this.cache[cacheKey]) {
                                            this.cache[cacheKey] = valueFormatter.create(getOptionsForLabelFormatter(labelSetting, formatString, value2, cacheKeyObject.precision));
                                        }
                                        return this.cache[cacheKey];
                                    }
                                    if (!this.cache.defaultFormatter) {
                                        this.cache.defaultFormatter = valueFormatter.create(getOptionsForLabelFormatter(labelSetting, formatString, value2, labelSetting.precision));
                                    }
                                    return this.cache.defaultFormatter;
                                }
                            };
                        }
                        utils.createColumnFormatterCacheManager = createColumnFormatterCacheManager;
                        function getOptionsForLabelFormatter(labelSetting, formatString, value2, precision) {
                            return {
                                displayUnitSystemType: DisplayUnitSystemType.DataLabels,
                                format: formatString,
                                precision: precision,
                                value: labelSetting.displayUnits,
                                value2: value2,
                                allowFormatBeautification: true,
                            };
                        }
                        utils.getOptionsForLabelFormatter = getOptionsForLabelFormatter;
                        function isTextWidthOverflows(textWidth, maxTextWidth) {
                            return textWidth > maxTextWidth;
                        }
                        utils.isTextWidthOverflows = isTextWidthOverflows;
                        ;
                        function isTextHeightOverflows(textHeight, innerChordLength) {
                            return textHeight > innerChordLength;
                        }
                        utils.isTextHeightOverflows = isTextHeightOverflows;
                        ;
                    })(utils = dataLabel.utils || (dataLabel.utils = {}));
                })(dataLabel = chart.dataLabel || (chart.dataLabel = {}));
            })(chart = utils_1.chart || (utils_1.chart = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var tooltip;
            (function (tooltip) {
                var touch;
                (function (touch) {
                    function touchStartEventName() {
                        var eventName = "touchstart";
                        if (window["PointerEvent"]) {
                            // IE11
                            eventName = "pointerdown";
                        }
                        return eventName;
                    }
                    touch.touchStartEventName = touchStartEventName;
                    function touchEndEventName() {
                        var eventName = "touchend";
                        if (window["PointerEvent"]) {
                            // IE11
                            eventName = "pointerup";
                        }
                        return eventName;
                    }
                    touch.touchEndEventName = touchEndEventName;
                    function usePointerEvents() {
                        var eventName = touchStartEventName();
                        return eventName === "pointerdown" || eventName === "MSPointerDown";
                    }
                    touch.usePointerEvents = usePointerEvents;
                })(touch = tooltip.touch || (tooltip.touch = {}));
            })(tooltip = utils.tooltip || (utils.tooltip = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var utils;
        (function (utils) {
            var tooltip;
            (function (tooltip) {
                var DefaultHandleTouchDelay = 1000;
                function createTooltipServiceWrapper(tooltipService, rootElement, handleTouchDelay) {
                    if (handleTouchDelay === void 0) { handleTouchDelay = DefaultHandleTouchDelay; }
                    return new TooltipServiceWrapper(tooltipService, rootElement, handleTouchDelay);
                }
                tooltip.createTooltipServiceWrapper = createTooltipServiceWrapper;
                var TooltipServiceWrapper = (function () {
                    function TooltipServiceWrapper(tooltipService, rootElement, handleTouchDelay) {
                        if (handleTouchDelay === void 0) { handleTouchDelay = DefaultHandleTouchDelay; }
                        this.visualHostTooltipService = tooltipService;
                        this.rootElement = rootElement;
                        this.handleTouchDelay = handleTouchDelay;
                    }
                    TooltipServiceWrapper.prototype.addTooltip = function (selection, getTooltipInfoDelegate, getDataPointIdentity, reloadTooltipDataOnMouseMove) {
                        var _this = this;
                        if (!selection || !this.visualHostTooltipService.enabled()) {
                            return;
                        }
                        var rootNode = this.rootElement;
                        // Mouse events
                        selection.on("mouseover.tooltip", function () {
                            // Ignore mouseover while handling touch events
                            if (!_this.canDisplayTooltip(d3.event)) {
                                return;
                            }
                            var tooltipEventArgs = _this.makeTooltipEventArgs(rootNode, true, false);
                            if (!tooltipEventArgs) {
                                return;
                            }
                            var tooltipInfo = getTooltipInfoDelegate(tooltipEventArgs);
                            if (tooltipInfo == null) {
                                return;
                            }
                            var selectionIds = _this.getSelectionIds(tooltipEventArgs, getDataPointIdentity);
                            _this.visualHostTooltipService.show({
                                coordinates: tooltipEventArgs.coordinates,
                                isTouchEvent: false,
                                dataItems: tooltipInfo,
                                identities: selectionIds
                            });
                        });
                        selection.on("mouseout.tooltip", function () {
                            _this.visualHostTooltipService.hide({
                                isTouchEvent: false,
                                immediately: false,
                            });
                        });
                        selection.on("mousemove.tooltip", function () {
                            // Ignore mousemove while handling touch events
                            if (!_this.canDisplayTooltip(d3.event)) {
                                return;
                            }
                            var tooltipEventArgs = _this.makeTooltipEventArgs(rootNode, true, false);
                            if (!tooltipEventArgs) {
                                return;
                            }
                            var tooltipInfo;
                            if (reloadTooltipDataOnMouseMove) {
                                tooltipInfo = getTooltipInfoDelegate(tooltipEventArgs);
                                if (tooltipInfo == null) {
                                    return;
                                }
                            }
                            var selectionIds = _this.getSelectionIds(tooltipEventArgs, getDataPointIdentity);
                            _this.visualHostTooltipService.move({
                                coordinates: tooltipEventArgs.coordinates,
                                isTouchEvent: false,
                                dataItems: tooltipInfo,
                                identities: selectionIds
                            });
                        });
                        // --- Touch events ---
                        var touchStartEventName = tooltip.touch.touchStartEventName(), touchEndEventName = tooltip.touch.touchEndEventName(), isPointerEvent = tooltip.touch.usePointerEvents();
                        selection.on(touchStartEventName + ".tooltip", function () {
                            _this.visualHostTooltipService.hide({
                                isTouchEvent: true,
                                immediately: true,
                            });
                            var tooltipEventArgs = _this.makeTooltipEventArgs(rootNode, isPointerEvent, true);
                            if (!tooltipEventArgs) {
                                return;
                            }
                            var tooltipInfo = getTooltipInfoDelegate(tooltipEventArgs), selectionIds = _this.getSelectionIds(tooltipEventArgs, getDataPointIdentity);
                            _this.visualHostTooltipService.show({
                                coordinates: tooltipEventArgs.coordinates,
                                isTouchEvent: true,
                                dataItems: tooltipInfo,
                                identities: selectionIds
                            });
                        });
                        selection.on(touchEndEventName + ".tooltip", function () {
                            _this.visualHostTooltipService.hide({
                                isTouchEvent: true,
                                immediately: false,
                            });
                            if (_this.handleTouchTimeoutId) {
                                clearTimeout(_this.handleTouchTimeoutId);
                            }
                            // At the end of touch action, set a timeout that will let us ignore the incoming mouse events for a small amount of time
                            // TODO: any better way to do this?
                            _this.handleTouchTimeoutId = setTimeout(function () {
                                _this.handleTouchTimeoutId = undefined;
                            }, _this.handleTouchDelay);
                        });
                    };
                    TooltipServiceWrapper.prototype.getSelectionIds = function (tooltipEventArgs, getDataPointIdentity) {
                        var selectionId = getDataPointIdentity
                            ? getDataPointIdentity(tooltipEventArgs)
                            : null;
                        return selectionId
                            ? [selectionId]
                            : [];
                    };
                    TooltipServiceWrapper.prototype.hide = function () {
                        this.visualHostTooltipService.hide({ immediately: true, isTouchEvent: false });
                    };
                    TooltipServiceWrapper.prototype.makeTooltipEventArgs = function (rootNode, isPointerEvent, isTouchEvent) {
                        var target = d3.event.target, data = d3.select(target).datum();
                        var mouseCoordinates = this.getCoordinates(rootNode, isPointerEvent), elementCoordinates = this.getCoordinates(target, isPointerEvent);
                        var tooltipEventArgs = {
                            data: data,
                            coordinates: mouseCoordinates,
                            elementCoordinates: elementCoordinates,
                            context: target,
                            isTouchEvent: isTouchEvent
                        };
                        return tooltipEventArgs;
                    };
                    TooltipServiceWrapper.prototype.canDisplayTooltip = function (d3Event) {
                        var canDisplay = true, mouseEvent = d3Event;
                        if (mouseEvent.buttons !== undefined) {
                            // Check mouse buttons state
                            var hasMouseButtonPressed = mouseEvent.buttons !== 0;
                            canDisplay = !hasMouseButtonPressed;
                        }
                        // Make sure we are not ignoring mouse events immediately after touch end.
                        canDisplay = canDisplay && (this.handleTouchTimeoutId == null);
                        return canDisplay;
                    };
                    TooltipServiceWrapper.prototype.getCoordinates = function (rootNode, isPointerEvent) {
                        var coordinates;
                        if (isPointerEvent) {
                            // DO NOT USE - WebKit bug in getScreenCTM with nested SVG results in slight negative coordinate shift
                            // Also, IE will incorporate transform scale but WebKit does not, forcing us to detect browser and adjust appropriately.
                            // Just use non-scaled coordinates for all browsers, and adjust for the transform scale later (see lineChart.findIndex)
                            // coordinates = d3.mouse(rootNode);
                            // copied from d3_eventSource (which is not exposed)
                            var e = d3.event, s = void 0;
                            while (s = e.sourceEvent)
                                e = s;
                            var rect = rootNode.getBoundingClientRect();
                            coordinates = [
                                e.clientX - rect.left - rootNode.clientLeft,
                                e.clientY - rect.top - rootNode.clientTop
                            ];
                        }
                        else {
                            var touchCoordinates = d3.touches(rootNode);
                            if (touchCoordinates && touchCoordinates.length > 0) {
                                coordinates = touchCoordinates[0];
                            }
                        }
                        return coordinates;
                    };
                    return TooltipServiceWrapper;
                }());
                tooltip.TooltipServiceWrapper = TooltipServiceWrapper;
            })(tooltip = utils.tooltip || (utils.tooltip = {}));
        })(utils = extensibility.utils || (extensibility.utils = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));

/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var visual;
        (function (visual) {
            var Tachometer1474636471549;
            (function (Tachometer1474636471549) {
                (function (axisScaleType) {
                    axisScaleType[axisScaleType["linear"] = "Linear"] = "linear";
                    axisScaleType[axisScaleType["log"] = "Log"] = "log";
                })(Tachometer1474636471549.axisScaleType || (Tachometer1474636471549.axisScaleType = {}));
                var axisScaleType = Tachometer1474636471549.axisScaleType;
            })(Tachometer1474636471549 = visual.Tachometer1474636471549 || (visual.Tachometer1474636471549 = {}));
        })(visual = extensibility.visual || (extensibility.visual = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
/*
 *  Power BI Visual CLI
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */
var powerbi;
(function (powerbi) {
    var extensibility;
    (function (extensibility) {
        var visual;
        (function (visual) {
            var Tachometer1474636471549;
            (function (Tachometer1474636471549) {
                var createClassAndSelector = powerbi.extensibility.utils.svg.CssConstants.createClassAndSelector;
                var PixelConverter = powerbi.extensibility.utils.type.PixelConverter;
                var dataLabelUtils = powerbi.extensibility.utils.chart.dataLabel.utils;
                var SVGUtil = powerbi.extensibility.utils.svg;
                var valueFormatter = powerbi.extensibility.utils.formatting.valueFormatter;
                var textMeasurementService = powerbi.extensibility.utils.formatting.textMeasurementService;
                var AxisHelper = powerbi.extensibility.utils.chart.axis;
                var DataRoleHelper = powerbi.extensibility.utils.dataview.DataRoleHelper;
                var DisplayUnitSystemType = powerbi.extensibility.utils.formatting.DisplayUnitSystemType;
                var minLabelFontSize = 8;
                /**
                 * Renders a data value in a gauge. The gauge can start and end in any user defined angle/orientation.
                 * Gauge has 3 main regions to indicate for example fail, average, high values.
                 * Almost every component in the gauge is customizable.
                 * Indika Chamara Ranasinghe 6/21/2016
                 * Updated to CLI API 1/31/2017
                 */
                var Tachometer = (function () {
                    function Tachometer(options) {
                        this.showAxisLabels = false;
                        this.showTargetLabel = false;
                        this.showCalloutValue = false;
                        this.showCalloutPercent = false;
                        this.gaugeStyle = Tachometer.DefaultStyleProperties;
                        this.axisData = Tachometer.initializeTachometerData();
                        this.setAxisScale(this.axisData);
                        this.hostService = options.host;
                        var svg = this.svg = d3.select(options.element).append('svg').classed(Tachometer.VisualClassName, true);
                        var mainGraphicsContext = this.mainGraphicsContext = svg.append('g')
                            .attr('class', Tachometer.MainTachometerGroupClassName);
                        this.axisLabelsGraphicsContext = svg.append('g')
                            .attr('class', Tachometer.AxisLabelsGroupClassName);
                        var overlayGraphicsContext = this.overlayGraphicsContext = svg.append('g')
                            .attr('class', Tachometer.OverlayTachometerGroupClassName);
                        this.range1Arc = d3.svg.arc();
                        this.range2Arc = d3.svg.arc();
                        this.range3Arc = d3.svg.arc();
                        this.centerArc = d3.svg.arc();
                        this.range1ArcPath = mainGraphicsContext.append('path').classed('range1Arc', true);
                        this.range2ArcPath = mainGraphicsContext.append('path').classed('range2Arc', true);
                        this.range3ArcPath = mainGraphicsContext.append('path').classed('range3Arc', true);
                        this.needle = overlayGraphicsContext.append('path') //The needle is added to overlay context to make sure it always renders above target indicator
                            .classed('needle', true)
                            .attr('stroke-width', Tachometer.DefaultStyleProperties.indicator.thickness)
                            .attr('fill', Tachometer.DefaultStyleProperties.indicator.fill);
                        this.centerArcPath = overlayGraphicsContext.append('path').classed('centerArc', true); //center arc should be rendered above the needle
                        this.calloutLabel = overlayGraphicsContext.append('text').classed('calloutLabel', true);
                        this.calloutPercent = overlayGraphicsContext.append('text').classed('calloutPercent', true);
                    }
                    Tachometer.prototype.update = function (options) {
                        if (!options || !options.dataViews || !options.dataViews[0]) {
                            return;
                        }
                        this.currentViewport = options.viewport;
                        var dataViews = options.dataViews;
                        this.dataView = dataViews[0];
                        var viewModel = this.viewModel = this.transform(dataViews[0], this.tooltipsEnabled);
                        viewModel = this.completeViewModel(viewModel);
                        this.drawViewPort(viewModel);
                    };
                    Tachometer.prototype.destroy = function () {
                        this.svg = null;
                    };
                    Tachometer.initializeTachometerData = function () {
                        var axisData = {
                            startValue: Tachometer.UnintializedStartValue,
                            endValue: Tachometer.UnintializedEndValue,
                            startAngle: Tachometer.UnintializedStartAngle,
                            endAngle: Tachometer.UnintializedEndAngle,
                            axisScaleType: Tachometer1474636471549.axisScaleType.linear,
                            value: 0,
                            radius: 1,
                            axisLabelRadius: 1,
                            //tooltipItems: [],
                            valueRange: 0,
                            angleRange: 0,
                            directionClockwise: true,
                            startQuadrant: 3,
                            endQuadrant: 2,
                            cosStartAngle: 0,
                            cosEndAngle: 1,
                            sinStartAngle: 1,
                            sinEndAngle: 0,
                            range1: {
                                startValue: Tachometer.UnintializedRangeStartValue,
                                endValue: Tachometer.UnintializedEndValue,
                                rangeColor: Tachometer.DefaultRange1Color,
                                innerRadiusRatio: 0.5,
                                radius: 1,
                                innerRadius: 0.5,
                                startAngle: 0,
                                endAngle: 0,
                            },
                            range2: {
                                startValue: Tachometer.UnintializedRangeStartValue,
                                endValue: Tachometer.UnintializedEndValue,
                                rangeColor: Tachometer.DefaultRange2Color,
                                innerRadiusRatio: 0.5,
                                radius: 1,
                                innerRadius: 0.5,
                                startAngle: 0,
                                endAngle: 0,
                            },
                            range3: {
                                startValue: Tachometer.UnintializedRangeStartValue,
                                endValue: Tachometer.UnintializedEndValue,
                                rangeColor: Tachometer.DefaultRange3Color,
                                innerRadiusRatio: 0.5,
                                radius: 1,
                                innerRadius: 0.5,
                                startAngle: 0,
                                endAngle: 0,
                            },
                            target: {
                                show: Tachometer.defaultTargetSettings.show,
                                value: Tachometer.defaultTargetSettings.value,
                                lineColor: Tachometer.defaultTargetSettings.lineColor,
                                innerRadiusRatio: Tachometer.defaultTargetSettings.innerRadiusRatio,
                                radius: Tachometer.defaultTargetSettings.radius,
                                innerRadius: Tachometer.defaultTargetSettings.innerRadius,
                                thickness: Tachometer.defaultTargetSettings.thickness,
                                offset: { x: Tachometer.defaultTargetSettings.offset.x, y: Tachometer.defaultTargetSettings.offset.y },
                                textColor: Tachometer.defaultTargetSettings.textColor,
                                fontSize: Tachometer.defaultTargetSettings.fontSize,
                                textHeight: Tachometer.defaultTargetSettings.textHeight,
                            },
                            offset: { x: 0, y: 0 },
                            transformString: '',
                            percent: 0,
                            dataLabels: { show: true },
                            indicator: {
                                value: Tachometer.defaultIndicatorSettings.value,
                                needlePoints: Tachometer.defaultIndicatorSettings.needlePoints,
                                needletransformString: Tachometer.defaultIndicatorSettings.needletransformString,
                                pointerSizeFactor: Tachometer.defaultIndicatorSettings.pointerSizeFactor,
                                pointerColor: Tachometer.defaultIndicatorSettings.pointerColor,
                                baseColor: Tachometer.defaultIndicatorSettings.baseColor,
                                baseRadius: Tachometer.defaultIndicatorSettings.baseRadius,
                                baseInnerRadius: Tachometer.defaultIndicatorSettings.baseInnerRadius,
                                baseThicknessFactor: Tachometer.defaultIndicatorSettings.baseThicknessFactor,
                                baseStartAngle: Tachometer.defaultIndicatorSettings.baseStartAngle,
                                baseEndtAngle: Tachometer.defaultIndicatorSettings.baseEndtAngle,
                            }
                        };
                        return axisData;
                    };
                    Tachometer.prototype.setAxisScale = function (axisData) {
                        var domainStart = axisData.startValue;
                        var domainEnd = axisData.endValue;
                        if (axisData.axisScaleType
                            && axisData.axisScaleType === Tachometer1474636471549.axisScaleType.log) {
                            if ((domainStart > 0 && domainEnd > 0) || (domainStart < 0 && domainEnd < 0)) {
                                this.axisScale = d3.scale.log();
                                this.currentScaleType = Tachometer1474636471549.axisScaleType.log;
                            }
                            else if ((domainStart === 0) && (Math.abs(domainEnd) > 1)) {
                                axisData.startValue = domainStart = Math.min(1, Math.exp(Math.log(domainEnd) / 10)); //make it close to zero as possible 
                                this.axisScale = d3.scale.log();
                                this.currentScaleType = Tachometer1474636471549.axisScaleType.log;
                            }
                            else if ((domainEnd === 0) && (Math.abs(domainStart) > 1)) {
                                axisData.endValue = domainEnd = Math.min(1, Math.exp(Math.log(domainStart) / 10)); //make it close to zero as possible 
                                this.axisScale = d3.scale.log();
                                this.currentScaleType = Tachometer1474636471549.axisScaleType.log;
                            }
                            else {
                                this.setNiceLinearScale();
                            }
                        }
                        else {
                            this.setNiceLinearScale();
                        }
                        this.axisScale.domain([domainStart, domainEnd])
                            .range([axisData.startAngle, axisData.endAngle])
                            .clamp(true);
                    };
                    Tachometer.prototype.setNiceLinearScale = function () {
                        this.axisScale = d3.scale.linear();
                        this.currentScaleType = Tachometer1474636471549.axisScaleType.linear;
                        var dataLabels = (this.axisData) ? this.axisData.dataLabels : null;
                        if (dataLabels && dataLabels.show && dataLabels.round) {
                            if (dataLabels.count > 0) {
                                this.axisScale.nice(dataLabels.count);
                            }
                            else {
                                this.axisScale.nice();
                            }
                        }
                    };
                    Tachometer.prototype.transform = function (dataView, tooltipsEnabled) {
                        if (tooltipsEnabled === void 0) { tooltipsEnabled = true; }
                        var axisData = this.transformTachometerData(dataView);
                        this.metadataColumn = Tachometer.getMetaDataColumn(dataView);
                        return {
                            axis: axisData,
                            //tooltipInfo: Tachometer.getToolTipInfo(dataView, axisData, tooltipsEnabled),
                            callout: {
                                calloutValue: this.transformCalloutValue(dataView, axisData),
                                calloutPercent: this.transformCalloutPercent(dataView, axisData),
                                baseOffset: { x: 0, y: 0 },
                            },
                            availableHeight: 0,
                            availableWidth: 0,
                            viewportHeight: 0,
                            viewportWidth: 0
                        };
                    };
                    Tachometer.prototype.completeViewModel = function (viewModel) {
                        var viewport = this.currentViewport;
                        var calloutTextHeight = 0;
                        var calloutValueSpace = 0;
                        var calloutPercentTextHeight = 0;
                        var calloutPercentSpace = 0;
                        var axisData = viewModel.axis;
                        var calloutValueUserDefinedYOffset = 0;
                        var calloutPercentUserDefinedYOffset = 0;
                        var maxRenderWidth = viewport.width - 2 * Tachometer.ReducedHorizontalMargin;
                        var maxRenderHeight = viewport.height - Tachometer.DefaultMarginSettings.top - Tachometer.DefaultMarginSettings.bottom;
                        this.axisData = axisData;
                        this.setAxisScale(axisData);
                        var callout = viewModel.callout;
                        var calloutValue = callout ? callout.calloutValue : undefined;
                        var calloutPercent = callout ? callout.calloutPercent : undefined;
                        this.setCalloutPercentValue(calloutPercent, axisData);
                        this.completeTargetTextProperties(axisData);
                        var showLabels = this.showLabelText();
                        // Only show the target label if:
                        //   1. There is a target
                        //   2. The viewport width is big enough for a target
                        this.showAxisLabels = axisData.dataLabels.show
                            && (maxRenderWidth > Tachometer.MinWidthForAxisLabel)
                            && (maxRenderWidth > axisData.dataLabels.textWidth * Tachometer.AxisLabelPruningLimit.width)
                            && (maxRenderHeight > Tachometer.MinHeightForAxisLabel)
                            && (maxRenderHeight > axisData.dataLabels.textHeight * Tachometer.AxisLabelPruningLimit.height)
                            && showLabels;
                        // Only show the target label if:
                        //   1. There is a target
                        //   2. The viewport width is big enough for a target
                        this.showTargetLabel = (axisData.target.value !== Tachometer.UnintializedStartValue)
                            && axisData.target.show
                            && (maxRenderWidth > Tachometer.MinWidthForTargetLabel)
                            && (maxRenderWidth > axisData.target.textWidth * Tachometer.TargetLabelPruningLimit.width)
                            && (maxRenderHeight > Tachometer.MinHeightForTargetLabel)
                            && (maxRenderHeight > axisData.target.textHeight * Tachometer.TargetLabelPruningLimit.height)
                            && showLabels;
                        // Only show the callout Value label if:
                        //   1. There is a callout Value
                        //   2. The viewport width is big enough for a target
                        this.showCalloutValue = calloutValue
                            && calloutValue.show
                            && (maxRenderWidth > Tachometer.MinWidthForTargetLabel)
                            && (maxRenderWidth > calloutValue.textWidth * Tachometer.CalloutPruningLimit.width)
                            && (maxRenderHeight > Tachometer.MinHeightForTargetLabel)
                            && (maxRenderHeight > calloutValue.textHeight * Tachometer.CalloutPruningLimit.height)
                            && showLabels;
                        // Only show the callout Percent label if:
                        //   1. There is a callout Percent
                        //   2. The viewport width is big enough for a target
                        this.showCalloutPercent = calloutPercent
                            && calloutPercent.show
                            && (maxRenderWidth > Tachometer.MinWidthForTargetLabel)
                            && (maxRenderWidth > calloutPercent.textWidth * Tachometer.CalloutPruningLimit.width)
                            && (maxRenderHeight > Tachometer.MinHeightForTargetLabel)
                            && (maxRenderHeight > calloutPercent.textHeight * Tachometer.CalloutPruningLimit.height)
                            && showLabels;
                        axisData.dataLabels.formatter = this.getWiderFormatter(axisData.dataLabels, axisData.startValue, axisData.endValue);
                        var margins = this.defineMargins(axisData);
                        var availableWidth = this.getAvailebleWidth(viewport, margins);
                        if (availableWidth < 0) {
                            this.showAxisLabels = false;
                            this.showTargetLabel = false;
                            margins = this.defineMargins(axisData);
                            availableWidth = this.getAvailebleWidth(viewport, margins);
                            if (availableWidth < 0) {
                                availableWidth = 0;
                                this.showCalloutValue = false;
                                this.showCalloutPercent = false;
                            }
                        }
                        if (this.showCalloutPercent) {
                            calloutPercentTextHeight = callout.calloutPercent.textHeight + this.gaugeStyle.callout.padding;
                            var yOffsetBaseEstimate = viewport.height - (Tachometer.DefaultMarginSettings.bottom + calloutPercentTextHeight);
                            //Adjust for user defined label displacement
                            calloutPercentUserDefinedYOffset = Tachometer.translateUserYOffset(yOffsetBaseEstimate, callout.calloutPercent, viewport.height, this.gaugeStyle.callout.padding);
                            calloutPercentSpace = calloutPercentUserDefinedYOffset >= 0 ?
                                calloutPercentTextHeight : Math.max(calloutPercentTextHeight + calloutPercentUserDefinedYOffset, 0);
                        }
                        if (this.showCalloutValue) {
                            calloutTextHeight = callout.calloutValue.textHeight + this.gaugeStyle.callout.padding;
                            var yOffsetBaseEstimate = viewport.height - (Tachometer.DefaultMarginSettings.bottom + calloutTextHeight);
                            //Adjust for user defined label displacement
                            calloutValueUserDefinedYOffset = Tachometer.translateUserYOffset(yOffsetBaseEstimate, callout.calloutValue, viewport.height, this.gaugeStyle.callout.padding);
                            calloutValueSpace = calloutValueUserDefinedYOffset >= 0 ?
                                calloutTextHeight : Math.max(calloutTextHeight + calloutValueUserDefinedYOffset, 0);
                        }
                        var availableHeight = this.getAvailebleHeight(viewport, margins, calloutValueSpace, calloutPercentSpace);
                        if (availableHeight < 0) {
                            this.showAxisLabels = this.showTargetLabel = this.showCalloutValue = this.showCalloutPercent = false;
                            calloutValueSpace = calloutPercentSpace = 0;
                            availableHeight = Math.max(viewport.height - margins.mainMargin.top - margins.mainMargin.bottom, 0);
                        }
                        var translation = this.calculateGaugeTranslation(axisData, axisData.startAngle, axisData.endAngle, availableHeight, availableWidth);
                        //Remove axis labels and recalculate gauge translation if radius is too small
                        var radius = translation.radius;
                        if (this.showAxisLabels && (radius < Math.max(margins.labelMargin.top, margins.labelMargin.bottom))) {
                            this.showAxisLabels = false;
                            margins = this.defineMargins(axisData);
                            var availableHeight = this.getAvailebleHeight(viewport, margins, calloutValueSpace, calloutPercentSpace);
                            if (availableHeight < 0) {
                                this.showAxisLabels = this.showTargetLabel = this.showCalloutValue = this.showCalloutPercent = false;
                                calloutValueSpace = calloutPercentSpace = 0;
                                margins = this.defineMargins(axisData);
                                availableHeight = Math.max(this.getAvailebleHeight(viewport, margins, calloutValueSpace, calloutPercentSpace), 0);
                            }
                            var availableWidth = this.getAvailebleWidth(viewport, margins);
                            if (availableWidth < 0) {
                                this.showAxisLabels = false;
                                this.showTargetLabel = false;
                                margins.mainMargin.left = margins.mainMargin.right = Tachometer.ReducedHorizontalMargin;
                                availableWidth = viewport.width - margins.mainMargin.right - margins.mainMargin.left;
                                if (availableWidth < 0) {
                                    availableWidth = 0;
                                    this.showCalloutValue = false;
                                    this.showCalloutPercent = false;
                                }
                            }
                            translation = this.calculateGaugeTranslation(axisData, axisData.startAngle, axisData.endAngle, availableHeight, availableWidth);
                            radius = translation.radius;
                        }
                        //Remove target label and recalculate gauge translation if radius is too small
                        if (this.showTargetLabel && (radius < Math.max(margins.labelMargin.top, margins.labelMargin.bottom))) {
                            this.showTargetLabel = false;
                            margins = this.defineMargins(axisData);
                            var availableHeight = this.getAvailebleHeight(viewport, margins, calloutValueSpace, calloutPercentSpace);
                            if (availableHeight < 0) {
                                this.showAxisLabels = this.showTargetLabel = this.showCalloutValue = this.showCalloutPercent = false;
                                calloutValueSpace = calloutPercentSpace = 0;
                                margins = this.defineMargins(axisData);
                                availableHeight = Math.max(this.getAvailebleHeight(viewport, margins, calloutValueSpace, calloutPercentSpace), 0);
                            }
                            var availableWidth = this.getAvailebleWidth(viewport, margins);
                            if (availableWidth < 0) {
                                this.showAxisLabels = false;
                                this.showTargetLabel = false;
                                margins.mainMargin.left = margins.mainMargin.right = Tachometer.ReducedHorizontalMargin;
                                availableWidth = viewport.width - margins.mainMargin.right - margins.mainMargin.left;
                                if (availableWidth < 0) {
                                    availableWidth = 0;
                                    this.showCalloutValue = false;
                                    this.showCalloutPercent = false;
                                }
                            }
                            translation = this.calculateGaugeTranslation(axisData, axisData.startAngle, axisData.endAngle, availableHeight, availableWidth);
                        }
                        //the translation above should be moved down by this much to accomodate for target and axisLabels and margin
                        var translationOffsetY = margins.mainMargin.top + margins.labelMargin.top + margins.targetMargin.top;
                        translation.yOffset += translationOffsetY;
                        translation.calloutyOffset += translationOffsetY + margins.labelMargin.bottom + margins.targetMargin.bottom;
                        //the translation above should be moved right by this much to accomodate for target and axisLabels and margin
                        var translationOffsetX = margins.mainMargin.left + Math.max(margins.labelMargin.left, margins.targetMargin.left);
                        translation.xOffset += translationOffsetX;
                        translation.calloutxOffset += translationOffsetX;
                        viewModel.viewportHeight = viewport.height;
                        viewModel.viewportWidth = viewport.width;
                        viewModel.availableHeight = availableHeight;
                        viewModel.availableWidth = availableWidth;
                        viewModel.axis = this.completeAxis(axisData, translation);
                        viewModel.callout = this.completeCallout(callout, translation);
                        return viewModel;
                    };
                    Tachometer.prototype.drawViewPort = function (viewModel) {
                        this.updateVisualComponents(viewModel);
                        this.updateCallout(viewModel); //callout should be updated after axis labels
                        this.axisLabels = this.createAxisLabels();
                        this.updateAxisLabelText(viewModel.axis, this.axisLabels);
                        this.updateTarget(viewModel); //target should be updated after axis labels and callout
                        this.svg.attr('height', this.currentViewport.height).attr('width', this.currentViewport.width);
                    };
                    Tachometer.prototype.transformTachometerData = function (dataView) {
                        var axisData = this.resetTachometerData();
                        axisData = this.transformTachometerDataRoles(dataView, axisData);
                        axisData = this.transformTachometerSettings(dataView, axisData);
                        return axisData;
                    };
                    Tachometer.getMetaDataColumn = function (dataView) {
                        if (dataView && dataView.metadata && dataView.metadata.columns) {
                            for (var i = 0, ilen = dataView.metadata.columns.length; i < ilen; i++) {
                                var column = dataView.metadata.columns[i];
                                if (column.isMeasure) {
                                    return column;
                                }
                            }
                        }
                        return null;
                    };
                    Tachometer.prototype.transformCalloutValue = function (dataView, axisData) {
                        var callout = Tachometer.transformDataLabelSettings(dataView, 'calloutValue', Tachometer.getDefaultTachometerCalloutSettings());
                        if (callout.show) {
                            var value = axisData.value;
                            var formatter = this.getFormatter(callout.displayUnits, callout.precision, value);
                            var formattedValue = formatter.format(value);
                            callout.formattedValue = formattedValue;
                            callout.textWidth = Tachometer.getTextWidth(callout.fontSizePx, formattedValue);
                        }
                        return callout;
                    };
                    Tachometer.prototype.transformCalloutPercent = function (dataView, axisData) {
                        var callout = Tachometer.transformDataLabelSettings(dataView, 'calloutPercent', Tachometer.getDefaultTachometerCalloutPercentSettings());
                        return callout;
                    };
                    Tachometer.prototype.setCalloutPercentValue = function (calloutPercent, axisData) {
                        if (calloutPercent && calloutPercent.show) {
                            var value = calloutPercent.invert ? 100 - axisData.percent : axisData.percent;
                            var formatter = this.getFormatter(calloutPercent.displayUnits, calloutPercent.precision, value, true);
                            var formattedValue = formatter.format(value);
                            formattedValue = (formattedValue === undefined) ? ' [-%]' : ' [' + formattedValue + '%]';
                            calloutPercent.formattedValue = formattedValue;
                            calloutPercent.textWidth = Tachometer.getTextWidth(calloutPercent.fontSizePx, formattedValue);
                        }
                        return calloutPercent;
                    };
                    Tachometer.prototype.completeTargetTextProperties = function (axis) {
                        //this method has to be called before we calculate the gauge radius but
                        //after reading target Properties as well as gauge axis label properties becaust of the dependancy below
                        var targetSettings = axis.target;
                        if (targetSettings.show) {
                            var dataLabels = axis.dataLabels;
                            var value = targetSettings.value;
                            var formatter = this.getFormatter(dataLabels.displayUnits, dataLabels.precision, value); //Note: Target uses DataLabel settings
                            var formattedValue = formatter.format(value);
                            targetSettings.formattedValue = formattedValue;
                            targetSettings.textWidth = Tachometer.getTextWidth(targetSettings.fontSizePx, formattedValue);
                        }
                    };
                    Tachometer.prototype.showLabelText = function () {
                        if (this.tachometerSmallViewPortProperties) {
                            if (this.tachometerSmallViewPortProperties.hideTachometerSideNumbersOnSmallViewPort) {
                                if (this.currentViewport.height < this.tachometerSmallViewPortProperties.MinHeightTachometerSideNumbersVisible) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    };
                    Tachometer.prototype.getWiderFormatter = function (dataLabelSettings, value1, value2) {
                        var widerLabelValue = Math.abs(value1) > Math.abs(value2) ? value1 : value2;
                        return this.getFormatter(dataLabelSettings.displayUnits, dataLabelSettings.precision, widerLabelValue);
                    };
                    Tachometer.prototype.defineMargins = function (axisData) {
                        if (this.tachometerSmallViewPortProperties) {
                            if (this.tachometerSmallViewPortProperties.smallTachometerMarginsOnSmallViewPort && (this.currentViewport.height < this.tachometerSmallViewPortProperties.MinHeightTachometerSideNumbersVisible)) {
                                var smallMargin = this.tachometerSmallViewPortProperties.TachometerMarginsOnSmallViewPort;
                                var margins = {
                                    mainMargin: { top: smallMargin, bottom: smallMargin, left: smallMargin, right: smallMargin },
                                    labelMargin: this.getZeroMargin(),
                                    targetMargin: this.getZeroMargin()
                                };
                                return margins;
                            }
                        }
                        var targetMargin = this.addPadding(this.getTargetMargin(axisData), this.gaugeStyle.target.padding);
                        var labelMargin = this.addPadding(this.getLabelMargins(axisData), this.gaugeStyle.labels.padding);
                        var MainMargin = {
                            top: (targetMargin.top + labelMargin.top) > 0 ? Tachometer.ReducedVerticaltMargin : Tachometer.DefaultMarginSettings.top,
                            bottom: (targetMargin.bottom + labelMargin.bottom) > 0 ? Tachometer.ReducedVerticaltMargin : Tachometer.DefaultMarginSettings.bottom,
                            left: (targetMargin.left + labelMargin.left) > 0 ? Tachometer.ReducedHorizontalMargin : Tachometer.DefaultMarginSettings.left,
                            right: (targetMargin.right + labelMargin.right) > 0 ? Tachometer.ReducedHorizontalMargin : Tachometer.DefaultMarginSettings.right,
                        };
                        return {
                            mainMargin: MainMargin,
                            labelMargin: labelMargin,
                            targetMargin: targetMargin
                        };
                    };
                    Tachometer.prototype.addPadding = function (margin, padding) {
                        return {
                            top: margin.top > 0 ? margin.top + padding : 0,
                            bottom: margin.bottom > 0 ? margin.bottom + padding : 0,
                            left: margin.left > 0 ? margin.left + padding : 0,
                            right: margin.right > 0 ? margin.right + padding : 0
                        };
                    };
                    Tachometer.prototype.getTargetMargin = function (axisData) {
                        var targetMargin = this.getZeroMargin();
                        var target = axisData ? axisData.target : null;
                        if (target == null || !this.showTargetLabel) {
                            return targetMargin;
                        }
                        var verticalMargin = target.textHeight;
                        var horizontalMargin = target.textWidth;
                        var startAngle = axisData.startAngle;
                        var endAngle = axisData.endAngle;
                        var startQuadrant = axisData.startQuadrant;
                        var endQuadrant = axisData.endQuadrant;
                        var cosAlpha = Math.abs(axisData.cosStartAngle);
                        var cosBeta = Math.abs(axisData.cosEndAngle);
                        var targetAngle = this.axisScale(target.value);
                        var unitRadialClosenessThreshold = Math.abs(Math.cos(Tachometer.RadialClosenessThreshold));
                        //get general case targetMargins
                        targetMargin = this.setClosestMargin(targetMargin, targetAngle, verticalMargin, horizontalMargin);
                        //handle special cases
                        switch (startQuadrant) {
                            case 1:
                                switch (endQuadrant) {
                                    case 1:
                                        if (cosAlpha > cosBeta) {
                                            targetMargin.right = horizontalMargin;
                                            if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                                targetMargin.top = verticalMargin;
                                            }
                                            if (this.showAxisLabels) {
                                                if (Math.abs(Math.cos(targetAngle)) > unitRadialClosenessThreshold) {
                                                    targetMargin.left = horizontalMargin;
                                                }
                                                else if (Math.sin(targetAngle) > unitRadialClosenessThreshold) {
                                                    targetMargin.bottom = verticalMargin;
                                                }
                                            }
                                        }
                                        break;
                                    case 2:
                                        targetMargin.right = horizontalMargin;
                                        if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.top = verticalMargin;
                                            if ((this.showAxisLabels) //Add room to adjust if axis labels are present
                                                && (Math.abs(Math.cos(targetAngle)) > unitRadialClosenessThreshold)) {
                                                targetMargin.left = horizontalMargin;
                                            }
                                        }
                                        else if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.bottom = verticalMargin;
                                            if ((this.showAxisLabels) //Add room to adjust if axis labels are present
                                                && (Math.abs(Math.cos(targetAngle)) > unitRadialClosenessThreshold)) {
                                                targetMargin.left = horizontalMargin;
                                            }
                                        }
                                        break;
                                    case 3:
                                        if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.top = verticalMargin;
                                            if (this.showAxisLabels) {
                                                if (Math.abs(Math.cos(targetAngle)) > unitRadialClosenessThreshold) {
                                                    targetMargin.left = horizontalMargin;
                                                }
                                            }
                                        }
                                        else if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.left = horizontalMargin;
                                            if ((this.showAxisLabels) //Add room to adjust if axis labels are present
                                                && ((Math.abs(Math.sin(targetAngle)) > unitRadialClosenessThreshold) //closer to horizontal and start Angle too close to horizontal
                                                    && ((endAngle - startAngle - Math.PI) < Tachometer.RadialClosenessThreshold))) {
                                                targetMargin.top = verticalMargin;
                                            }
                                        }
                                        break;
                                    case 4:
                                        if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                            if (Math.abs(Math.sin(endAngle - startAngle)) < unitRadialClosenessThreshold) {
                                                targetMargin.top = verticalMargin;
                                            }
                                        }
                                        else if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                            if (Math.abs(Math.sin(endAngle - startAngle)) > unitRadialClosenessThreshold) {
                                                targetMargin.top = verticalMargin;
                                            }
                                        }
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case 2:
                                switch (endQuadrant) {
                                    case 1:
                                        if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.right = horizontalMargin;
                                        }
                                        else if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.right = horizontalMargin;
                                        }
                                        break;
                                    case 2:
                                        if (cosAlpha < cosBeta) {
                                            targetMargin.right = horizontalMargin;
                                            if ((this.showAxisLabels) //Add room to adjust if axis labels are present
                                                && (Math.abs(Math.sin(targetAngle)) > unitRadialClosenessThreshold)) {
                                                targetMargin.top = verticalMargin;
                                            }
                                            if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                                targetMargin.bottom = verticalMargin;
                                            }
                                        }
                                        break;
                                    case 3:
                                        if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.right = horizontalMargin;
                                        }
                                        else if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.left = horizontalMargin;
                                        }
                                        if (Math.abs(Math.sin(targetAngle)) > unitRadialClosenessThreshold) {
                                            targetMargin.top = verticalMargin;
                                        }
                                        break;
                                    case 4:
                                        if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.right = horizontalMargin;
                                            if ((this.showAxisLabels) //Add room to adjust if axis labels are present
                                                && ((Math.abs(Math.sin(targetAngle)) > unitRadialClosenessThreshold) //closer to horizontal and end Angle too close to horizontal
                                                    && ((endAngle - startAngle - Math.PI) < Tachometer.RadialClosenessThreshold))) {
                                                targetMargin.top = verticalMargin;
                                            }
                                        }
                                        else if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.top = verticalMargin;
                                        }
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case 3:
                                switch (endQuadrant) {
                                    case 1:
                                        if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.bottom = verticalMargin;
                                            if ((this.showAxisLabels) //Add room to adjust if axis labels are present
                                                && ((Math.abs(Math.cos(targetAngle)) > unitRadialClosenessThreshold) //closer to vertical and end Angle too close to vertical
                                                    && ((endAngle - startAngle - Math.PI) < Tachometer.RadialClosenessThreshold))) {
                                                targetMargin.left = horizontalMargin;
                                            }
                                        }
                                        else if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.right = horizontalMargin;
                                        }
                                        break;
                                    case 2:
                                        if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.bottom = verticalMargin;
                                        }
                                        else if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.bottom = verticalMargin;
                                        }
                                        break;
                                    case 3:
                                        if (cosAlpha > cosBeta) {
                                            if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                                targetMargin.bottom = verticalMargin;
                                                if ((this.showAxisLabels) //Add room to adjust if axis labels are present
                                                    && (Math.abs(Math.cos(targetAngle)) > unitRadialClosenessThreshold)) {
                                                    targetMargin.right = horizontalMargin;
                                                }
                                            }
                                            if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                                targetMargin.left = horizontalMargin;
                                                if ((this.showAxisLabels) //Add room to adjust if axis labels are present
                                                    && (Math.abs(Math.sin(targetAngle)) > unitRadialClosenessThreshold)) {
                                                    targetMargin.top = verticalMargin;
                                                }
                                            }
                                        }
                                        break;
                                    case 4:
                                        if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.bottom = verticalMargin;
                                        }
                                        else if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.top = verticalMargin;
                                        }
                                        if ((this.showAxisLabels) //Add room to adjust if axis labels are present
                                            && (Math.abs(Math.cos(targetAngle)) > unitRadialClosenessThreshold)) {
                                            targetMargin.right = horizontalMargin;
                                        }
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case 4:
                                switch (endQuadrant) {
                                    case 1:
                                        if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.left = horizontalMargin;
                                        }
                                        if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.right = horizontalMargin;
                                        }
                                        if ((this.showAxisLabels) //Add room to adjust if axis labels are present
                                            && (Math.abs(Math.sin(targetAngle)) > unitRadialClosenessThreshold)) {
                                            targetMargin.bottom = verticalMargin;
                                        }
                                        break;
                                    case 2:
                                        if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.left = horizontalMargin;
                                            if ((this.showAxisLabels) //Add room to adjust if axis labels are present
                                                && ((Math.sin(targetAngle) > unitRadialClosenessThreshold) //closer to horiontal and end Angle too close to horizontal
                                                    && ((endAngle - startAngle - Math.PI) < Tachometer.RadialClosenessThreshold))) {
                                                targetMargin.bottom = verticalMargin;
                                            }
                                        }
                                        else if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.bottom = verticalMargin;
                                        }
                                        break;
                                    case 3:
                                        if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.left = horizontalMargin;
                                        }
                                        else if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                            targetMargin.left = horizontalMargin;
                                        }
                                        break;
                                    case 4:
                                        if (cosAlpha < cosBeta) {
                                            if (targetAngle - startAngle < Tachometer.RadialClosenessThreshold) {
                                                targetMargin.left = horizontalMargin;
                                            }
                                            else if (endAngle - targetAngle < Tachometer.RadialClosenessThreshold) {
                                                targetMargin.top = verticalMargin;
                                            }
                                            if (this.showAxisLabels) {
                                                if (Math.abs(Math.cos(targetAngle)) > unitRadialClosenessThreshold) {
                                                    targetMargin.right = horizontalMargin;
                                                }
                                                else if (Math.abs(Math.sin(targetAngle)) > unitRadialClosenessThreshold) {
                                                    targetMargin.bottom = verticalMargin;
                                                }
                                            }
                                        }
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            default:
                                break;
                        }
                        return targetMargin;
                    };
                    Tachometer.prototype.getLabelMargins = function (axisData) {
                        var labelMargin = this.getZeroMargin();
                        var dataLabels = axisData ? axisData.dataLabels : null;
                        if (dataLabels == null || !this.showAxisLabels) {
                            return labelMargin;
                        }
                        var labelFontSize = dataLabels.textHeight;
                        var labelFontLength = dataLabels.textWidth;
                        var startQuadrant = axisData.startQuadrant;
                        var endQuadrant = axisData.endQuadrant;
                        var cosAlpha = Math.abs(axisData.cosStartAngle);
                        var cosBeta = Math.abs(axisData.cosEndAngle);
                        var startAngle = axisData.startAngle;
                        var endAngle = axisData.endAngle;
                        switch (startQuadrant) {
                            case 1:
                                switch (endQuadrant) {
                                    case 1:
                                        if (cosAlpha > cosBeta) {
                                            if (endAngle > Tachometer.PiBy4) {
                                                //closer to the right
                                                labelMargin.right += labelFontLength;
                                            }
                                            else {
                                                labelMargin.right = Tachometer.UnitMargin;
                                            }
                                            if (startAngle < Tachometer.PiBy4) {
                                                //closer to the top
                                                labelMargin.top += labelFontSize;
                                            }
                                            else {
                                                labelMargin.top = Tachometer.UnitMargin;
                                            }
                                        }
                                        else {
                                            labelMargin.top += labelFontSize;
                                            labelMargin.bottom += labelFontSize;
                                            labelMargin.left += labelFontLength;
                                            labelMargin.right += labelFontLength;
                                        }
                                        break;
                                    case 2:
                                        labelMargin.right += labelFontLength;
                                        if (startAngle < Tachometer.PiBy4) {
                                            //closer to the top
                                            labelMargin.top += labelFontSize;
                                        }
                                        else {
                                            labelMargin.top = Tachometer.UnitMargin;
                                        }
                                        if (endAngle > Tachometer.ThreePiBy4) {
                                            //closer to the bottom
                                            labelMargin.bottom += labelFontSize;
                                        }
                                        else {
                                            labelMargin.bottom = Tachometer.UnitMargin;
                                        }
                                        break;
                                    case 3:
                                        labelMargin.right += labelFontLength;
                                        labelMargin.bottom += labelFontSize;
                                        if (startAngle < Tachometer.PiBy4) {
                                            //closer to the top
                                            labelMargin.top += labelFontSize;
                                        }
                                        else {
                                            labelMargin.top = Tachometer.UnitMargin;
                                        }
                                        if (endAngle > Tachometer.MinusThreePiBy4) {
                                            //closer to the left
                                            labelMargin.left += labelFontLength;
                                        }
                                        else {
                                            labelMargin.left = Tachometer.UnitMargin;
                                        }
                                        break;
                                    case 4:
                                        labelMargin.right += labelFontLength;
                                        labelMargin.bottom += labelFontSize;
                                        labelMargin.left += labelFontLength;
                                        if ((startAngle < Tachometer.PiBy4) || (endAngle > Tachometer.MinusPiBy4)) {
                                            //closer to the top
                                            labelMargin.top += labelFontSize;
                                        }
                                        else {
                                            labelMargin.top = Tachometer.UnitMargin;
                                        }
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case 2:
                                switch (endQuadrant) {
                                    case 1:
                                        labelMargin.bottom += labelFontSize;
                                        labelMargin.left += labelFontLength;
                                        labelMargin.top += labelFontSize;
                                        if ((startAngle < Tachometer.ThreePiBy4) || (endAngle > Tachometer.PiBy4)) {
                                            //closer to the right
                                            labelMargin.right += labelFontLength;
                                        }
                                        else {
                                            labelMargin.right = Tachometer.UnitMargin;
                                        }
                                        break;
                                    case 2:
                                        if (cosAlpha < cosBeta) {
                                            if (startAngle < Tachometer.ThreePiBy4) {
                                                //closer to the right
                                                labelMargin.right += labelFontLength;
                                            }
                                            else {
                                                labelMargin.right = Tachometer.UnitMargin;
                                            }
                                            if (endAngle > Tachometer.ThreePiBy4) {
                                                //closer to the bottom
                                                labelMargin.bottom += labelFontSize;
                                            }
                                            else {
                                                labelMargin.bottom = Tachometer.UnitMargin;
                                            }
                                        }
                                        else {
                                            labelMargin.top += labelFontSize;
                                            labelMargin.bottom += labelFontSize;
                                            labelMargin.left += labelFontLength;
                                            labelMargin.right += labelFontLength;
                                        }
                                        break;
                                    case 3:
                                        labelMargin.bottom += labelFontSize;
                                        if (startAngle < Tachometer.ThreePiBy4) {
                                            //closer to the right
                                            labelMargin.right += labelFontLength;
                                        }
                                        else {
                                            labelMargin.right = Tachometer.UnitMargin;
                                        }
                                        if (endAngle > Tachometer.MinusThreePiBy4) {
                                            //closer to the left
                                            labelMargin.left += labelFontLength;
                                        }
                                        else {
                                            labelMargin.left = Tachometer.UnitMargin;
                                        }
                                        break;
                                    case 4:
                                        labelMargin.bottom += labelFontSize;
                                        labelMargin.left += labelFontLength;
                                        if (endAngle > Tachometer.MinusPiBy4) {
                                            //closer to the top
                                            labelMargin.top += labelFontSize;
                                        }
                                        else {
                                            labelMargin.top = Tachometer.UnitMargin;
                                        }
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case 3:
                                switch (endQuadrant) {
                                    case 1:
                                        labelMargin.left += labelFontLength;
                                        labelMargin.top += labelFontSize;
                                        if (endAngle > Tachometer.PiBy4) {
                                            //closer to the right
                                            labelMargin.right += labelFontLength;
                                        }
                                        else {
                                            labelMargin.right = Tachometer.UnitMargin;
                                        }
                                        if (startAngle < Tachometer.MinusThreePiBy4) {
                                            //closer to the bottom
                                            labelMargin.bottom += labelFontSize;
                                        }
                                        else {
                                            labelMargin.bottom = Tachometer.UnitMargin;
                                        }
                                        break;
                                    case 2:
                                        labelMargin.left += labelFontLength;
                                        labelMargin.top += labelFontSize;
                                        labelMargin.right += labelFontLength;
                                        if ((startAngle < Tachometer.MinusThreePiBy4) || (endAngle > Tachometer.ThreePiBy4)) {
                                            //closer to the bottom
                                            labelMargin.bottom += labelFontSize;
                                        }
                                        else {
                                            labelMargin.bottom = Tachometer.UnitMargin;
                                        }
                                        break;
                                    case 3:
                                        if (cosAlpha > cosBeta) {
                                            if (startAngle < Tachometer.MinusThreePiBy4) {
                                                //closer to the bottom
                                                labelMargin.bottom += labelFontSize;
                                            }
                                            else {
                                                labelMargin.bottom = Tachometer.UnitMargin;
                                            }
                                            if (endAngle > Tachometer.MinusThreePiBy4) {
                                                //closer to the left
                                                labelMargin.left += labelFontLength;
                                            }
                                            else {
                                                labelMargin.left = Tachometer.UnitMargin;
                                            }
                                        }
                                        else {
                                            labelMargin.top += labelFontSize;
                                            labelMargin.bottom += labelFontSize;
                                            labelMargin.left += labelFontLength;
                                            labelMargin.right += labelFontLength;
                                        }
                                        break;
                                    case 4:
                                        labelMargin.left += labelFontLength;
                                        if (startAngle < Tachometer.MinusThreePiBy4) {
                                            //closer to the bottom
                                            labelMargin.bottom += labelFontSize;
                                        }
                                        else {
                                            labelMargin.bottom = Tachometer.UnitMargin;
                                        }
                                        if (endAngle > Tachometer.MinusPiBy4) {
                                            //closer to the rop
                                            labelMargin.top += labelFontSize;
                                        }
                                        else {
                                            labelMargin.top = Tachometer.UnitMargin;
                                        }
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case 4:
                                switch (endQuadrant) {
                                    case 1:
                                        labelMargin.top += labelFontSize;
                                        if (startAngle < Tachometer.MinusPiBy4) {
                                            //closer to the left
                                            labelMargin.left += labelFontLength;
                                        }
                                        else {
                                            labelMargin.left = Tachometer.UnitMargin;
                                        }
                                        if (endAngle > Tachometer.PiBy4) {
                                            //closer to the right
                                            labelMargin.right += labelFontLength;
                                        }
                                        else {
                                            labelMargin.right = Tachometer.UnitMargin;
                                        }
                                        break;
                                    case 2:
                                        labelMargin.top += labelFontSize;
                                        labelMargin.right += labelFontLength;
                                        if (startAngle < Tachometer.MinusPiBy4) {
                                            //closer to the left
                                            labelMargin.left += labelFontLength;
                                        }
                                        else {
                                            labelMargin.left = Tachometer.UnitMargin;
                                        }
                                        if (endAngle > Tachometer.ThreePiBy4) {
                                            //closer to the bottom
                                            labelMargin.bottom += labelFontSize;
                                        }
                                        else {
                                            labelMargin.bottom = Tachometer.UnitMargin;
                                        }
                                        break;
                                    case 3:
                                        labelMargin.top += labelFontSize;
                                        labelMargin.right += labelFontLength;
                                        labelMargin.bottom += labelFontSize;
                                        if (startAngle < Tachometer.MinusPiBy4) {
                                            //closer to the left
                                            labelMargin.left += labelFontLength;
                                        }
                                        else {
                                            labelMargin.left = Tachometer.UnitMargin;
                                        }
                                        break;
                                    case 4:
                                        if (cosAlpha < cosBeta) {
                                            if (startAngle < Tachometer.MinusPiBy4) {
                                                //closer to the left
                                                labelMargin.left += labelFontLength;
                                            }
                                            else {
                                                labelMargin.left = Tachometer.UnitMargin;
                                            }
                                            if (endAngle > Tachometer.MinusPiBy4) {
                                                //closer to the top
                                                labelMargin.top += labelFontSize;
                                            }
                                            else {
                                                labelMargin.top = Tachometer.UnitMargin;
                                            }
                                        }
                                        else {
                                            labelMargin.top += labelFontSize;
                                            labelMargin.bottom += labelFontSize;
                                            labelMargin.left += labelFontLength;
                                            labelMargin.right += labelFontLength;
                                        }
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            default:
                                break;
                        }
                        return labelMargin;
                    };
                    Tachometer.prototype.setClosestMargin = function (targetMargin, angle, verticalMargin, horizontalMargin) {
                        var cosAngle = Math.cos(angle);
                        var sinAngle = Math.sin(angle);
                        if (sinAngle >= 0) {
                            if (cosAngle >= 0) {
                                if (Math.abs(cosAngle) < Tachometer.CloseToLeftOrRightThreshold) {
                                    targetMargin.right = horizontalMargin;
                                }
                                if (Math.abs(cosAngle) > Tachometer.CloseToTopOrBottomThreshold) {
                                    targetMargin.top = verticalMargin;
                                }
                            }
                            else {
                                if (Math.abs(cosAngle) < Tachometer.CloseToLeftOrRightThreshold) {
                                    targetMargin.right = horizontalMargin;
                                }
                                if (Math.abs(cosAngle) > Tachometer.CloseToTopOrBottomThreshold) {
                                    targetMargin.bottom = verticalMargin;
                                }
                            }
                        }
                        else {
                            if (cosAngle >= 0) {
                                if (Math.abs(cosAngle) < Tachometer.CloseToLeftOrRightThreshold) {
                                    targetMargin.left = horizontalMargin;
                                }
                                if (Math.abs(cosAngle) > Tachometer.CloseToTopOrBottomThreshold) {
                                    targetMargin.top = verticalMargin;
                                }
                            }
                            else {
                                if (Math.abs(cosAngle) < Tachometer.CloseToLeftOrRightThreshold) {
                                    targetMargin.left = horizontalMargin;
                                }
                                if (Math.abs(cosAngle) > Tachometer.CloseToTopOrBottomThreshold) {
                                    targetMargin.bottom = verticalMargin;
                                }
                            }
                        }
                        return targetMargin;
                    };
                    Tachometer.prototype.getAvailebleWidth = function (viewport, margins) {
                        return viewport.width
                            - margins.mainMargin.left - margins.mainMargin.right
                            - Math.max(margins.targetMargin.right, margins.labelMargin.right)
                            - Math.max(margins.targetMargin.left, margins.labelMargin.left);
                    };
                    //Convert the percent value of offset into a pixel value 
                    Tachometer.translateUserYOffset = function (baseYOffset, callout, height, padding) {
                        var yOffsetPercent = callout.offset.y;
                        if (yOffsetPercent !== 0) {
                            var topThreshold = padding;
                            var bottomThreshold = height - callout.textHeight - padding;
                            var userYOffset = yOffsetPercent / 100 * baseYOffset;
                            var offset = userYOffset + baseYOffset;
                            return offset < topThreshold
                                ? topThreshold - baseYOffset //goinig too high
                                : offset > bottomThreshold
                                    ? bottomThreshold - baseYOffset //going too low
                                    : userYOffset;
                        }
                        else {
                            return 0;
                        }
                    };
                    Tachometer.prototype.getAvailebleHeight = function (viewport, margins, calloutValueSpace, calloutPercentSpace) {
                        return viewport.height
                            - margins.mainMargin.top - margins.mainMargin.bottom
                            - margins.labelMargin.top - margins.labelMargin.bottom
                            - margins.targetMargin.top - margins.targetMargin.bottom
                            - calloutValueSpace
                            - calloutPercentSpace;
                    };
                    /*
                    * Get arcRadius and translation Data depending on start angle, endAngle of the arc and the height and
                    * width of the frame in which to draw the arc.
                    * Assumptions:
                    * 1. Arc is drawn clockwise from startAngle to endAngle and should be centered in the frame.
                    * 2. startAngle and endAngle are in radians and can be positive or negative.
                    * 3. startAngle and endAngle canbe negative infinity to positive infinity.
                    * 4. startAngle can be larger or smaller or equal to endAngle.
                    */
                    Tachometer.prototype.calculateGaugeTranslation = function (axisData, startAngle, endAngle, height, width) {
                        var radius;
                        var startQuadrant = axisData.startQuadrant;
                        var endQuadrant = axisData.endQuadrant;
                        var xOffset; //translation along x axis
                        var yOffset; //translation along y axis
                        var arcHeight; //height of the arc along y axis
                        var arcWidth; //width of the arc along x axis
                        var calloutyOffset; //Y offset of callout
                        var sinAlpha = Math.abs(axisData.sinStartAngle);
                        var sinBeta = Math.abs(axisData.sinEndAngle);
                        var cosAlpha = Math.abs(axisData.cosStartAngle);
                        var cosBeta = Math.abs(axisData.cosEndAngle);
                        switch (startQuadrant) {
                            case 1:
                                switch (endQuadrant) {
                                    case 1:
                                        if (cosAlpha > cosBeta) {
                                            radius = Math.min(width / sinBeta, height / cosAlpha);
                                            arcHeight = radius * cosAlpha;
                                            arcWidth = radius * sinBeta;
                                            xOffset = width > arcWidth ? (width - arcWidth) / 2 : 0;
                                            yOffset = height > arcHeight ? (height + arcHeight) / 2 : height;
                                            calloutyOffset = yOffset;
                                        }
                                        else {
                                            radius = Math.min(width / 2, height / 2);
                                            xOffset = width / 2;
                                            yOffset = height / 2;
                                            calloutyOffset = yOffset + radius;
                                        }
                                        break;
                                    case 2:
                                        radius = Math.min(width, height / (cosAlpha + cosBeta));
                                        xOffset = width > radius ? (width - radius) / 2 : 0;
                                        arcHeight = radius * (cosAlpha + cosBeta);
                                        yOffset = height > arcHeight ?
                                            (height - arcHeight) / 2 + radius * cosAlpha
                                            : radius * cosAlpha;
                                        calloutyOffset = yOffset + radius * cosBeta;
                                        break;
                                    case 3:
                                        radius = Math.min(width / (1 + sinBeta), height / (1 + cosAlpha));
                                        arcHeight = radius + radius * cosAlpha;
                                        arcWidth = radius + radius * sinBeta;
                                        xOffset = width > arcWidth ? (width + arcWidth) / 2 - radius : width - radius;
                                        yOffset = height > arcHeight ? (height + arcHeight) / 2 - radius : height - radius;
                                        calloutyOffset = yOffset + radius;
                                        break;
                                    case 4:
                                        var max = Math.max(cosAlpha, cosBeta);
                                        radius = Math.min(width / 2, height / (1 + max));
                                        xOffset = width / 2;
                                        arcHeight = radius + radius * max;
                                        yOffset = height > arcHeight ? (height + arcHeight) / 2 - radius : height - radius;
                                        calloutyOffset = yOffset + radius;
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case 2:
                                switch (endQuadrant) {
                                    case 1:
                                        var max = Math.max(sinAlpha, sinBeta);
                                        radius = Math.min(width / (1 + max), height / 2);
                                        arcWidth = radius + radius * max;
                                        xOffset = width > arcWidth ? (width - arcWidth) / 2 + radius : radius;
                                        yOffset = height / 2;
                                        calloutyOffset = yOffset + radius;
                                        break;
                                    case 2:
                                        if (cosAlpha < cosBeta) {
                                            radius = Math.min(width / sinAlpha, height / cosBeta);
                                            arcHeight = radius * cosBeta;
                                            arcWidth = radius * sinAlpha;
                                            xOffset = width > arcWidth ? (width - arcWidth) / 2 : 0;
                                            yOffset = height > arcHeight ? (height - arcHeight) / 2 : 0;
                                            calloutyOffset = yOffset + radius * cosBeta;
                                        }
                                        else {
                                            radius = Math.min(width / 2, height / 2);
                                            xOffset = width / 2;
                                            yOffset = height / 2;
                                            calloutyOffset = yOffset + radius;
                                        }
                                        break;
                                    case 3:
                                        var widthFator = sinAlpha + sinBeta;
                                        radius = Math.min(width / widthFator, height);
                                        arcHeight = radius;
                                        arcWidth = radius * widthFator;
                                        xOffset = width > arcWidth ? (width + arcWidth) / 2 - radius * sinAlpha : width - radius * sinAlpha;
                                        yOffset = height > arcHeight ? (height - arcHeight) / 2 : 0;
                                        calloutyOffset = yOffset + radius;
                                        break;
                                    case 4:
                                        radius = Math.min(width / (1 + sinAlpha), height / (1 + cosBeta));
                                        arcHeight = radius * (1 + cosBeta);
                                        arcWidth = radius * (1 + sinBeta);
                                        xOffset = width > arcWidth ? (width - arcWidth) / 2 + radius : radius;
                                        yOffset = height > arcHeight ? (height + arcHeight) / 2 - radius : height - radius;
                                        calloutyOffset = yOffset + radius;
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case 3:
                                switch (endQuadrant) {
                                    case 1:
                                        radius = Math.min(width / (1 + sinBeta), height / (1 + cosAlpha));
                                        arcHeight = radius + radius * cosAlpha;
                                        arcWidth = radius + radius * sinBeta;
                                        xOffset = width > arcWidth ? (width - arcWidth) / 2 + radius : radius;
                                        yOffset = height > arcHeight ? (height - arcHeight) / 2 + radius : radius;
                                        calloutyOffset = yOffset + radius * cosAlpha;
                                        break;
                                    case 2:
                                        radius = Math.min(width / 2, height / (1 + cosAlpha), height / (1 + cosBeta));
                                        xOffset = width / 2;
                                        arcHeight = radius + Math.max(radius * cosAlpha, radius * cosBeta);
                                        yOffset = height > arcHeight ? (height - arcHeight) / 2 + radius : radius;
                                        calloutyOffset = yOffset + radius * Math.max(cosAlpha, cosBeta);
                                        break;
                                    case 3:
                                        if (cosAlpha > cosBeta) {
                                            radius = Math.min(width / sinBeta, height / cosAlpha);
                                            arcHeight = radius * cosAlpha;
                                            arcWidth = radius * sinBeta;
                                            xOffset = width > arcWidth ? (width + arcWidth) / 2 : width;
                                            yOffset = height > arcHeight ? (height - arcHeight) / 2 : 0;
                                            calloutyOffset = yOffset + radius * cosAlpha;
                                        }
                                        else {
                                            radius = Math.min(width / 2, height / 2);
                                            xOffset = width / 2;
                                            yOffset = height / 2;
                                            calloutyOffset = yOffset + radius;
                                        }
                                        break;
                                    case 4:
                                        radius = Math.min(width, height / (cosAlpha + cosBeta));
                                        arcHeight = radius * cosAlpha + radius * cosBeta;
                                        arcWidth = radius;
                                        xOffset = width > arcWidth ? (width + arcWidth) / 2 : width;
                                        yOffset = height > arcHeight ? (height - arcHeight) / 2 + radius * cosBeta : radius * cosBeta;
                                        calloutyOffset = yOffset + radius * cosAlpha;
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            case 4:
                                switch (endQuadrant) {
                                    case 1:
                                        radius = Math.min(width / (sinAlpha + sinBeta), height);
                                        arcHeight = radius;
                                        arcWidth = radius * (sinAlpha + sinBeta);
                                        xOffset = width > arcWidth ? (width - arcWidth) / 2 + radius * sinAlpha : radius * sinAlpha;
                                        yOffset = height > arcHeight ? (height + arcHeight) / 2 : height;
                                        calloutyOffset = yOffset;
                                        break;
                                    case 2:
                                        radius = Math.min(width / (1 + sinAlpha), height / (1 + cosBeta));
                                        arcHeight = radius + radius * cosBeta;
                                        arcWidth = radius + radius * sinAlpha;
                                        xOffset = width > arcWidth ? (width + arcWidth) / 2 - radius : width - radius;
                                        yOffset = height > arcHeight ? (height - arcHeight) / 2 + radius : radius;
                                        calloutyOffset = yOffset + radius * cosBeta;
                                        break;
                                    case 3:
                                        radius = Math.min(width / (1 + Math.max(sinAlpha, sinBeta)), height / 2);
                                        arcWidth = radius + Math.max(radius * sinAlpha, radius * sinBeta);
                                        xOffset = width > arcWidth ? (width + arcWidth) / 2 - radius : width - radius;
                                        yOffset = height / 2;
                                        calloutyOffset = yOffset + radius;
                                        break;
                                    case 4:
                                        if (cosAlpha < cosBeta) {
                                            radius = Math.min(width / sinAlpha, height / cosBeta);
                                            arcHeight = radius * cosBeta;
                                            arcWidth = radius * sinAlpha;
                                            xOffset = width > arcWidth ? (width + arcWidth) / 2 : width;
                                            yOffset = height > arcHeight ? (height + arcHeight) / 2 : height;
                                            calloutyOffset = yOffset;
                                        }
                                        else {
                                            radius = Math.min(width / 2, height / 2);
                                            xOffset = width / 2;
                                            yOffset = height / 2;
                                            calloutyOffset = yOffset + radius;
                                        }
                                        break;
                                    default:
                                        break;
                                }
                                break;
                            default:
                                break;
                        }
                        return {
                            radius: radius,
                            startAngle: startAngle,
                            endAngle: endAngle,
                            xOffset: xOffset,
                            yOffset: yOffset,
                            calloutxOffset: width / 2,
                            calloutyOffset: calloutyOffset
                        };
                    };
                    Tachometer.prototype.completeAxis = function (axisData, translation) {
                        var radius = translation.radius;
                        //TODO Convert ranges to an array in view model
                        var range1 = axisData.range1;
                        var range2 = axisData.range2;
                        var range3 = axisData.range3;
                        var currentStart = axisData.startValue;
                        var currentEnd = axisData.endValue;
                        var boarders = [
                            currentStart,
                            range2.startValue,
                            range3.startValue,
                            currentEnd
                        ];
                        var currVal = currentEnd;
                        for (var index = boarders.length - 1; index > 0; index--) {
                            if (boarders[index] === Tachometer.UnintializedRangeStartValue) {
                                boarders[index] = currVal;
                            }
                            else {
                                currVal = boarders[index];
                            }
                        }
                        range1.startValue = boarders[0];
                        range1.endValue = range2.startValue = boarders[1];
                        range2.endValue = range3.startValue = boarders[2];
                        range3.endValue = boarders[3];
                        axisData.range1 = this.completeAxisRange(axisData.range1, radius);
                        axisData.range2 = this.completeAxisRange(axisData.range2, radius);
                        axisData.range3 = this.completeAxisRange(axisData.range3, radius);
                        axisData.radius = radius;
                        axisData.axisLabelRadius = radius + this.gaugeStyle.labels.padding;
                        var xOffset = translation.xOffset;
                        var yOffset = translation.yOffset;
                        axisData.offset.x = xOffset;
                        axisData.offset.y = yOffset;
                        axisData.transformString = SVGUtil.translate(xOffset, yOffset);
                        axisData.indicator = this.completeIndicator(axisData.indicator, translation, axisData.offset, axisData.value);
                        axisData.target = this.completeTarget(axisData.target, axisData);
                        return axisData;
                    };
                    Tachometer.prototype.completeCallout = function (callout, translation) {
                        callout.baseOffset.x = translation.calloutxOffset;
                        callout.baseOffset.y = translation.calloutyOffset;
                        return callout;
                    };
                    Tachometer.prototype.updateVisualComponents = function (viewModel) {
                        var transformString = viewModel.axis.transformString;
                        var range = viewModel.axis.range1;
                        var range1Arc = this.range1Arc;
                        range1Arc
                            .innerRadius(range.innerRadius)
                            .outerRadius(range.radius)
                            .startAngle(range.startAngle)
                            .endAngle(range.endAngle);
                        this.range1ArcPath
                            .attr('d', range1Arc)
                            .attr('transform', transformString)
                            .style('fill', range.rangeColor);
                        ;
                        var range = viewModel.axis.range2;
                        var range2Arc = this.range2Arc;
                        range2Arc
                            .innerRadius(range.innerRadius)
                            .outerRadius(range.radius)
                            .startAngle(range.startAngle)
                            .endAngle(range.endAngle);
                        this.range2ArcPath
                            .attr('transform', transformString)
                            .attr('d', range2Arc)
                            .style('fill', range.rangeColor);
                        var range = viewModel.axis.range3;
                        var range3Arc = this.range3Arc;
                        range3Arc
                            .innerRadius(range.innerRadius)
                            .outerRadius(range.radius)
                            .startAngle(range.startAngle)
                            .endAngle(range.endAngle);
                        this.range3ArcPath
                            .attr('d', range3Arc)
                            .attr('transform', transformString)
                            .style('fill', range.rangeColor);
                        var indicator = viewModel.axis.indicator;
                        this.needle
                            .attr('d', Tachometer.LineFunction(indicator.needlePoints))
                            .attr('transform', indicator.needletransformString)
                            .style('stroke', indicator.pointerColor);
                        var centerArc = this.centerArc;
                        centerArc
                            .innerRadius(indicator.baseInnerRadius)
                            .outerRadius(indicator.baseRadius)
                            .startAngle(indicator.baseStartAngle)
                            .endAngle(indicator.baseEndtAngle);
                        this.centerArcPath
                            .attr('d', centerArc)
                            .attr('transform', transformString)
                            .style('fill', indicator.baseColor);
                    };
                    Tachometer.prototype.updateCallout = function (viewModel) {
                        var callout = viewModel.callout;
                        var calloutValue = callout.calloutValue;
                        var calloutPercent = callout.calloutPercent;
                        var yOffsetBase = callout.baseOffset.y;
                        var xOffsetBase = callout.baseOffset.x;
                        if (this.showCalloutValue) {
                            var value = calloutValue.formattedValue;
                            var userYOffset = Tachometer.translateUserYOffset(yOffsetBase, calloutValue, viewModel.viewportHeight, this.gaugeStyle.callout.padding);
                            var userXOffset = Tachometer.translateUserXOffset(xOffsetBase, calloutValue, viewModel.viewportWidth, calloutValue.textWidth, this.gaugeStyle.callout.padding);
                            this.calloutRectangle = {
                                left: xOffsetBase + userXOffset - calloutValue.textWidth / 2,
                                top: yOffsetBase + userYOffset,
                                right: xOffsetBase + userXOffset + calloutValue.textWidth / 2,
                                bottom: yOffsetBase + userYOffset + calloutValue.textHeight,
                            };
                            if (this.isWithinBounds(this.calloutRectangle)) {
                                this.calloutLabel
                                    .attr('transform', SVGUtil.translate(xOffsetBase + userXOffset, this.calloutRectangle.bottom))
                                    .style({
                                    'fill': calloutValue.labelColor,
                                    'text-anchor': 'middle',
                                    'font-size': calloutValue.fontSizePx,
                                    'display': '',
                                })
                                    .text(value);
                                yOffsetBase = yOffsetBase + calloutValue.textHeight + this.gaugeStyle.callout.padding;
                                //Set Base for CalloutPercent
                                if (userYOffset < 0) {
                                    yOffsetBase = Math.max(yOffsetBase + userYOffset, callout.baseOffset.y);
                                }
                            }
                            else {
                                this.calloutLabel
                                    .style({
                                    'display': 'none',
                                });
                                this.calloutRectangle = null;
                            }
                        }
                        else {
                            this.calloutLabel
                                .style({
                                'display': 'none',
                            });
                            this.calloutRectangle = null;
                        }
                        if (this.showCalloutPercent) {
                            var value = calloutPercent.formattedValue;
                            var userYOffset = Tachometer.translateUserYOffset(yOffsetBase, calloutPercent, viewModel.viewportHeight, this.gaugeStyle.callout.padding);
                            var userXOffset = Tachometer.translateUserXOffset(xOffsetBase, calloutPercent, viewModel.viewportWidth, calloutPercent.textWidth, this.gaugeStyle.callout.padding);
                            this.calloutPercentRectangle = {
                                left: xOffsetBase + userXOffset - calloutPercent.textWidth / 2,
                                top: yOffsetBase + userYOffset,
                                right: xOffsetBase + userXOffset + calloutPercent.textWidth / 2,
                                bottom: yOffsetBase + userYOffset + calloutPercent.textHeight,
                            };
                            if (this.isOverlapping(this.calloutRectangle, this.calloutPercentRectangle) || !this.isWithinBounds(this.calloutPercentRectangle)) {
                                this.calloutPercent.style({ 'display': 'none' });
                            }
                            else {
                                this.calloutPercent
                                    .attr('transform', SVGUtil.translate(xOffsetBase + userXOffset, this.calloutPercentRectangle.bottom))
                                    .style({
                                    'fill': calloutPercent.labelColor,
                                    'text-anchor': 'middle',
                                    'font-size': calloutPercent.fontSizePx,
                                    'display': '',
                                })
                                    .text(value);
                            }
                        }
                        else {
                            this.calloutPercent.style({ 'display': 'none' });
                            this.calloutPercentRectangle = null;
                        }
                    };
                    Tachometer.prototype.createAxisLabels = function () {
                        if (this.showAxisLabels) {
                            if (this.axisData.dataLabels.round) {
                                return this.createNiceRoundLabels();
                            }
                            else {
                                return this.createEquallySpacedLabels();
                            }
                        }
                        var axisLabels = [];
                        return axisLabels;
                    };
                    Tachometer.prototype.updateAxisLabelText = function (axis, axisLabels) {
                        this.svg.selectAll(Tachometer.LabelText.selector).remove();
                        if (!this.showAxisLabels)
                            return;
                        var axisLabels = this.axisLabels;
                        var labelColor = axis.dataLabels.labelColor;
                        var ticCount = axisLabels.length;
                        var fontSizePx = axis.dataLabels.fontSizePx;
                        if (this.showAxisLabels) {
                            for (var count = 0; count < ticCount; count++) {
                                var axisLabel = axisLabels[count];
                                var text = this.axisLabelsGraphicsContext
                                    .append('text')
                                    .attr({
                                    'x': axisLabel.xOffset,
                                    'y': axisLabel.yOffset,
                                    'dy': 0,
                                    'class': Tachometer.LabelText.class
                                })
                                    .style({
                                    'fill': labelColor,
                                    'text-anchor': axisLabel.anchor,
                                    'font-size': fontSizePx
                                })
                                    .text(axisLabel.displayValue)
                                    .append('title').text(axisLabel.displayValue);
                                this.truncateTextIfNeeded(text, axisLabel.xOffset, axisLabel.anchor === 'start');
                                axisLabel.graphicsElement = text;
                            }
                        }
                    };
                    Tachometer.prototype.updateTarget = function (viewModel) {
                        var target = viewModel.axis.target;
                        if ((target.show) && (target.value !== Tachometer.UnintializedStartValue)) {
                            this.updateTargeIndicator(target);
                            if (this.showTargetLabel) {
                                this.updateTargetText(viewModel, this.axisLabels);
                            }
                            else {
                                this.removeTargetElements(false);
                            }
                        }
                        else {
                            this.removeTargetElements(true);
                        }
                    };
                    Tachometer.prototype.resetTachometerData = function () {
                        var axisData = this.axisData;
                        axisData.startValue = Tachometer.UnintializedStartValue;
                        axisData.endValue = Tachometer.UnintializedEndValue;
                        axisData.value = 0;
                        axisData.tooltipInfo = [];
                        axisData.valueRange = 0;
                        axisData.range1.startValue = Tachometer.UnintializedRangeStartValue;
                        axisData.range1.endValue = Tachometer.UnintializedEndValue;
                        axisData.range2.startValue = Tachometer.UnintializedRangeStartValue;
                        axisData.range2.endValue = Tachometer.UnintializedEndValue;
                        axisData.range3.startValue = Tachometer.UnintializedRangeStartValue;
                        axisData.range3.endValue = Tachometer.UnintializedEndValue;
                        axisData.target.value = Tachometer.UnintializedStartValue;
                        axisData.target.innerRadiusRatio = Tachometer.UninitializedRatio;
                        return axisData;
                    };
                    Tachometer.prototype.transformTachometerDataRoles = function (dataView, axisData) {
                        if (dataView && dataView.categorical && dataView.categorical.values && dataView.metadata && dataView.metadata.columns) {
                            var values = dataView.categorical.values;
                            for (var i = 0; i < values.length; i++) {
                                var col = values[i].source;
                                var value = values[i].values[0];
                                if (col && col.roles) {
                                    if (col.roles[Tachometer.RoleNames.y]) {
                                        if (value === undefined || isNaN(Number(value)))
                                            axisData.value = Tachometer.UnintializedStartValue;
                                        else {
                                            axisData.value = value;
                                            axisData.tooltipInfo.push({ displayName: Tachometer.RoleNames.y, value: value.toString() });
                                        }
                                    }
                                    else if (col.roles[Tachometer.RoleNames.startValue]) {
                                        if (value === undefined || isNaN(Number(value)))
                                            axisData.startValue = Tachometer.UnintializedStartValue;
                                        else {
                                            axisData.startValue = value;
                                            axisData.tooltipInfo.push({ displayName: Tachometer.RoleNames.startValue, value: value.toString() });
                                        }
                                    }
                                    else if (col.roles[Tachometer.RoleNames.endValue]) {
                                        if (value === undefined || isNaN(Number(value)))
                                            axisData.endValue = Tachometer.UnintializedEndValue;
                                        else {
                                            axisData.endValue = value;
                                            axisData.tooltipInfo.push({ displayName: Tachometer.RoleNames.endValue, value: value.toString() });
                                        }
                                    }
                                    else if (col.roles[Tachometer.RoleNames.targetValue]) {
                                        if (value === undefined || isNaN(Number(value)))
                                            axisData.target.value = Tachometer.UnintializedStartValue;
                                        else {
                                            axisData.target.value = value;
                                            axisData.tooltipInfo.push({ displayName: Tachometer.RoleNames.targetValue, value: value.toString() });
                                        }
                                    }
                                    else if (col.roles[Tachometer.RoleNames.range2StartValue]) {
                                        if (value === undefined || isNaN(Number(value)))
                                            axisData.range2.startValue = Tachometer.UnintializedStartValue;
                                        else {
                                            axisData.range2.startValue = value;
                                            axisData.tooltipInfo.push({ displayName: Tachometer.RoleNames.range2StartValue, value: value.toString() });
                                        }
                                    }
                                    else if (col.roles[Tachometer.RoleNames.range3StartValue]) {
                                        if (value === undefined || isNaN(Number(value)))
                                            axisData.range3.startValue = Tachometer.UnintializedStartValue;
                                        else {
                                            axisData.range3.startValue = value;
                                            axisData.tooltipInfo.push({ displayName: Tachometer.RoleNames.range3StartValue, value: value.toString() });
                                        }
                                    }
                                }
                            }
                        }
                        return axisData;
                    };
                    Tachometer.prototype.transformTachometerSettings = function (dataView, axisData) {
                        axisData = Tachometer.transformGaugeAxisSettings(dataView, axisData);
                        axisData.range1 = Tachometer.transformRangeSettings(dataView, 'range1', axisData.range1, Tachometer.DefaultRange1Color);
                        axisData.range2 = Tachometer.transformRangeSettings(dataView, 'range2', axisData.range2, Tachometer.DefaultRange2Color);
                        axisData.range3 = Tachometer.transformRangeSettings(dataView, 'range3', axisData.range3, Tachometer.DefaultRange3Color);
                        axisData.dataLabels = Tachometer.transformDataLabelSettings(dataView, 'labels', Tachometer.getDefaultTachometerLabelSettings());
                        var dataLabels = axisData.dataLabels;
                        if (dataLabels.show) {
                            var value = Math.max(Math.abs(axisData.startValue), Math.abs(axisData.endValue));
                            var formatter = this.getFormatter(dataLabels.displayUnits, dataLabels.precision, value);
                            var formattedValue = formatter.format(value);
                            dataLabels.textWidth = Tachometer.getTextWidth(dataLabels.fontSizePx, formattedValue);
                        }
                        axisData.target = this.transformTargetSettings(dataView, axisData.target, axisData.dataLabels);
                        axisData.indicator = Tachometer.transformIndicatorSettings(dataView, axisData.indicator);
                        return axisData;
                    };
                    Tachometer.transformDataLabelSettings = function (dataView, objectName, dataLabelsSettings) {
                        var objects = dataView && dataView.metadata ? dataView.metadata.objects : null;
                        var labelsObj = objects ? objects[objectName] : null;
                        var haslabelObject = (objects != null && labelsObj != null);
                        if (haslabelObject) {
                            if (labelsObj.show !== undefined) {
                                dataLabelsSettings.show = labelsObj.show;
                            }
                            if (labelsObj.color !== undefined) {
                                dataLabelsSettings.labelColor = labelsObj.color.solid.color;
                            }
                            if (labelsObj.labelDisplayUnits !== undefined) {
                                dataLabelsSettings.displayUnits = labelsObj.labelDisplayUnits;
                            }
                            if (labelsObj.labelPrecision !== undefined) {
                                dataLabelsSettings.precision = (labelsObj.labelPrecision >= 0) ? labelsObj.labelPrecision : dataLabelUtils.defaultLabelPrecision;
                            }
                            if (labelsObj.fontSize !== undefined) {
                                dataLabelsSettings.fontSize = labelsObj.fontSize;
                                dataLabelsSettings.fontSizePx = PixelConverter.fromPoint(labelsObj.fontSize);
                                dataLabelsSettings.textHeight = PixelConverter.fromPointToPixel(labelsObj.fontSize);
                            }
                            if (labelsObj.count != null && labelsObj.count !== undefined) {
                                dataLabelsSettings.count = labelsObj.count;
                            }
                            else {
                                dataLabelsSettings.count = Tachometer.DefaultLabelCount;
                            }
                            if (labelsObj.round != null && labelsObj.round !== undefined) {
                                dataLabelsSettings.round = labelsObj.round;
                            }
                            if (labelsObj.reduce != null && labelsObj.reduce !== undefined) {
                                dataLabelsSettings.reduce = labelsObj.reduce;
                            }
                            if (labelsObj.xOffset != null && labelsObj.xOffset !== undefined) {
                                dataLabelsSettings.offset.x = Tachometer.clamp(labelsObj.xOffset, -100, 100);
                            }
                            else if (dataLabelsSettings.offset) {
                                dataLabelsSettings.offset.x = 0;
                            }
                            if (labelsObj.yOffset != null && labelsObj.yOffset !== undefined) {
                                dataLabelsSettings.offset.y = Tachometer.clamp(-labelsObj.yOffset, -100, 100); //switching direction for intutive user experience of +ve up
                            }
                            else if (dataLabelsSettings.offset) {
                                dataLabelsSettings.offset.y = 0;
                            }
                            if (labelsObj.invert != null && labelsObj.invert !== undefined) {
                                dataLabelsSettings.invert = labelsObj.invert;
                            }
                        }
                        else {
                            dataLabelsSettings.count = Tachometer.DefaultLabelCount;
                            if (dataLabelsSettings.offset) {
                                dataLabelsSettings.offset.x = 0;
                                dataLabelsSettings.offset.y = 0;
                            }
                        }
                        return dataLabelsSettings;
                    };
                    Tachometer.getDefaultTachometerCalloutSettings = function () {
                        var dataLabelSettings = {
                            show: true,
                            fontSizePx: PixelConverter.fromPoint(Tachometer.DefaultCalloutFontSizeInPt),
                            labelColor: null,
                            displayUnits: 0,
                            precision: dataLabelUtils.defaultLabelPrecision,
                            fontSize: Tachometer.DefaultCalloutFontSizeInPt,
                            offset: { x: undefined, y: undefined },
                            textHeight: PixelConverter.fromPointToPixel(Tachometer.DefaultCalloutFontSizeInPt)
                        };
                        return dataLabelSettings;
                    };
                    Tachometer.prototype.getFormatter = function (displayUnits, precision, value, ignoreDataType) {
                        if (ignoreDataType === void 0) { ignoreDataType = false; }
                        displayUnits = displayUnits == null ? 0 : displayUnits;
                        var realValue = displayUnits === 0 ? value : null;
                        var formatString = valueFormatter.getFormatString((ignoreDataType ? null : this.metadataColumn), Tachometer.formatStringProp);
                        precision = dataLabelUtils.getLabelPrecision(precision, formatString);
                        var valueFormatterOptions = this.getOptionsForLabelFormatter(displayUnits, formatString, realValue, precision);
                        return valueFormatter.create(valueFormatterOptions);
                    };
                    Tachometer.getTextWidth = function (fontSizePx, text) {
                        var textProperties = {
                            text: text,
                            fontFamily: Tachometer.defaultLabelFontFamily,
                            fontSize: fontSizePx,
                            fontWeight: Tachometer.defaultLabelfontWeight,
                        };
                        return textMeasurementService.measureSvgTextWidth(textProperties);
                    };
                    Tachometer.getDefaultTachometerCalloutPercentSettings = function () {
                        var dataLabelSettings = {
                            show: false,
                            fontSizePx: PixelConverter.fromPoint(Tachometer.DefaultCalloutPercentFontSizeInPt),
                            labelColor: '#333333',
                            precision: dataLabelUtils.defaultLabelPrecision,
                            fontSize: Tachometer.DefaultCalloutPercentFontSizeInPt,
                            offset: { x: undefined, y: undefined },
                            textHeight: PixelConverter.fromPointToPixel(Tachometer.DefaultCalloutFontSizeInPt),
                            invert: false
                        };
                        return dataLabelSettings;
                    };
                    Tachometer.prototype.getZeroMargin = function () {
                        return { top: 0, bottom: 0, left: 0, right: 0 };
                    };
                    Tachometer.prototype.completeAxisRange = function (range, radius) {
                        range.radius = radius;
                        range.innerRadius = radius * range.innerRadiusRatio;
                        range.startAngle = this.axisScale(range.startValue);
                        range.endAngle = this.axisScale(range.endValue);
                        return range;
                    };
                    Tachometer.prototype.completeIndicator = function (indicator, translation, offset, value) {
                        var radius = translation.radius;
                        var baseArcRadiusFactor = Tachometer.BaseArcRadiusFactor / 100; //radius of indicator base arc with respect to the dial radius
                        var baseArcRadius = radius * baseArcRadiusFactor;
                        var baseArcInnerRadius = baseArcRadius * indicator.baseThicknessFactor;
                        var needleTip = -radius * indicator.pointerSizeFactor;
                        var needleBase = -(baseArcRadius + baseArcInnerRadius) / 2;
                        var needleHeight = needleTip - needleBase;
                        var halfNeedleWidth = needleHeight * Tachometer.NeedleHeightToWidthRatio / 2;
                        var needleAngleInDegrees = this.axisScale(value) * Tachometer.RadToDegreeConversionFactor;
                        indicator.baseRadius = baseArcRadius;
                        indicator.baseInnerRadius = baseArcInnerRadius;
                        indicator.value = value;
                        indicator.baseStartAngle = translation.startAngle;
                        indicator.baseEndtAngle = translation.endAngle;
                        indicator.needletransformString = SVGUtil.translateAndRotate(offset.x, offset.y, 0, 0, needleAngleInDegrees);
                        indicator.needlePoints = [
                            { 'x': -halfNeedleWidth, 'y': needleBase },
                            { 'x': 0, 'y': needleTip },
                            { 'x': halfNeedleWidth, 'y': needleBase },
                            { 'x': -halfNeedleWidth, 'y': needleBase },
                        ];
                        return indicator;
                    };
                    Tachometer.prototype.completeTarget = function (target, axisData) {
                        target.radius = axisData.radius;
                        target.innerRadius = target.innerRadiusRatio === Tachometer.UninitializedRatio
                            ? Math.max(axisData.range1.innerRadius, axisData.range2.innerRadius, axisData.range3.innerRadius)
                            : target.radius * target.innerRadiusRatio;
                        target.innerRadius = Tachometer.clamp(target.innerRadius, axisData.indicator.baseRadius, axisData.radius);
                        target.offset.x = axisData.offset.x;
                        target.offset.y = axisData.offset.y;
                        return target;
                    };
                    //Convert the percent value of offset into a pixel value 
                    Tachometer.translateUserXOffset = function (baseXOffset, callout, width, textWidth, padding) {
                        var xOffsetPercent = callout.offset.x;
                        if (xOffsetPercent !== 0) {
                            var userXOffset = xOffsetPercent / 200 * (width - textWidth - 2 * padding); //we have width /2 on either side
                            var threshold = textWidth / 2 + padding;
                            var offset = baseXOffset + userXOffset;
                            //return the offset from the base offet
                            return offset < threshold
                                ? threshold - baseXOffset //too far left
                                : offset > width - threshold
                                    ? width - threshold - baseXOffset // too far right so clamp it
                                    : userXOffset;
                        }
                        else {
                            return 0;
                        }
                    };
                    Tachometer.prototype.isWithinBounds = function (rectangle) {
                        return (rectangle != null) && ((rectangle.left > 0) && (rectangle.right < this.currentViewport.width) && (rectangle.top > 0) && (rectangle.bottom < this.currentViewport.height));
                    };
                    //Return true if the two labels defined by 
                    Tachometer.prototype.isOverlapping = function (rect1, rect2) {
                        if (!rect1 || !rect2) {
                            return false;
                        }
                        var left = rect1.left - Tachometer.OverlapTolerance;
                        var right = rect1.right + Tachometer.OverlapTolerance;
                        var top = rect1.top - Tachometer.OverlapTolerance;
                        var bottom = rect1.bottom + Tachometer.OverlapTolerance;
                        return !(((left >= rect2.left && right >= rect2.left) && (left >= rect2.right && right >= rect2.right))
                            || ((left <= rect2.left && right <= rect2.left) && (left <= rect2.right && right <= rect2.right))
                            || ((top >= rect2.top && bottom >= rect2.top) && (top >= rect2.bottom && bottom >= rect2.bottom))
                            || ((top <= rect2.top && bottom <= rect2.top) && (top <= rect2.bottom && bottom <= rect2.bottom)));
                    };
                    Tachometer.prototype.isOverlappingWithCallout = function (rectangle) {
                        return this.isOverlapping(rectangle, this.calloutRectangle) || this.isOverlapping(rectangle, this.calloutPercentRectangle);
                    };
                    Tachometer.prototype.createNiceRoundLabels = function () {
                        var axisLabels = [];
                        var axisData = this.axisData;
                        var dataLabels = axisData.dataLabels;
                        var ticCount = (Math.abs(axisData.valueRange) > 1) ? dataLabels.count
                            : 1; //Show only the start and end values
                        if (ticCount > 0) {
                            var ticks = this.axisScale.ticks(ticCount);
                            ticCount = ticks.length; //This is the real tic count when this.data.dataLabelsSettings.round = true
                            var radius = this.axisData.radius;
                            var fontSizePx = dataLabels.fontSizePx;
                            var textHeight = PixelConverter.fromPointToPixel(dataLabels.fontSize);
                            var lastAngle = Tachometer.UnintializedStartValue; // initialize to a very small number
                            var reduce = dataLabels.reduce;
                            var lastDisplayValue = '';
                            var lastAxisLabel;
                            for (var i = 0; i < ticCount; i++) {
                                var value = ticks[i];
                                var angle = this.axisScale(value);
                                var currentDisplayValue = dataLabels.formatter.format(value);
                                if (((!reduce ||
                                    (Math.abs(lastAngle - angle) * radius) >= Tachometer.MinLabelDistance)) //to avoid overcrowding with labels
                                    && (lastDisplayValue !== currentDisplayValue)) {
                                    var axisLabel = this.createAxisLabel(currentDisplayValue, value, fontSizePx, textHeight, angle);
                                    if (this.isWithinBounds(axisLabel.rect)
                                        && (!lastAxisLabel || (lastAxisLabel && !this.isOverlapping(lastAxisLabel.rect, axisLabel.rect)))
                                        && !this.isOverlappingWithCallout(axisLabel.rect)) {
                                        axisLabels.push(axisLabel);
                                        lastAngle = angle;
                                        lastDisplayValue = currentDisplayValue;
                                        lastAxisLabel = axisLabel;
                                    }
                                }
                            }
                        }
                        return axisLabels;
                    };
                    Tachometer.prototype.createEquallySpacedLabels = function () {
                        var axisLabels = [];
                        var axisData = this.axisData;
                        var dataLabels = this.axisData.dataLabels;
                        var numberOfSteps = (Math.abs(axisData.valueRange) > 1) ? dataLabels.count - 1
                            : 1; //Show only the start and end values
                        if (numberOfSteps > 0) {
                            var startAngle = axisData.startAngle;
                            var angleStep = axisData.angleRange / numberOfSteps;
                            var fontSizePx = dataLabels.fontSizePx;
                            var textHeight = PixelConverter.fromPointToPixel(dataLabels.fontSize);
                            var lastDisplayValue = '';
                            var lastAxisLabel;
                            for (var i = 0; i <= numberOfSteps; i++) {
                                var angle = startAngle + (i * angleStep);
                                var value = this.axisScale.invert(angle);
                                var currentDisplayValue = dataLabels.formatter.format(value);
                                if (lastDisplayValue !== currentDisplayValue) {
                                    var axisLabel = this.createAxisLabel(dataLabels.formatter.format(value), value, fontSizePx, textHeight, angle);
                                    if (this.isWithinBounds(axisLabel.rect)
                                        && (!lastAxisLabel || (lastAxisLabel && !this.isOverlapping(lastAxisLabel.rect, axisLabel.rect)))
                                        && !this.isOverlappingWithCallout(axisLabel.rect)) {
                                        axisLabels.push(axisLabel);
                                        lastDisplayValue = currentDisplayValue;
                                        lastAxisLabel = axisLabel;
                                    }
                                }
                            }
                        }
                        return axisLabels;
                    };
                    Tachometer.prototype.truncateTextIfNeeded = function (text, positionX, onRightSide) {
                        var availableSpace = (onRightSide ? this.currentViewport.width - positionX : positionX);
                        text.call(AxisHelper.LabelLayoutStrategy.clip, availableSpace, textMeasurementService.svgEllipsis);
                    };
                    Tachometer.prototype.updateTargeIndicator = function (target) {
                        var offset = target.offset;
                        var radius = target.radius;
                        var innerRadius = target.innerRadius;
                        if (!this.targetIndicator) {
                            this.targetIndicator = this.mainGraphicsContext.append('path');
                            this.targetIndicator
                                .classed('targetIndicator', true)
                                .attr('stroke-width', Tachometer.DefaultStyleProperties.targetLine.thickness)
                                .attr('fill', 'none');
                        }
                        var targetIndicatorPath = [
                            { 'x': 0, 'y': -radius },
                            { 'x': 0, 'y': -innerRadius }
                        ];
                        var angleInDegrees = this.axisScale(target.value) * Tachometer.RadToDegreeConversionFactor;
                        this.targetIndicator
                            .attr('d', Tachometer.LineFunction(targetIndicatorPath))
                            .attr('transform', SVGUtil.translateAndRotate(offset.x, offset.y, 0, 0, angleInDegrees))
                            .style('stroke', target.lineColor);
                    };
                    Tachometer.prototype.updateTargetText = function (viewModel, axisLabels) {
                        var axis = viewModel.axis;
                        var target = axis.target;
                        var targetValue = target.value;
                        var center = axis.offset;
                        var radius = axis.radius;
                        var targetAngle = this.axisScale(targetValue);
                        var sinAngle = Math.sin(targetAngle);
                        var cosAngle = Math.cos(targetAngle);
                        var targetDetails = {
                            tipX: center.x + radius * sinAngle,
                            tipY: center.y - radius * cosAngle,
                            centerX: center.x,
                            centerY: center.y,
                            defaultTextAnchorX: center.x + axis.axisLabelRadius * sinAngle,
                            defaultTextAnchorY: center.y - axis.axisLabelRadius * cosAngle,
                            gaugeRadius: radius,
                            labelRadius: axis.axisLabelRadius,
                            onRightSide: sinAngle > 0,
                            onTopHalf: cosAngle > 0,
                            targetAngle: targetAngle
                        };
                        var targetRectangle = this.targetRectangle = this.getTargetRectangle(axis, axisLabels, targetDetails);
                        var anchor;
                        var anchorOffset = { x: 0, y: 0 };
                        var connecterAnchor = { x: 0, y: 0 };
                        if (targetRectangle == null) {
                            this.showTargetLabel = false;
                        }
                        else {
                            if (targetDetails.onRightSide) {
                                anchor = 'start';
                                anchorOffset.x = targetRectangle.left;
                            }
                            else {
                                anchor = 'end';
                                anchorOffset.x = targetRectangle.right;
                            }
                            anchorOffset.y = targetRectangle.bottom;
                            //get nearest x between left, middle and right
                            var targetCenterX = (targetRectangle.left + targetRectangle.right) / 2;
                            var closestEdgeX = Math.abs(targetDetails.tipX - targetRectangle.left) > Math.abs(targetDetails.tipX - targetRectangle.right)
                                ? targetRectangle.right : targetRectangle.left;
                            connecterAnchor.x = Math.abs(targetDetails.tipX - closestEdgeX) > Math.abs(targetDetails.tipX - targetCenterX) ? targetCenterX : closestEdgeX;
                            //get the nearest y between top, bottom and middle
                            var targetCenterY = (targetRectangle.top + targetRectangle.bottom) / 2;
                            var closestEdgeY = Math.abs(targetDetails.tipY - targetRectangle.top) > Math.abs(targetDetails.tipY - targetRectangle.bottom)
                                ? targetRectangle.bottom
                                : targetRectangle.bottom - target.fontSize; // Settled for bottom - font size by experimentation
                            connecterAnchor.y = Math.abs(targetDetails.tipY - closestEdgeY) > Math.abs(targetDetails.tipY - targetCenterY) ? targetCenterY : closestEdgeY;
                        }
                        if (!this.targetText) {
                            this.targetText = this.mainGraphicsContext
                                .append('text')
                                .classed(Tachometer.TargetText.class, true);
                        }
                        this.targetText
                            .attr({
                            'x': anchorOffset.x,
                            'y': anchorOffset.y,
                        })
                            .style({
                            'fill': target.textColor,
                            'text-anchor': anchor,
                            'display': this.showTargetLabel ? '' : 'none',
                            'font-size': target.fontSizePx
                        })
                            .text(target.formattedValue);
                        this.truncateTextIfNeeded(this.targetText, anchorOffset.x, targetDetails.onRightSide);
                        // Hide the target connector if the text is going to align with the target line in the arc
                        // It should only be shown if the target text is displaced (ex. when the target is very close to start/end)
                        if (this.showTargetLabel) {
                            if (!this.targetConnector) {
                                this.targetConnector = this.mainGraphicsContext
                                    .append('line')
                                    .classed(Tachometer.TargetConnector.class, true);
                            }
                            var targetConnectorX = connecterAnchor.x - targetDetails.tipX;
                            var targetConnectorY = connecterAnchor.y - targetDetails.tipY;
                            var targetConnectorLength = Math.sqrt(targetConnectorX * targetConnectorX + targetConnectorY * targetConnectorY);
                            if (targetConnectorLength - this.gaugeStyle.labels.padding < 1) {
                                this.targetConnector.style('display', 'none');
                            }
                            else {
                                this.targetConnector
                                    .attr({
                                    'x1': targetDetails.tipX,
                                    'y1': targetDetails.tipY,
                                    'x2': connecterAnchor.x,
                                    'y2': connecterAnchor.y
                                })
                                    .style({
                                    'stroke-width': target.thickness,
                                    'stroke': target.lineColor,
                                    'opacity': 0.1,
                                    'fill-opacity': 0,
                                    'display': ''
                                });
                            }
                        }
                        else if (this.targetConnector != null) {
                            this.targetConnector.style('display', 'none');
                        }
                    };
                    Tachometer.prototype.removeTargetElements = function (removeAll) {
                        if ((removeAll) && (this.targetIndicator)) {
                            this.targetIndicator.remove();
                            this.targetIndicator = null;
                        }
                        if (this.targetConnector) {
                            this.targetText.remove();
                            this.targetConnector.remove();
                            this.targetConnector = this.targetText = null;
                        }
                    };
                    Tachometer.transformGaugeAxisSettings = function (dataView, axisData) {
                        // Override settings according to property pane axis values
                        var axisOptions = Tachometer.getTachometerObjectsProperties(dataView, axisData);
                        axisData.startAngle = $.isNumeric(axisOptions.startAngle) ? (axisOptions.startAngle * Tachometer.DegreeToRadConversionFactor)
                            : Tachometer.UnintializedStartAngle;
                        axisData.endAngle = $.isNumeric(axisOptions.endAngle) ? (axisOptions.endAngle * Tachometer.DegreeToRadConversionFactor)
                            : Tachometer.UnintializedEndAngle;
                        if ($.isNumeric(axisOptions.endAngle)) {
                            axisData.endAngle = (axisOptions.endAngle * Tachometer.DegreeToRadConversionFactor);
                        }
                        if (axisOptions.axisScaleType) {
                            axisData.axisScaleType = axisOptions.axisScaleType;
                        }
                        if ($.isNumeric(axisOptions.startValue)) {
                            axisData.startValue = axisOptions.startValue;
                        }
                        if ($.isNumeric(axisOptions.endValue)) {
                            axisData.endValue = axisOptions.endValue;
                        }
                        var startAngle = Tachometer.normalizeAngle(axisData.startAngle);
                        var endAngle = Tachometer.normalizeAngle(axisData.endAngle);
                        if (startAngle > endAngle) {
                            //convert from a circular scale to a linear scale for simplicity
                            endAngle = endAngle + Tachometer.TwoPI;
                        }
                        axisData.startAngle = startAngle;
                        axisData.endAngle = endAngle;
                        axisData.angleRange = axisData.endAngle - axisData.startAngle;
                        var startValue = (axisData.startValue === Tachometer.UnintializedStartValue) ? Tachometer.DefaultMin : axisData.startValue;
                        var endValue = (axisData.endValue === Tachometer.UnintializedEndValue)
                            ? (axisData.value != null && axisData.value !== undefined ? axisData.value * 2 : Tachometer.DefaultMax)
                            : axisData.endValue;
                        if (startValue === 0 && endValue === 0) {
                            endValue = 1;
                        }
                        axisData.endValue = endValue;
                        axisData.startValue = startValue;
                        axisData.valueRange = endValue - startValue;
                        //Checking that the value is plotted inside the tachometer boundaries
                        var baseValue = Math.min(endValue, startValue);
                        var percent = axisData.valueRange !== 0 ? Math.abs((axisData.value - baseValue) * 100 / (axisData.valueRange)) : 0;
                        axisData.percent = percent;
                        axisData.directionClockwise = (axisData.endValue - axisData.startValue >= 0);
                        axisData.startQuadrant = Tachometer.getQuadrant(startAngle);
                        axisData.endQuadrant = Tachometer.getQuadrant(endAngle);
                        axisData.cosStartAngle = Math.cos(startAngle);
                        axisData.cosEndAngle = Math.cos(endAngle);
                        axisData.sinStartAngle = Math.sin(startAngle);
                        axisData.sinEndAngle = Math.sin(endAngle);
                        return axisData;
                    };
                    Tachometer.getTachometerObjectsProperties = function (dataView, axisData) {
                        var properties = {};
                        var objects = dataView && dataView.metadata ? dataView.metadata.objects : null;
                        var axisObject = objects ? objects.axis : null;
                        var hasAxisObject = (objects != null && axisObject != null);
                        var startValue;
                        var endValue;
                        properties.startAngle = hasAxisObject && axisObject.startAngle != null ? axisObject.startAngle : undefined;
                        properties.endAngle = hasAxisObject && axisObject.endAngle != null ? axisObject.endAngle : undefined;
                        if (!DataRoleHelper.hasRoleInDataView(dataView, Tachometer.RoleNames.startValue)) {
                            startValue = properties.startValue = hasAxisObject && axisObject.startValue != null ? axisObject.startValue : undefined;
                        }
                        else {
                            startValue = axisData.startValue;
                        }
                        if (!DataRoleHelper.hasRoleInDataView(dataView, Tachometer.RoleNames.endValue)) {
                            endValue = properties.endValue = hasAxisObject && axisObject.endValue != null ? axisObject.endValue : undefined;
                        }
                        else {
                            endValue = axisData.endValue;
                        }
                        properties.axisScaleType = hasAxisObject && axisObject.axisScaleType
                            && Tachometer.isNotNegative(startValue) && Tachometer.isNotNegative(endValue) //log scale not defined for negative values
                            ? axisObject.axisScaleType : Tachometer1474636471549.axisScaleType.linear;
                        return properties;
                    };
                    Tachometer.transformRangeSettings = function (dataView, rangeName, rangeSettings, defaultRangeColor) {
                        var objects = dataView && dataView.metadata ? dataView.metadata.objects : null;
                        var rangeObject = objects ? objects[rangeName] : null;
                        var hasRangeObject = (objects != null && rangeObject != null);
                        var thickness;
                        if (hasRangeObject) {
                            if ((rangeSettings.startValue === Tachometer.UnintializedRangeStartValue //This basically means that the value is not defined in field wells
                                || rangeSettings.startValue === undefined)
                                && (rangeObject.startValue && rangeObject.startValue !== undefined)) {
                                rangeSettings.startValue = rangeObject.startValue;
                            }
                            if (rangeObject.rangeColor && rangeObject.rangeColor !== undefined) {
                                rangeSettings.rangeColor = rangeObject.rangeColor.solid.color;
                            }
                            else {
                                rangeSettings.rangeColor = defaultRangeColor;
                            }
                            if (rangeObject.thickness && rangeObject.thickness !== undefined) {
                                thickness = rangeObject.thickness;
                                thickness = Tachometer.clamp(thickness, 0, 100);
                                rangeObject.thickness = thickness; //We want to set this to clamped value for enumeration
                            }
                            else {
                                thickness = Tachometer.DefaultRangeThickness;
                            }
                        }
                        else {
                            rangeSettings.rangeColor = defaultRangeColor;
                            thickness = Tachometer.DefaultRangeThickness;
                        }
                        rangeSettings.innerRadiusRatio = 1 - thickness / 100;
                        return rangeSettings;
                    };
                    Tachometer.getDefaultTachometerLabelSettings = function () {
                        var dataLabelSettings = {
                            show: true,
                            fontSizePx: PixelConverter.fromPoint(Tachometer.defaultLabelFontSizeInPt),
                            labelColor: null,
                            displayUnits: 0,
                            precision: dataLabelUtils.defaultLabelPrecision,
                            fontSize: Tachometer.defaultLabelFontSizeInPt,
                            round: true,
                            count: undefined,
                            reduce: true,
                            textHeight: PixelConverter.fromPointToPixel(Tachometer.defaultLabelFontSizeInPt)
                                + Tachometer.DefaultStyleProperties.labels.padding
                        };
                        return dataLabelSettings;
                    };
                    Tachometer.prototype.transformTargetSettings = function (dataView, targetSettings, dataLabels) {
                        var objects = dataView && dataView.metadata ? dataView.metadata.objects : null;
                        var targetObject = objects ? objects.target : null;
                        var hasTargetObject = (objects != null && targetObject != null);
                        if (hasTargetObject) {
                            if (targetObject.show !== undefined) {
                                targetSettings.show = targetObject.show;
                            }
                            if (targetSettings.value === Tachometer.UnintializedStartValue //This basically means that the value is not defined in field wells
                                && targetObject.value && targetObject.value !== undefined) {
                                targetSettings.value = targetObject.value;
                            }
                            if (targetObject.lineColor && targetObject.lineColor !== undefined) {
                                targetSettings.lineColor = targetObject.lineColor.solid.color;
                            }
                            else {
                                targetSettings.lineColor = Tachometer.defaultTargetSettings.lineColor;
                            }
                            if (targetObject.innerRadiusRatio && targetObject.innerRadiusRatio !== undefined) {
                                targetSettings.innerRadiusRatio = 1 - (targetObject.innerRadiusRatio) / 100;
                            }
                            else {
                                targetSettings.innerRadiusRatio = Tachometer.defaultTargetSettings.innerRadiusRatio;
                            }
                            if (targetObject.textColor && targetObject.textColor !== undefined) {
                                targetSettings.textColor = targetObject.textColor.solid.color;
                            }
                            else {
                                targetSettings.textColor = Tachometer.defaultTargetSettings.textColor;
                            }
                            if (targetObject.fontSize && targetObject.fontSize !== undefined) {
                                targetSettings.fontSize = targetObject.fontSize;
                            }
                            else {
                                targetSettings.fontSize = Tachometer.defaultTargetSettings.fontSize;
                            }
                        }
                        else {
                            targetSettings.show = Tachometer.defaultTargetSettings.show;
                            if (targetSettings.value === Tachometer.UnintializedStartValue) {
                                targetSettings.value = Tachometer.defaultTargetSettings.value;
                            }
                            targetSettings.lineColor = Tachometer.defaultTargetSettings.lineColor;
                            targetSettings.innerRadiusRatio = Tachometer.defaultTargetSettings.innerRadiusRatio;
                            targetSettings.innerRadius = Tachometer.defaultTargetSettings.innerRadius;
                            targetSettings.textColor = Tachometer.defaultTargetSettings.textColor;
                            targetSettings.fontSize = Tachometer.defaultTargetSettings.fontSize;
                        }
                        if (targetSettings.show) {
                            targetSettings.fontSizePx = PixelConverter.fromPoint(targetSettings.fontSize);
                            targetSettings.textHeight = PixelConverter.fromPointToPixel(targetSettings.fontSize);
                        }
                        return targetSettings;
                    };
                    Tachometer.transformIndicatorSettings = function (dataView, indicatorData) {
                        var objects = dataView && dataView.metadata ? dataView.metadata.objects : null;
                        var indicatorObject = objects ? objects.indicator : null;
                        var hasIndicatorObject = (objects != null && indicatorObject != null);
                        if (hasIndicatorObject) {
                            if (indicatorObject.pointerSizeFactor && indicatorObject.pointerSizeFactor !== undefined) {
                                var thickness = Tachometer.clamp(indicatorObject.pointerSizeFactor, 0, 100);
                                indicatorObject.pointerSizeFactor = thickness; //We want to set this to clamped value for enumeration
                                indicatorData.pointerSizeFactor = thickness / 100;
                            }
                            else {
                                indicatorData.pointerSizeFactor = Tachometer.defaultIndicatorSettings.pointerSizeFactor;
                            }
                            if (indicatorObject.pointerColor && indicatorObject.pointerColor !== undefined) {
                                indicatorData.pointerColor = indicatorObject.pointerColor.solid.color;
                            }
                            else {
                                indicatorData.pointerColor = Tachometer.defaultIndicatorSettings.pointerColor;
                            }
                            if (indicatorObject.baseThicknessFactor && indicatorObject.baseThicknessFactor !== undefined) {
                                var thickness = Tachometer.clamp(indicatorObject.baseThicknessFactor, 0, 100);
                                indicatorObject.baseThicknessFactor = thickness; //We want to set this to clamped value for enumeration
                                indicatorData.baseThicknessFactor = 1 - thickness / 100;
                            }
                            else {
                                indicatorData.baseThicknessFactor = Tachometer.defaultIndicatorSettings.baseThicknessFactor;
                            }
                            if (indicatorObject.baseColor && indicatorObject.baseColor !== undefined) {
                                indicatorData.baseColor = indicatorObject.baseColor.solid.color;
                            }
                            else {
                                indicatorData.baseColor = Tachometer.defaultIndicatorSettings.baseColor;
                            }
                        }
                        else {
                            indicatorData.pointerSizeFactor = Tachometer.defaultIndicatorSettings.pointerSizeFactor;
                            indicatorData.pointerColor = Tachometer.defaultIndicatorSettings.pointerColor;
                            indicatorData.baseThicknessFactor = Tachometer.defaultIndicatorSettings.baseThicknessFactor;
                            indicatorData.baseColor = Tachometer.defaultIndicatorSettings.baseColor;
                        }
                        return indicatorData;
                    };
                    //clamp values between min and max, not using scales due to overhead
                    Tachometer.clamp = function (value, min, max) {
                        if (value > max) {
                            return max; //clamp upper limit
                        }
                        else if (value < min) {
                            return min;
                        }
                        return value;
                    };
                    Tachometer.prototype.getOptionsForLabelFormatter = function (displayUnits, formatString, value2, precision) {
                        return {
                            displayUnitSystemType: DisplayUnitSystemType.DataLabels,
                            format: formatString,
                            precision: precision,
                            value: displayUnits,
                            value2: value2,
                            allowFormatBeautification: true,
                        };
                    };
                    Tachometer.prototype.createAxisLabel = function (displayValue, value, textSizePx, fontHeight, angle) {
                        var axis = this.axisData;
                        var radius = axis.axisLabelRadius;
                        var xOffset = axis.offset.x;
                        var yOffset = axis.offset.y;
                        var sinAngle = Math.sin(angle);
                        var cosAngle = Math.cos(angle);
                        var onBottomHalf = cosAngle < 0;
                        var ticX = xOffset + radius * sinAngle;
                        var ticY = yOffset - (radius + (onBottomHalf ? fontHeight : 0)) * cosAngle;
                        //Is the target on left side or right side of verticle?
                        var onRightSide = sinAngle > 0;
                        var textWidth = Tachometer.getTextWidth(textSizePx, displayValue);
                        var rect = {
                            left: onRightSide ? ticX : ticX - textWidth,
                            top: ticY - fontHeight,
                            right: onRightSide ? ticX + textWidth : ticX,
                            bottom: ticY
                        };
                        return {
                            show: true,
                            displayValue: displayValue,
                            value: value,
                            angle: angle,
                            anchor: onRightSide ? 'start' : 'end',
                            xOffset: ticX,
                            yOffset: ticY,
                            textWidth: textWidth,
                            textHeight: fontHeight,
                            rect: rect,
                            graphicsElement: null
                        };
                    };
                    //Get the rectangle area where target value can be placed
                    Tachometer.prototype.getTargetRectangle = function (axis, axisLabels, targetDetails) {
                        var target = axis.target;
                        var targetValue = target.value;
                        //Is the target on left side or right side of verticle?
                        var targetTextWidth = target.textWidth;
                        var targetTextHeight = target.textHeight;
                        var targetPlaced = false;
                        var targetRect = {
                            left: targetDetails.onRightSide ? targetDetails.defaultTextAnchorX : targetDetails.defaultTextAnchorX - targetTextWidth,
                            top: targetDetails.onTopHalf ? targetDetails.defaultTextAnchorY - targetTextHeight : targetDetails.defaultTextAnchorY,
                            right: targetDetails.onRightSide ? targetDetails.defaultTextAnchorX + target.textWidth : targetDetails.defaultTextAnchorX,
                            bottom: targetDetails.onTopHalf ? targetDetails.defaultTextAnchorY : targetDetails.defaultTextAnchorY + target.textHeight
                        };
                        var tickCount = axisLabels.length;
                        if (tickCount > 0) {
                            //1. identify where the target label will be located
                            // a linear search is fine because the number of axis labels are limited to a handful in the most common scenario
                            var i = 0;
                            for (var j = i + 1; j < tickCount; i++, j++) {
                                if (this.isBetween(targetValue, axisLabels[i].value, axisLabels[j].value)) {
                                    //2. Check if the target label can be placed between adjascent axis labels without overlapping
                                    targetRect = this.placeTargetBetweenLabels(axisLabels[i].rect, axisLabels[j].rect, targetRect, targetDetails);
                                    targetPlaced = true;
                                    break; //match found
                                }
                            }
                            if (!targetPlaced) {
                                var startIndex;
                                var endIndex;
                                if (axis.directionClockwise) {
                                    startIndex = 0;
                                    endIndex = tickCount - 1;
                                }
                                else {
                                    startIndex = tickCount - 1;
                                    endIndex = 0;
                                }
                                if (this.isBetween(targetValue, axis.startValue, axisLabels[startIndex].value)) {
                                    //target Value is between startValue and the first Axis Label
                                    targetRect = this.placeTargetBeforeFirstLabel(axisLabels[startIndex].rect, targetRect, targetDetails);
                                }
                                else if (this.isBetween(targetValue, axisLabels[endIndex].value, axis.endValue)) {
                                    //target Value is between last Axis Label and endValue
                                    targetRect = this.placeTargetAfterLastLabel(axisLabels[endIndex].rect, targetRect, targetDetails);
                                }
                            }
                        }
                        return this.isWithinBounds(targetRect) && !this.isOverlappingWithCallout(targetRect) ? targetRect : null;
                    };
                    /*
                    * Return which quadrant the angle is in
                    * Angle can be between negative infinity to positive infinity
                    */
                    Tachometer.getQuadrant = function (angle) {
                        var quadrant;
                        if (Math.sin(angle) >= 0) {
                            if (Math.cos(angle) >= 0) {
                                quadrant = 1;
                            }
                            else {
                                quadrant = 2;
                            }
                        }
                        else {
                            if (Math.cos(angle) >= 0) {
                                quadrant = 4;
                            }
                            else {
                                quadrant = 3;
                            }
                        }
                        return quadrant;
                    };
                    //Translate the angle to the scale -PI to + PI
                    Tachometer.normalizeAngle = function (angle) {
                        var normalizedAngle = angle % Tachometer.TwoPI;
                        if (normalizedAngle > Math.PI) {
                            normalizedAngle = normalizedAngle - Tachometer.TwoPI;
                        }
                        else if (normalizedAngle < -Math.PI) {
                            normalizedAngle = normalizedAngle + Tachometer.TwoPI;
                        }
                        return normalizedAngle;
                    };
                    Tachometer.isNotNegative = function (value) {
                        return value === undefined || value >= 0;
                    };
                    Tachometer.prototype.isBetween = function (value, startValue, endValue) {
                        return ((value > startValue && value <= endValue)
                            || (value < startValue && value >= endValue) // for reversed values
                        );
                    };
                    Tachometer.prototype.placeTargetBetweenLabels = function (firstRect, secondRect, targetRect, targetDetails) {
                        var moveTargetClockwise = this.axisData.directionClockwise;
                        var overlappingRect = null;
                        var nextRect = null;
                        if (this.isOverlapping(targetRect, firstRect)) {
                            overlappingRect = firstRect;
                            nextRect = secondRect;
                        }
                        else if (this.isOverlapping(targetRect, secondRect)) {
                            overlappingRect = secondRect;
                            nextRect = firstRect;
                            moveTargetClockwise = !moveTargetClockwise;
                        }
                        else {
                            return targetRect;
                        }
                        return this.moveTargetAwayFromLabel(overlappingRect, nextRect, targetRect, targetDetails, moveTargetClockwise);
                    };
                    Tachometer.prototype.placeTargetBeforeFirstLabel = function (labelRectangle, targetRect, targetDetails) {
                        // There may be room between the first label and start of the dial
                        //Create a rectangle of 1 pixel width at the start of the dial and use it along with the last label to place the target
                        var axisData = this.axisData;
                        var startRectOnAxis = this.getUnitRectangle(axisData.startAngle);
                        var endRectOnAxis = this.getUnitRectangle(axisData.endAngle);
                        var targetRectangle;
                        if (axisData.directionClockwise) {
                            targetRectangle = this.placeTargetBetweenLabels(startRectOnAxis, labelRectangle, targetRect, targetDetails);
                        }
                        else {
                            targetRectangle = this.placeTargetBetweenLabels(labelRectangle, startRectOnAxis, targetRect, targetDetails);
                        }
                        if (targetRectangle != null) {
                            return this.moveTargetCloserToGaugeStart(targetRectangle, startRectOnAxis, endRectOnAxis);
                        }
                        return null;
                    };
                    Tachometer.prototype.placeTargetAfterLastLabel = function (labelRectangle, targetRect, targetDetails) {
                        // There may be room between the last label and end of the dial
                        //Create a rectangle of 1 pixel width at the end of the dial and use it along with the last label to place the target
                        var axisData = this.axisData;
                        var startRectOnAxis = this.getUnitRectangle(axisData.startAngle);
                        var endRectOnAxis = this.getUnitRectangle(axisData.endAngle);
                        var targetRectangle;
                        if (axisData.directionClockwise) {
                            targetRectangle = this.placeTargetBetweenLabels(labelRectangle, endRectOnAxis, targetRect, targetDetails);
                        }
                        else {
                            targetRectangle = this.placeTargetBetweenLabels(endRectOnAxis, labelRectangle, targetRect, targetDetails);
                        }
                        if (targetRectangle != null) {
                            return this.moveTargetCloserToGaugeEnd(targetRectangle, startRectOnAxis, endRectOnAxis);
                        }
                        return null;
                    };
                    Tachometer.prototype.moveTargetAwayFromLabel = function (overlappingLabel, nextLabel, targetRect, targetDetails, moveTargetClockwise) {
                        var newTargetRect = null;
                        var absSinTargetAngle = Math.abs(Math.sin(targetDetails.targetAngle));
                        if (absSinTargetAngle < Tachometer.PreferHorizontalThreshold) {
                            newTargetRect = this.getHorizontalRoomBetweenLabels(overlappingLabel, nextLabel, targetRect, targetDetails);
                            if (newTargetRect == null) {
                                newTargetRect = this.getVerticalRoomBetweenLabels(overlappingLabel, nextLabel, targetRect, targetDetails, moveTargetClockwise);
                            }
                        }
                        else {
                            //1. check whether we have room between the two labels to accomodate the target
                            newTargetRect = this.getVerticalRoomBetweenLabels(overlappingLabel, nextLabel, targetRect, targetDetails, moveTargetClockwise);
                            if (newTargetRect == null) {
                                newTargetRect = this.getHorizontalRoomBetweenLabels(overlappingLabel, nextLabel, targetRect, targetDetails);
                            }
                        }
                        if (newTargetRect == null) {
                            newTargetRect = this.getPlacementBetweenLabels(overlappingLabel, nextLabel, targetRect, targetDetails);
                        }
                        return newTargetRect;
                    };
                    //get a rectangle 1px wide and 1px tall along gauge axis at the given angle
                    Tachometer.prototype.getUnitRectangle = function (angle) {
                        var axisData = this.axisData;
                        var axisStartX = axisData.offset.x + axisData.radius * Math.sin(angle);
                        var axisStartY = axisData.offset.y - axisData.radius * Math.cos(angle);
                        return {
                            left: axisStartX,
                            top: axisStartY,
                            right: axisStartX + 1,
                            bottom: axisStartY + 1
                        };
                    };
                    //Attempt to move the target rectangle close to gauge dial when placed too far by the methods translateYFromGaugeAxis and translateXFromGaugeAxis
                    Tachometer.prototype.moveTargetCloserToGaugeStart = function (target, startPoint, endPoint) {
                        var altTarget;
                        switch (this.axisData.startQuadrant) {
                            case 1:
                                return target;
                            case 2:
                                if (target.left > startPoint.right) {
                                    altTarget = this.copyRectangle(target);
                                    var requiredWidth = altTarget.right - altTarget.left;
                                    altTarget.left = startPoint.right + this.gaugeStyle.target.padding;
                                    altTarget.right = altTarget.left + requiredWidth;
                                }
                                break;
                            case 3:
                                return target;
                            case 4:
                                if (target.right < startPoint.left) {
                                    altTarget = this.copyRectangle(target);
                                    var requiredWidth = altTarget.right - altTarget.left;
                                    altTarget.right = startPoint.left - this.gaugeStyle.target.padding;
                                    altTarget.left = altTarget.right - requiredWidth;
                                }
                                break;
                        }
                        if (altTarget != null) {
                            if (this.isOverlapping(altTarget, endPoint)) {
                                return target; //can't move Target
                            }
                            else {
                                //gaurantee that we do not overlap new target with any axis label
                                var tickCount = this.axisLabels.length;
                                for (var i = 0; i < tickCount; i++) {
                                    if (this.isOverlapping(altTarget, this.axisLabels[i].rect)) {
                                        return target;
                                    }
                                }
                                //reaching here means that we can move the target closer to the axis
                                return altTarget;
                            }
                        }
                        return target;
                    };
                    //Attempt to move the target rectangle close to gauge dial when placed too far by the methods translateYFromGaugeAxis and translateXFromGaugeAxis
                    Tachometer.prototype.moveTargetCloserToGaugeEnd = function (target, startPoint, endPoint) {
                        var altTarget;
                        switch (this.axisData.endQuadrant) {
                            case 1:
                                if (target.left > endPoint.right) {
                                    altTarget = this.copyRectangle(target);
                                    var requiredWidth = altTarget.right - altTarget.left;
                                    altTarget.left = endPoint.right + this.gaugeStyle.target.padding;
                                    altTarget.right = altTarget.left + requiredWidth;
                                }
                                break;
                            case 2:
                                return target;
                            case 3:
                                if (target.right < endPoint.left) {
                                    altTarget = this.copyRectangle(target);
                                    var requiredWidth = altTarget.right - altTarget.left;
                                    altTarget.right = endPoint.left - this.gaugeStyle.target.padding;
                                    altTarget.left = altTarget.right - requiredWidth;
                                }
                                break;
                            case 4:
                                return target;
                        }
                        if (altTarget != null) {
                            if (this.isOverlapping(altTarget, startPoint)) {
                                return target; //can't move Target
                            }
                            else {
                                //gaurantee that we do not overlap new target with any axis label
                                var tickCount = this.axisLabels.length;
                                for (var i = 0; i < tickCount; i++) {
                                    if (this.isOverlapping(altTarget, this.axisLabels[i].rect)) {
                                        return target;
                                    }
                                }
                                //reaching here means that we can move the target closer to the axis
                                return altTarget;
                            }
                        }
                        return target;
                    };
                    //if there is room return valid rectangle, otherwise return null
                    Tachometer.prototype.getHorizontalRoomBetweenLabels = function (rectangle1, rectangle2, targetRectangle, targetDetails) {
                        var requiredRoom = targetRectangle.right - targetRectangle.left;
                        var roomBetweenLabels = 0;
                        var rectangle1OnTopHalf = rectangle1.bottom < targetDetails.centerY;
                        var rectangle1OnLeftHalf = rectangle1.left < targetDetails.centerX;
                        var rectangle2OnTopHalf = rectangle2.bottom < targetDetails.centerY;
                        var rectangle2OnLeftHalf = rectangle2.left < targetDetails.centerX;
                        if ((rectangle1OnTopHalf !== rectangle2OnTopHalf) || (rectangle1OnLeftHalf === rectangle2OnLeftHalf)) {
                            //to move horizontally, the two rectangles should be on the top or bottom and across the vertical axis
                            return null;
                        }
                        var baseX = 0;
                        if (rectangle1.left < rectangle2.left) {
                            roomBetweenLabels = rectangle2.left - rectangle1.right;
                            baseX = rectangle1.right;
                        }
                        else {
                            roomBetweenLabels = rectangle1.left - rectangle2.right;
                            baseX = rectangle2.right;
                        }
                        if (roomBetweenLabels > requiredRoom) {
                            //has room between the two labels to fit the target
                            baseX = baseX + ((roomBetweenLabels - requiredRoom) / 2); //center between labels
                            targetRectangle.left = baseX;
                            targetRectangle.right = baseX + requiredRoom;
                            //move X to gaurantee that target text does not overlap the gauge dial
                            targetRectangle = this.translateYFromGaugeAxis(targetRectangle, targetDetails);
                            if (this.isOverlapping(targetRectangle, rectangle1) || this.isOverlapping(targetRectangle, rectangle2) || this.isOverlappingWithCallout(targetRectangle)) {
                                return null;
                            }
                            return targetRectangle;
                        }
                        return null;
                    };
                    //if there is room return valid rectangle, otherwise return null
                    //move the target towards the next rectangle along the gauge axis clockwise or counter clockwise as indicated
                    Tachometer.prototype.getVerticalRoomBetweenLabels = function (overlappingRectangle, nextRectangle, targetRectangle, targetDetails, targetMoveDirection) {
                        var requiredRoom = targetRectangle.bottom - targetRectangle.top;
                        var targetTop = 0;
                        if ((targetDetails.onRightSide && targetMoveDirection)
                            || (!targetDetails.onRightSide && !targetMoveDirection)) {
                            targetTop = overlappingRectangle.bottom + this.gaugeStyle.target.padding;
                        }
                        else {
                            targetTop = overlappingRectangle.top - requiredRoom - this.gaugeStyle.target.padding;
                        }
                        var newTargetRectangle = {
                            left: targetRectangle.left,
                            top: targetTop,
                            right: targetRectangle.right,
                            bottom: targetTop + requiredRoom
                        };
                        //move X to gaurantee that target text does not overlap the gauge dial
                        newTargetRectangle = this.translateXFromGaugeAxis(newTargetRectangle, targetDetails);
                        if (newTargetRectangle != null && !this.isOverlapping(newTargetRectangle, nextRectangle) && !this.isOverlappingWithCallout(newTargetRectangle)) {
                            return newTargetRectangle;
                        }
                        return null;
                    };
                    Tachometer.prototype.getPlacementBetweenLabels = function (overlappingRect, nextRect, targetRectangle, targetDetails) {
                        var onRightSide = targetRectangle.left >= targetDetails.centerX;
                        var onBottom = targetRectangle.bottom >= targetDetails.centerY;
                        var requiredHeight = targetRectangle.bottom - targetRectangle.top;
                        var requiredWidth = targetRectangle.right - targetRectangle.left;
                        var targetBottom = 0;
                        var targetLeft = 0;
                        if (onBottom) {
                            targetBottom = Math.min(overlappingRect.bottom, nextRect.bottom) + requiredHeight + this.gaugeStyle.target.padding;
                        }
                        else {
                            targetBottom = Math.max(overlappingRect.top, nextRect.top) - this.gaugeStyle.target.padding;
                        }
                        if (onRightSide) {
                            targetLeft = Math.min(overlappingRect.right, nextRect.right) + this.gaugeStyle.target.padding;
                        }
                        else {
                            targetLeft = Math.max(overlappingRect.left, nextRect.left) - this.gaugeStyle.target.padding - requiredWidth;
                        }
                        targetRectangle.left = targetLeft;
                        targetRectangle.right = targetLeft + requiredWidth;
                        targetRectangle.top = targetBottom - requiredHeight;
                        targetRectangle.bottom = targetBottom;
                        targetRectangle = this.translateXFromGaugeAxis(targetRectangle, targetDetails);
                        targetRectangle = this.translateYFromGaugeAxis(targetRectangle, targetDetails);
                        if (this.isOverlapping(targetRectangle, overlappingRect) || this.isOverlapping(targetRectangle, nextRect) || this.isOverlappingWithCallout(targetRectangle)) {
                            //Note, this part is switched
                            if (onRightSide) {
                                targetLeft = Math.max(overlappingRect.left, nextRect.left) - this.gaugeStyle.target.padding - requiredWidth;
                            }
                            else {
                                targetLeft = Math.min(overlappingRect.right, nextRect.right) + this.gaugeStyle.target.padding;
                            }
                            targetRectangle.left = targetLeft;
                            targetRectangle.right = targetLeft + requiredWidth;
                            //When we switch above logic, there is potential of overlapping with gauge
                            targetRectangle = this.translateXFromGaugeAxis(targetRectangle, targetDetails);
                            targetRectangle = this.translateYFromGaugeAxis(targetRectangle, targetDetails);
                            if (this.isOverlapping(targetRectangle, overlappingRect) || this.isOverlapping(targetRectangle, nextRect) || this.isOverlappingWithCallout(targetRectangle)) {
                                //now try to go far left or far right as possible
                                if (onRightSide) {
                                    targetLeft = Math.max(overlappingRect.right, nextRect.right) + this.gaugeStyle.target.padding;
                                }
                                else {
                                    targetLeft = Math.min(overlappingRect.left, nextRect.left) - this.gaugeStyle.target.padding - requiredWidth;
                                }
                                targetRectangle.left = targetLeft;
                                targetRectangle.right = targetLeft + requiredWidth;
                                //When we switch above logic, there is potential of overlapping with gauge
                                targetRectangle = this.translateXFromGaugeAxis(targetRectangle, targetDetails);
                                targetRectangle = this.translateYFromGaugeAxis(targetRectangle, targetDetails);
                                if (this.isOverlapping(targetRectangle, overlappingRect) || this.isOverlapping(targetRectangle, nextRect) || this.isOverlappingWithCallout(targetRectangle)) {
                                    return null;
                                }
                            }
                        }
                        return targetRectangle;
                    };
                    Tachometer.prototype.copyRectangle = function (rectangle) {
                        return {
                            top: rectangle.top,
                            bottom: rectangle.bottom,
                            left: rectangle.left,
                            right: rectangle.right
                        };
                    };
                    //move along Y axis to avoid overlap
                    Tachometer.prototype.translateYFromGaugeAxis = function (rectangle, targetDetails) {
                        if (rectangle == null) {
                            return null;
                        }
                        var targetLeftOnGaugeRight = rectangle.left >= targetDetails.centerX;
                        var targetRightOnGaugeRight = rectangle.right >= targetDetails.centerX;
                        var targetTopOnGaugeTop = rectangle.top <= targetDetails.centerY;
                        var requiredHeight = rectangle.bottom - rectangle.top;
                        if (targetLeftOnGaugeRight === targetRightOnGaugeRight) {
                            //minimun distance required from gauge center along Y axis to avoid overlap
                            var gaugePivotX = targetRightOnGaugeRight ? Math.abs(rectangle.left - targetDetails.centerX) : Math.abs(targetDetails.centerX - rectangle.right);
                            var gaugePivotYLimit = targetDetails.labelRadius * Math.cos(Math.asin(gaugePivotX / targetDetails.labelRadius));
                            if (!isNaN(gaugePivotYLimit)) {
                                //means that x is already ourside of the circle so no need to change Y
                                if (targetTopOnGaugeTop) {
                                    gaugePivotYLimit = targetDetails.centerY - gaugePivotYLimit;
                                    if (gaugePivotYLimit < rectangle.bottom) {
                                        rectangle.top = gaugePivotYLimit - requiredHeight;
                                        rectangle.bottom = gaugePivotYLimit;
                                    }
                                }
                                else {
                                    gaugePivotYLimit = targetDetails.centerY + gaugePivotYLimit;
                                    if (gaugePivotYLimit > rectangle.top) {
                                        rectangle.top = gaugePivotYLimit;
                                        rectangle.bottom = gaugePivotYLimit + requiredHeight;
                                    }
                                }
                            }
                        }
                        else {
                            if (targetTopOnGaugeTop) {
                                gaugePivotYLimit = targetDetails.centerY - targetDetails.labelRadius;
                                if (rectangle.bottom > gaugePivotYLimit) {
                                    rectangle.top = gaugePivotYLimit - requiredHeight;
                                    rectangle.bottom = gaugePivotYLimit;
                                }
                            }
                            else {
                                gaugePivotYLimit = targetDetails.centerY + targetDetails.labelRadius;
                                if (rectangle.top < gaugePivotYLimit) {
                                    rectangle.top = gaugePivotYLimit;
                                    rectangle.bottom = gaugePivotYLimit + requiredHeight;
                                }
                            }
                        }
                        return this.isWithinBounds(rectangle) ? rectangle : null;
                    };
                    //move along X axis to avoid overlap
                    Tachometer.prototype.translateXFromGaugeAxis = function (rectangle, targetDetails) {
                        if (rectangle == null) {
                            return null; //going out of range
                        }
                        var targetLeftOnGaugeRight = rectangle.left >= targetDetails.centerX;
                        var targetRightOnGaugeRight = rectangle.right >= targetDetails.centerX;
                        var targetTopOnGaugeTop = rectangle.top <= targetDetails.centerY;
                        var targetBottomOnGageBottom = rectangle.bottom <= targetDetails.centerY;
                        var requiredWidth = rectangle.right - rectangle.left;
                        var gaugePivotY = 0;
                        var gaugePivotXLimit;
                        if (targetTopOnGaugeTop === targetBottomOnGageBottom) {
                            gaugePivotY = targetTopOnGaugeTop ? targetDetails.centerY - rectangle.bottom : rectangle.top - targetDetails.centerY;
                            gaugePivotXLimit = targetDetails.labelRadius * Math.sin(Math.acos(gaugePivotY / targetDetails.labelRadius));
                            if (!isNaN(gaugePivotXLimit)) {
                                if (targetLeftOnGaugeRight && targetRightOnGaugeRight) {
                                    gaugePivotXLimit = targetDetails.centerX + gaugePivotXLimit;
                                    if (gaugePivotXLimit > rectangle.left) {
                                        rectangle.left = gaugePivotXLimit;
                                        rectangle.right = gaugePivotXLimit + requiredWidth;
                                    }
                                }
                                else if (!targetLeftOnGaugeRight && !targetRightOnGaugeRight) {
                                    gaugePivotXLimit = targetDetails.centerX - gaugePivotXLimit;
                                    if (gaugePivotXLimit < rectangle.right) {
                                        rectangle.right = gaugePivotXLimit;
                                        rectangle.left = gaugePivotXLimit - requiredWidth;
                                    }
                                }
                            }
                        }
                        else {
                            if (targetLeftOnGaugeRight) {
                                gaugePivotXLimit = targetDetails.centerX + targetDetails.labelRadius;
                                if (rectangle.left < gaugePivotXLimit) {
                                    rectangle.left = gaugePivotXLimit;
                                    rectangle.right = gaugePivotXLimit + requiredWidth;
                                }
                            }
                            else {
                                gaugePivotXLimit = targetDetails.centerX - targetDetails.labelRadius;
                                if (rectangle.right > gaugePivotXLimit) {
                                    rectangle.right = gaugePivotXLimit;
                                    rectangle.left = gaugePivotXLimit - requiredWidth;
                                }
                            }
                        }
                        return this.isWithinBounds(rectangle) ? rectangle : null;
                    };
                    Tachometer.prototype.enumerateObjectInstances = function (options) {
                        var enumeration = [];
                        switch (options.objectName) {
                            case 'axis':
                                this.enumerateAxis(enumeration);
                                break;
                            case 'range1':
                                this.enumerateRange(enumeration, 'range1', 'Range 1', false);
                                break;
                            case 'range2':
                                this.enumerateRange(enumeration, 'range2', 'Range 2', true, Tachometer.RoleNames.range2StartValue);
                                break;
                            case 'range3':
                                this.enumerateRange(enumeration, 'range3', 'Range 3', true, Tachometer.RoleNames.range3StartValue);
                                break;
                            case 'target':
                                this.enumerateTarget(enumeration);
                                break;
                            case 'indicator':
                                this.enumerateIndicator(enumeration);
                                break;
                            case 'labels':
                                this.enumerateDataLabels(enumeration, 'labels');
                                break;
                            case 'calloutValue':
                                var labelSettings = this.viewModel && this.viewModel.callout.calloutValue ? this.viewModel.callout.calloutValue
                                    : Tachometer.getDefaultTachometerCalloutSettings();
                                this.enumerateCalloutProperties(enumeration, 'calloutValue', 'Callout Value', labelSettings);
                                break;
                            case 'calloutPercent':
                                var labelSettings = this.viewModel && this.viewModel.callout.calloutPercent ? this.viewModel.callout.calloutPercent
                                    : Tachometer.getDefaultTachometerCalloutPercentSettings();
                                this.enumerateCalloutPercentProperties(enumeration, 'calloutPercent', 'Callout Percent', labelSettings);
                                break;
                        }
                        return enumeration;
                    };
                    Tachometer.prototype.enumerateAxis = function (enumeration) {
                        var properties = Tachometer.getTachometerObjectsProperties(this.dataView, this.axisData);
                        enumeration.push({
                            objectName: 'axis',
                            displayName: 'Axis',
                            properties: properties,
                            selector: null,
                        });
                    };
                    Tachometer.prototype.enumerateRange = function (enumeration, rangeName, rangeDisplayName, showStartValue, startValueDataRoleName) {
                        var dataView = this.dataView;
                        var properties = {};
                        var objects = dataView && dataView.metadata ? dataView.metadata.objects : null;
                        var rangeObject = objects ? objects[rangeName] : null;
                        var hasRangeObject = (objects != null && rangeObject != null);
                        properties.rangeColor = hasRangeObject && rangeObject.rangeColor ? rangeObject.rangeColor.solid.color : undefined;
                        properties.thickness = hasRangeObject && rangeObject.thickness != null ? rangeObject.thickness : undefined;
                        if (showStartValue && startValueDataRoleName && !DataRoleHelper.hasRoleInDataView(dataView, startValueDataRoleName)) {
                            properties.startValue = hasRangeObject && rangeObject.startValue != null ? rangeObject.startValue : undefined;
                        }
                        enumeration.push({
                            objectName: rangeName,
                            displayName: rangeDisplayName,
                            properties: properties,
                            selector: null,
                        });
                    };
                    Tachometer.prototype.enumerateTarget = function (enumeration) {
                        var dataView = this.dataView;
                        var properties = {};
                        var objects = dataView && dataView.metadata ? dataView.metadata.objects : null;
                        var targetObject = objects ? objects.target : null;
                        var hasTargetObject = (objects != null && targetObject != null);
                        properties['show'] = hasTargetObject && targetObject.show != null ? targetObject.show : true;
                        if (!DataRoleHelper.hasRoleInDataView(dataView, Tachometer.RoleNames.targetValue)) {
                            properties.value = hasTargetObject && targetObject.value ? targetObject.value : undefined;
                        }
                        properties.lineColor = hasTargetObject && targetObject.lineColor ? targetObject.lineColor.solid.color : undefined;
                        properties.innerRadiusRatio = hasTargetObject && targetObject.innerRadiusRatio ? Tachometer.clamp(targetObject.innerRadiusRatio, 0, Tachometer.MaxTargetRadiusFactor)
                            : undefined;
                        properties.textColor = hasTargetObject && targetObject.textColor ? targetObject.textColor.solid.color : Tachometer.defaultLabelColor;
                        properties.fontSize = hasTargetObject && targetObject.fontSize ? targetObject.fontSize : minLabelFontSize;
                        enumeration.push({
                            objectName: 'target',
                            displayName: 'Target',
                            properties: properties,
                            selector: null,
                        });
                    };
                    Tachometer.prototype.enumerateIndicator = function (enumeration) {
                        var dataView = this.dataView;
                        var properties = {};
                        var objects = dataView && dataView.metadata ? dataView.metadata.objects : null;
                        var indicator = objects ? objects.indicator : null;
                        var hasIndicatorObject = (objects != null && indicator != null);
                        properties.pointerColor = hasIndicatorObject && indicator.pointerColor != null ? indicator.pointerColor.solid.color : undefined;
                        properties.pointerSizeFactor = hasIndicatorObject && indicator.pointerSizeFactor != null ? indicator.pointerSizeFactor : undefined;
                        properties.baseColor = hasIndicatorObject && indicator.baseColor != null ? indicator.baseColor.solid.color : undefined;
                        properties.baseThicknessFactor = hasIndicatorObject && indicator.baseThicknessFactor != null ? indicator.baseThicknessFactor : undefined;
                        enumeration.push({
                            selector: null,
                            objectName: 'indicator',
                            displayName: 'Indicator',
                            properties: properties,
                        });
                    };
                    Tachometer.prototype.enumerateDataLabels = function (enumeration, objectName) {
                        var labelSettings = this.viewModel && this.axisData.dataLabels ? this.axisData.dataLabels : Tachometer.getDefaultTachometerLabelSettings();
                        var objects = this.dataView && this.dataView.metadata ? this.dataView.metadata.objects : null;
                        var labelsObj = objects ? objects[objectName] : null;
                        var haslabelObject = (objects != null && labelsObj != null);
                        var instance = {
                            objectName: objectName,
                            selector: null,
                            properties: {},
                        };
                        this.enumerateLabelInstance(instance, labelSettings);
                        //Add specific properties of Data labels.
                        instance.properties['round'] = labelSettings.round; //Show nicely rounded labels such as 100, 200 etc.
                        // Allow user to specify the number of ticks only if the axis settings are not initialized
                        // or scale is linear
                        // or user has not requested to round the scale
                        if ((this.axisData == null)
                            || ((this.axisData != null) && (this.axisData.axisScaleType === Tachometer1474636471549.axisScaleType.linear))
                            || (!labelSettings.round)) {
                            if (haslabelObject) {
                                instance.properties['count'] = labelsObj.count;
                            }
                            else {
                                instance.properties['count'] = undefined;
                            }
                        }
                        else if ((this.axisData != null)
                            && (this.axisData.axisScaleType === Tachometer1474636471549.axisScaleType.log)
                            && (labelSettings.round)) {
                            instance.properties['reduce'] = labelSettings.reduce;
                        }
                        enumeration.push(instance);
                    };
                    Tachometer.prototype.enumerateCalloutProperties = function (enumeration, objectName, displayName, labelSettings) {
                        var instance = {
                            objectName: objectName,
                            displayName: displayName,
                            properties: {},
                            selector: null,
                        };
                        this.enumerateLabelInstance(instance, labelSettings);
                        var objects = this.dataView && this.dataView.metadata ? this.dataView.metadata.objects : null;
                        var labelsObj = objects ? objects[objectName] : null;
                        var haslabelObject = labelsObj != null;
                        instance.properties['xOffset'] =
                            (haslabelObject && labelsObj.xOffset !== undefined) && (labelSettings.offset && labelSettings.offset.x) ?
                                labelSettings.offset.x : undefined;
                        instance.properties['yOffset'] =
                            (haslabelObject && labelsObj.yOffset !== undefined) && (labelSettings.offset && labelSettings.offset.y && labelSettings.offset.y !== undefined) ?
                                -labelSettings.offset.y //switching direction for intutive user experience of +ve up
                                : undefined;
                        enumeration.push(instance);
                    };
                    Tachometer.prototype.enumerateCalloutPercentProperties = function (enumeration, objectName, displayName, labelSettings) {
                        var instance = {
                            objectName: objectName,
                            displayName: displayName,
                            properties: {},
                            selector: null,
                        };
                        this.enumerateLabelInstance(instance, labelSettings);
                        var objects = this.dataView && this.dataView.metadata ? this.dataView.metadata.objects : null;
                        var labelsObj = objects ? objects[objectName] : null;
                        var haslabelObject = (labelsObj != null);
                        instance.properties['xOffset'] =
                            (haslabelObject && labelsObj.xOffset !== undefined) && (labelSettings.offset && labelSettings.offset.x) ?
                                labelSettings.offset.x : undefined;
                        instance.properties['yOffset'] =
                            (haslabelObject && labelsObj.yOffset !== undefined) && (labelSettings.offset && labelSettings.offset.y && labelSettings.offset.y !== undefined) ?
                                -labelSettings.offset.y //switching direction for intutive user experience of +ve up
                                : undefined;
                        instance.properties['invert'] = haslabelObject ? labelsObj.invert : labelSettings.invert;
                        enumeration.push(instance);
                    };
                    Tachometer.prototype.enumerateLabelInstance = function (instance, labelSettings) {
                        var precision = labelSettings.precision;
                        instance.properties['show'] = labelSettings.show;
                        instance.properties['color'] = labelSettings.labelColor || Tachometer.defaultLabelColor;
                        if (labelSettings.displayUnits != null) {
                            instance.properties['labelDisplayUnits'] = labelSettings.displayUnits;
                        }
                        instance.properties['labelPrecision'] = precision === dataLabelUtils.defaultLabelPrecision ? undefined : precision;
                        instance.properties['fontSize'] = labelSettings.fontSize;
                    };
                    Tachometer.UnintializedStartValue = -Infinity;
                    Tachometer.UnintializedEndValue = +Infinity;
                    Tachometer.UnintializedRangeStartValue = Tachometer.UnintializedEndValue; //uninitialize to UNINITIALIZED_END_VALUE so that the range is invalid
                    Tachometer.UninitializedRatio = +Infinity;
                    Tachometer.UnintializedStartAngle = -Math.PI * 2 / 3;
                    Tachometer.UnintializedEndAngle = Math.PI * 2 / 3;
                    Tachometer.PiBy4 = Math.PI / 4;
                    Tachometer.ThreePiBy4 = Math.PI * 3 / 4;
                    Tachometer.MinusPiBy4 = -Math.PI / 4;
                    Tachometer.MinusThreePiBy4 = -Math.PI * 3 / 4;
                    Tachometer.MinWidthForAxisLabel = 150;
                    Tachometer.MinHeightForAxisLabel = 150;
                    Tachometer.MinWidthForTargetLabel = 150;
                    Tachometer.MinHeightForTargetLabel = 150;
                    Tachometer.ReducedHorizontalMargin = 15;
                    Tachometer.ReducedVerticaltMargin = 10;
                    Tachometer.UnitMargin = 5; //Used for logic
                    Tachometer.DefaultMarginSettings = {
                        top: 20,
                        bottom: 15,
                        left: 15,
                        right: 15
                    };
                    Tachometer.DefaultMax = 1;
                    Tachometer.DefaultMin = 0;
                    Tachometer.VisualClassName = 'tachometer';
                    Tachometer.DefaultLabelCount = 4;
                    Tachometer.MinLabelDistance = 50;
                    Tachometer.DefaultStyleProperties = {
                        indicator: {
                            thickness: 2,
                            fill: 'none'
                        },
                        targetLine: {
                            thickness: 2
                        },
                        labels: {
                            padding: 10,
                        },
                        callout: {
                            padding: 10,
                        },
                        target: {
                            padding: 10,
                        }
                    };
                    Tachometer.DefaultRange1Color = '#0EFF23'; //Green;
                    Tachometer.DefaultRange2Color = '#FFFE00'; //Yellow
                    Tachometer.DefaultRange3Color = 'red'; //Red
                    Tachometer.defaultLabelColor = '#777777';
                    Tachometer.DefaultCalloutFontSizeInPt = 20;
                    Tachometer.DefaultCalloutPercentFontSizeInPt = 14;
                    Tachometer.BaseArcRadiusFactor = 20; //Radius of center arc as a factor of main arc
                    Tachometer.MaxTargetRadiusFactor = 100 - Tachometer.BaseArcRadiusFactor;
                    Tachometer.NeedleHeightToWidthRatio = 0.05; //Width of needle as a factor of its height
                    Tachometer.MainTachometerGroupClassName = 'mainGroup';
                    Tachometer.AxisLabelsGroupClassName = 'axisLablesGroup';
                    Tachometer.OverlayTachometerGroupClassName = 'overlayGroup';
                    Tachometer.LabelText = createClassAndSelector('labelText');
                    Tachometer.TargetConnector = createClassAndSelector('targetConnector');
                    Tachometer.TargetText = createClassAndSelector('targetText');
                    Tachometer.DegreeToRadConversionFactor = Math.PI / 180;
                    Tachometer.RadToDegreeConversionFactor = 180 / Math.PI;
                    Tachometer.TwoPI = Math.PI * 2;
                    Tachometer.formatStringProp = {
                        objectName: 'general',
                        propertyName: 'formatString',
                    };
                    Tachometer.OverlapTolerance = 4;
                    Tachometer.AxisLabelPruningLimit = { width: 3, height: 5 };
                    Tachometer.TargetLabelPruningLimit = { width: 3, height: 4 };
                    Tachometer.CalloutPruningLimit = { width: 1.2, height: 3 };
                    Tachometer.RadialClosenessThreshold = Math.PI / 6;
                    Tachometer.PreferHorizontalThreshold = Math.sin(Math.PI / 4);
                    Tachometer.LineFunction = d3.svg.line()
                        .x(function (d) { return d.x; })
                        .y(function (d) { return d.y; })
                        .interpolate('linear');
                    Tachometer.defaultLabelFontFamily = 'helvetica, arial, sans-serif';
                    Tachometer.defaultLabelfontWeight = 'normal';
                    Tachometer.defaultLabelFontSizeInPt = 9;
                    Tachometer.DefaultRangeThickness = 50;
                    Tachometer.CloseToLeftOrRightThreshold = Math.cos(Math.PI / 6);
                    Tachometer.CloseToTopOrBottomThreshold = Math.cos(Math.PI / 4);
                    Tachometer.defaultTargetSettings = {
                        show: true,
                        value: Tachometer.UnintializedStartValue,
                        lineColor: 'black',
                        innerRadiusRatio: Tachometer.UninitializedRatio,
                        radius: 1,
                        innerRadius: 0.5,
                        thickness: 2,
                        offset: { x: 0, y: 0 },
                        textColor: Tachometer.defaultLabelColor,
                        fontSize: minLabelFontSize,
                        textHeight: PixelConverter.fromPointToPixel(minLabelFontSize),
                    };
                    Tachometer.defaultIndicatorSettings = {
                        value: 0,
                        needlePoints: [],
                        needletransformString: '',
                        pointerSizeFactor: 0.8,
                        pointerColor: '#B3B3B3',
                        baseColor: '#374649',
                        baseRadius: 0.3,
                        baseInnerRadius: 0,
                        baseThicknessFactor: 0.7,
                        baseStartAngle: 0,
                        baseEndtAngle: 0,
                    };
                    Tachometer.RoleNames = {
                        y: 'Y',
                        startValue: 'StartValue',
                        endValue: 'EndValue',
                        targetValue: 'TargetValue',
                        range2StartValue: 'Range2StartValue',
                        range3StartValue: 'Range3StartValue',
                    };
                    return Tachometer;
                }());
                Tachometer1474636471549.Tachometer = Tachometer;
            })(Tachometer1474636471549 = visual.Tachometer1474636471549 || (visual.Tachometer1474636471549 = {}));
        })(visual = extensibility.visual || (extensibility.visual = {}));
    })(extensibility = powerbi.extensibility || (powerbi.extensibility = {}));
})(powerbi || (powerbi = {}));
var powerbi;
(function (powerbi) {
    var visuals;
    (function (visuals) {
        var plugins;
        (function (plugins) {
            plugins.Tachometer1474636471549 = {
                name: 'Tachometer1474636471549',
                displayName: 'Tachometer',
                class: 'Tachometer',
                version: '2.0.0',
                apiVersion: '1.4.0',
                create: function (options) { return new powerbi.extensibility.visual.Tachometer1474636471549.Tachometer(options); },
                custom: true
            };
        })(plugins = visuals.plugins || (visuals.plugins = {}));
    })(visuals = powerbi.visuals || (powerbi.visuals = {}));
})(powerbi || (powerbi = {}));
//# sourceMappingURL=visual.js.map